{"version":3,"file":"pixi-filters.js","sources":["../src/adjustment/AdjustmentFilter.ts","../src/kawase-blur/KawaseBlurFilter.ts","../src/advanced-bloom/ExtractBrightnessFilter.ts","../src/advanced-bloom/AdvancedBloomFilter.ts","../src/ascii/AsciiFilter.ts","../src/backdrop-blur/BackdropBlurFilter.ts","../src/bevel/BevelFilter.ts","../src/bloom/BloomFilter.ts","../src/bulge-pinch/BulgePinchFilter.ts","../node_modules/gradient-parser/build/node.js","../src/color-gradient/CssGradientParser.ts","../src/color-gradient/ColorGradientFilter.ts","../src/color-map/ColorMapFilter.ts","../src/color-overlay/ColorOverlayFilter.ts","../src/color-replace/ColorReplaceFilter.ts","../src/convolution/ConvolutionFilter.ts","../src/cross-hatch/CrossHatchFilter.ts","../src/crt/CRTFilter.ts","../src/dot/DotFilter.ts","../src/drop-shadow/DropShadowFilter.ts","../src/emboss/EmbossFilter.ts","../src/glitch/GlitchFilter.ts","../src/glow/GlowFilter.ts","../src/godray/GodrayFilter.ts","../src/grayscale/GrayscaleFilter.ts","../src/hsl-adjustment/HslAdjustmentFilter.ts","../src/motion-blur/MotionBlurFilter.ts","../src/multi-color-replace/MultiColorReplaceFilter.ts","../src/old-film/OldFilmFilter.ts","../src/outline/OutlineFilter.ts","../src/pixelate/PixelateFilter.ts","../src/radial-blur/RadialBlurFilter.ts","../src/reflection/ReflectionFilter.ts","../src/rgb-split/RGBSplitFilter.ts","../src/shockwave/ShockwaveFilter.ts","../src/simple-lightmap/SimpleLightmapFilter.ts","../src/simplex-noise/SimplexNoiseFilter.ts","../src/tilt-shift/TiltShiftAxisFilter.ts","../src/tilt-shift/TiltShiftFilter.ts","../src/twist/TwistFilter.ts","../src/zoom-blur/ZoomBlurFilter.ts"],"sourcesContent":["import { Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './adjustment.frag';\nimport source from './adjustment.wgsl';\n\n/** Options for the AdjustmentFilter constructor */\nexport interface AdjustmentFilterOptions\n{\n    /**\n     * The amount of luminance\n     * @default 1\n     */\n    gamma?: number;\n    /**\n     * The amount of contrast\n     * @default 1\n     */\n    contrast?: number;\n    /**\n     * The amount of color saturation\n     * @default 1\n     */\n    saturation?: number;\n    /**\n     * The overall brightness\n     * @default 1\n     */\n    brightness?: number;\n    /**\n     * The multiplied red channel\n     * @default 1\n     */\n    red?: number;\n    /**\n     * The multiplied green channel\n     * @default 1\n     */\n    green?: number;\n    /**\n     * The multiplied blue channel\n     * @default 1\n     */\n    blue?: number;\n    /**\n     * The overall alpha channel\n     * @default 1\n     */\n    alpha?: number;\n}\n\n/**\n * The ability to adjust gamma, contrast, saturation, brightness, alpha or color-channel shift.\n * This is a faster and much simpler to use than\n * {@link http://pixijs.download/release/docs/ColorMatrixFilter.html ColorMatrixFilter}\n * because it does not use a matrix.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/adjustment.png)\n *\n * @class\n * @extends Filter\n */\nexport class AdjustmentFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: AdjustmentFilterOptions = {\n        gamma: 1,\n        contrast: 1,\n        saturation: 1,\n        brightness: 1,\n        red: 1,\n        green: 1,\n        blue: 1,\n        alpha: 1,\n    };\n\n    public uniforms: {\n        uGamma: number;\n        uContrast: number;\n        uSaturation: number;\n        uBrightness: number;\n        uColor: Float32Array;\n    };\n\n    /**\n     * @param options - The options of the adjustment filter.\n     */\n    constructor(options?: AdjustmentFilterOptions)\n    {\n        options = { ...AdjustmentFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'adjustment-filter'\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                adjustmentUniforms: {\n                    uGamma: { value: options.gamma, type: 'f32' },\n                    uContrast: { value: options.contrast, type: 'f32' },\n                    uSaturation: { value: options.saturation, type: 'f32' },\n                    uBrightness: { value: options.brightness, type: 'f32' },\n                    uColor: {\n                        value: [\n                            options.red,\n                            options.green,\n                            options.blue,\n                            options.alpha,\n                        ],\n                        type: 'vec4<f32>',\n                    },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.adjustmentUniforms.uniforms;\n    }\n\n    /**\n     * Amount of luminance\n     * @default 1\n     */\n    get gamma(): number { return this.uniforms.uGamma; }\n    set gamma(value: number) { this.uniforms.uGamma = value; }\n\n    /**\n     * Amount of contrast\n     * @default 1\n     */\n    get contrast(): number { return this.uniforms.uContrast; }\n    set contrast(value: number) { this.uniforms.uContrast = value; }\n\n    /**\n     * Amount of color saturation\n     * @default 1\n     */\n    get saturation(): number { return this.uniforms.uSaturation; }\n    set saturation(value: number) { this.uniforms.uSaturation = value; }\n\n    /**\n     * The overall brightness\n     * @default 1\n     */\n    get brightness(): number { return this.uniforms.uBrightness; }\n    set brightness(value: number) { this.uniforms.uBrightness = value; }\n\n    /**\n     * The multiplied red channel\n     * @default 1\n     */\n    get red(): number { return this.uniforms.uColor[0]; }\n    set red(value: number) { this.uniforms.uColor[0] = value; }\n\n    /**\n     * The multiplied blue channel\n     * @default 1\n     */\n    get green(): number { return this.uniforms.uColor[1]; }\n    set green(value: number) { this.uniforms.uColor[1] = value; }\n\n    /**\n     * The multiplied green channel\n     * @default 1\n     */\n    get blue(): number { return this.uniforms.uColor[2]; }\n    set blue(value: number) { this.uniforms.uColor[2] = value; }\n\n    /**\n     * The overall alpha channel\n     * @default 1\n     */\n    get alpha(): number { return this.uniforms.uColor[3]; }\n    set alpha(value: number) { this.uniforms.uColor[3] = value; }\n}\n","import { deprecation, Filter, GlProgram, GpuProgram, TexturePool } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './kawase-blur.frag';\nimport source from './kawase-blur.wgsl';\nimport fragmentClamp from './kawase-blur-clamp.frag';\nimport sourceClamp from './kawase-blur-clamp.wgsl';\n\nimport type { FilterSystem, PointData, RenderSurface, Texture } from 'pixi.js';\n\n/** Options for the KawaseBlurFilter constructor. */\nexport interface KawaseBlurFilterOptions\n{\n    /**\n     * The blur of the filter. Should be greater than `0`.\n     * If value is an Array, setting kernels.\n     * @default 4\n     */\n    strength?: number | [number, number];\n    /**\n     * The quality of the filter. Should be an integer greater than `1`\n     * @default 3\n     */\n    quality?: number;\n    /**\n     * Clamp edges, useful for removing dark edges from fullscreen filters or bleeding to the edge of filterArea.\n     * @default false\n     */\n    clamp?: boolean;\n    /**\n     * Sets the pixel size of the filter. Large size is blurrier. For advanced usage.\n     * @default {x:1,y:1}\n     */\n    pixelSize?: PointData | number[] | number;\n}\n\n/**\n * A much faster blur than Gaussian blur, but more complicated to use.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/kawase-blur.png)\n *\n * @see https://software.intel.com/en-us/blogs/2014/07/15/an-investigation-of-fast-real-time-gpu-based-image-blur-algorithms\n * @class\n * @extends Filter\n */\nexport class KawaseBlurFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: KawaseBlurFilterOptions = {\n        strength: 4,\n        quality: 3,\n        clamp: false,\n        pixelSize: { x: 1, y: 1 },\n    };\n\n    public uniforms: {\n        uOffset: Float32Array;\n    };\n\n    private _pixelSize = { x: 0, y: 0 };\n    private _clamp: boolean;\n    private _kernels: number[] = [];\n    private _blur!: number;\n    private _quality!: number;\n\n    /**\n     * @param options - Options for the KawaseBlurFilter constructor.\n     */\n    constructor(options?: KawaseBlurFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {number|number[]} [blur=4] - The blur of the filter. Should be greater than `0`. If\n     *        value is an Array, setting kernels.\n     * @param {number} [quality=3] - The quality of the filter. Should be an integer greater than `1`.\n     * @param {boolean} [clamp=false] - Clamp edges, useful for removing dark edges\n     *        from fullscreen filters or bleeding to the edge of filterArea.\n     */\n    constructor(blur?: number | number[], quality?: number, clamp?: boolean);\n    /** @ignore */\n    constructor(...args: [KawaseBlurFilterOptions?] | [(number | number[])?, number?, boolean?])\n    {\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number' || Array.isArray(options))\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'KawaseBlurFilter constructor params are now options object. See params: { strength, quality, clamp, pixelSize }');\n\n            options = { strength: options as number | [number, number] };\n\n            if (args[1] !== undefined) options.quality = args[1];\n            if (args[2] !== undefined) options.clamp = args[2];\n        }\n\n        options = { ...KawaseBlurFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source: options?.clamp ? sourceClamp : source,\n                entryPoint: 'mainFragment',\n            },\n        });\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment: options?.clamp ? fragmentClamp : fragment,\n            name: 'kawase-blur-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                kawaseBlurUniforms: {\n                    uOffset: { value: new Float32Array(2), type: 'vec2<f32>' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.kawaseBlurUniforms.uniforms;\n\n        this.pixelSize = options.pixelSize ?? { x: 1, y: 1 };\n\n        if (Array.isArray(options.strength))\n        {\n            this.kernels = options.strength;\n        }\n        else if (typeof options.strength === 'number')\n        {\n            this._blur = options.strength;\n            this.quality = options.quality ?? 3;\n        }\n\n        this._clamp = !!options.clamp;\n    }\n\n    /**\n     * Override existing apply method in `Filter`\n     * @override\n     * @ignore\n     */\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        const uvX = this.pixelSizeX / input.source.width;\n        const uvY = this.pixelSizeY / input.source.height;\n        let offset;\n\n        if (this._quality === 1 || this._blur === 0)\n        {\n            offset = this._kernels[0] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n            filterManager.applyFilter(this, input, output, clearMode);\n        }\n        else\n        {\n            const renderTarget = TexturePool.getSameSizeTexture(input);\n\n            let source = input;\n            let target = renderTarget;\n            let tmp;\n\n            const last = this._quality - 1;\n\n            for (let i = 0; i < last; i++)\n            {\n                offset = this._kernels[i] + 0.5;\n                this.uniforms.uOffset[0] = offset * uvX;\n                this.uniforms.uOffset[1] = offset * uvY;\n                filterManager.applyFilter(this, source, target, true);\n\n                tmp = source;\n                source = target;\n                target = tmp;\n            }\n\n            offset = this._kernels[last] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n\n            filterManager.applyFilter(this, source, output, clearMode);\n            TexturePool.returnTexture(renderTarget);\n        }\n    }\n\n    /**\n      * The amount of blur, value greater than `0`.\n      * @default 4\n      */\n    get strength(): number { return this._blur; }\n    set strength(value: number)\n    {\n        this._blur = value;\n        this._generateKernels();\n    }\n\n    /**\n      * The quality of the filter, integer greater than `1`.\n      * @default 3\n      */\n    get quality(): number { return this._quality; }\n    set quality(value: number)\n    {\n        this._quality = Math.max(1, Math.round(value));\n        this._generateKernels();\n    }\n\n    /**\n      * The kernel size of the blur filter, for advanced usage\n      * @default [0]\n      */\n    get kernels(): number[] { return this._kernels; }\n    set kernels(value: number[])\n    {\n        if (Array.isArray(value) && value.length > 0)\n        {\n            this._kernels = value;\n            this._quality = value.length;\n            this._blur = Math.max(...value);\n        }\n        else\n        {\n            // If value is invalid, set default value\n            this._kernels = [0];\n            this._quality = 1;\n        }\n    }\n\n    /**\n      * The size of the pixels. Large size is blurrier. For advanced usage.\n      * @default {x:1,y:1}\n      */\n    get pixelSize(): PointData { return this._pixelSize; }\n    set pixelSize(value: PointData | number[] | number)\n    {\n        if (typeof value === 'number')\n        {\n            this.pixelSizeX = this.pixelSizeY = value;\n\n            return;\n        }\n\n        if (Array.isArray(value))\n        {\n            this.pixelSizeX = value[0];\n            this.pixelSizeY = value[1];\n\n            return;\n        }\n\n        this._pixelSize = value;\n    }\n\n    /**\n      * The size of the pixels on the `x` axis. Large size is blurrier. For advanced usage.\n      * @default 1\n      */\n    get pixelSizeX(): number { return this.pixelSize.x; }\n    set pixelSizeX(value: number) { this.pixelSize.x = value; }\n\n    /**\n      * The size of the pixels on the `y` axis. Large size is blurrier. For advanced usage.\n      * @default 1\n      */\n    get pixelSizeY(): number { return this.pixelSize.y; }\n    set pixelSizeY(value: number) { this.pixelSize.y = value; }\n\n    /**\n      * Get the if the filter is clamped\n      * @default false\n      */\n    get clamp(): boolean { return this._clamp; }\n\n    /** Update padding based on kernel data */\n    private _updatePadding()\n    {\n        this.padding = Math.ceil(this._kernels.reduce((acc, v) => acc + v + 0.5, 0));\n    }\n\n    /** Auto generate kernels by blur & quality */\n    private _generateKernels()\n    {\n        const blur = this._blur;\n        const quality = this._quality;\n        const kernels: number[] = [blur];\n\n        if (blur > 0)\n        {\n            let k = blur;\n            const step = blur / quality;\n\n            for (let i = 1; i < quality; i++)\n            {\n                k -= step;\n                kernels.push(k);\n            }\n        }\n\n        this._kernels = kernels;\n        this._updatePadding();\n    }\n}\n","import { Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './extract-brightness.frag';\nimport source from './extract-brightness.wgsl';\n\nexport interface ExtractBrightnessFilterOptions\n{\n    /**\n     * Defines how bright a color needs to be extracted.\n     */\n    threshold?: number;\n}\n\n/**\n * Internal filter for retrieving the brightness of the source image.\n * @class\n * @private\n */\nexport class ExtractBrightnessFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: ExtractBrightnessFilterOptions = {\n        threshold: 0.5\n    };\n\n    public uniforms: {\n        uThreshold: number;\n    };\n\n    constructor(options?: ExtractBrightnessFilterOptions)\n    {\n        options = { ...ExtractBrightnessFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'extract-brightness-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                extractBrightnessUniforms: {\n                    uThreshold: { value: options.threshold, type: 'f32' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.extractBrightnessUniforms.uniforms;\n    }\n\n    /**\n     * Defines how bright a color needs to be extracted.\n     * @default 0.5\n     */\n    get threshold(): number { return this.uniforms.uThreshold; }\n    set threshold(value: number) { this.uniforms.uThreshold = value; }\n}\n","import {\n    Filter,\n    FilterSystem,\n    GlProgram,\n    GpuProgram,\n    PointData,\n    RenderSurface,\n    Texture,\n    TexturePool,\n} from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport { KawaseBlurFilter } from '../kawase-blur/KawaseBlurFilter';\nimport fragment from './advanced-bloom.frag';\nimport source from './advanced-bloom.wgsl';\nimport { ExtractBrightnessFilter } from './ExtractBrightnessFilter';\n\n/** Options for the AdvancedBloomFilter constructor. */\nexport interface AdvancedBloomFilterOptions\n{\n    /**\n     * Defines how bright a color needs to be to affect bloom.\n     * @default 1\n     */\n    threshold?: number,\n    /**\n     * To adjust the strength of the bloom. Higher values is more intense brightness.\n     * @default 1\n     */\n    bloomScale?: number,\n    /**\n     * The brightness, lower value is more subtle brightness, higher value is blown-out.\n     * @default 1\n     */\n    brightness?: number,\n    /** The strength of the Blur properties simultaneously */\n    blur?: number,\n    /**\n     * The kernel size of the blur filter.\n     */\n    kernels?: number[],\n    /** The quality of the Blur filter. */\n    quality?: number,\n    /**\n     * The pixel size of the blur filter. Large size is blurrier. For advanced usage.\n     * @default {x:1,y:1}\n     */\n    pixelSize?: PointData | number[] | number,\n}\n\n/**\n * The AdvancedBloomFilter applies a Bloom Effect to an object. Unlike the normal BloomFilter\n * this had some advanced controls for adjusting the look of the bloom. Note: this filter\n * is slower than normal BloomFilter.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/advanced-bloom.png)\n *\n * @class\n * @extends Filter\n */\nexport class AdvancedBloomFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: AdvancedBloomFilterOptions = {\n        threshold: 0.5,\n        bloomScale: 1,\n        brightness: 1,\n        blur: 8,\n        quality: 4,\n        pixelSize: { x: 1, y: 1 },\n    };\n\n    public uniforms: {\n        uBloomScale: number;\n        uBrightness: number;\n    };\n\n    /** To adjust the strength of the bloom. Higher values is more intense brightness. */\n    public bloomScale = 1;\n\n    /** The brightness, lower value is more subtle brightness, higher value is blown-out. */\n    public brightness = 1;\n\n    private _extractFilter: ExtractBrightnessFilter;\n    private _blurFilter: KawaseBlurFilter;\n\n    /**\n     * @param options - Options for the AdvancedBloomFilter constructor.\n     */\n    constructor(options?: AdvancedBloomFilterOptions)\n    {\n        options = { ...AdvancedBloomFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'advanced-bloom-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                advancedBloomUniforms: {\n                    uBloomScale: { value: options.bloomScale, type: 'f32' },\n                    uBrightness: { value: options.brightness, type: 'f32' },\n                },\n                uMapTexture: Texture.WHITE,\n            },\n        });\n\n        this.uniforms = this.resources.advancedBloomUniforms.uniforms;\n\n        this._extractFilter = new ExtractBrightnessFilter({\n            threshold: options.threshold\n        });\n\n        this._blurFilter = new KawaseBlurFilter({\n            strength: options.kernels as [number, number] ?? options.blur,\n            quality: options.kernels ? undefined : options.quality,\n        });\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Override existing apply method in `Filter`\n     * @override\n     * @ignore\n     */\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        const brightTarget = TexturePool.getSameSizeTexture(input);\n\n        this._extractFilter.apply(filterManager, input, brightTarget, true);\n\n        const bloomTarget = TexturePool.getSameSizeTexture(input);\n\n        this._blurFilter.apply(filterManager, brightTarget, bloomTarget, true);\n\n        this.uniforms.uBloomScale = this.bloomScale;\n        this.uniforms.uBrightness = this.brightness;\n\n        this.resources.uMapTexture = bloomTarget.source;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n\n        TexturePool.returnTexture(bloomTarget);\n        TexturePool.returnTexture(brightTarget);\n    }\n\n    /**\n     * Defines how bright a color needs to be extracted.\n     * @default 0.5\n     */\n    get threshold(): number { return this._extractFilter.threshold; }\n    set threshold(value: number) { this._extractFilter.threshold = value; }\n\n    /** The kernels of the Blur Filter */\n    get kernels(): number[] { return this._blurFilter.kernels; }\n    set kernels(value: number[]) { this._blurFilter.kernels = value; }\n\n    /**\n     * The strength of the Blur properties simultaneously\n     * @default 2\n     */\n    get blur(): number { return this._blurFilter.strength; }\n    set blur(value: number) { this._blurFilter.strength = value; }\n\n    /**\n     * The quality of the Blur Filter\n     * @default 4\n     */\n    get quality(): number { return this._blurFilter.quality; }\n    set quality(value: number) { this._blurFilter.quality = value; }\n\n    /**\n     * The pixel size of the Kawase Blur filter\n     * @default {x:1,y:1}\n     */\n    get pixelSize(): PointData { return this._blurFilter.pixelSize; }\n    set pixelSize(value: PointData | number[] | number)\n    {\n        if (typeof value === 'number')\n        {\n            value = { x: value, y: value };\n        }\n\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this._blurFilter.pixelSize = value;\n    }\n\n    /**\n     * The horizontal pixelSize of the Kawase Blur filter\n     * @default 1\n     */\n    get pixelSizeX(): number { return this._blurFilter.pixelSizeX; }\n    set pixelSizeX(value: number) { this._blurFilter.pixelSizeX = value; }\n\n    /**\n     * The vertical pixel size of the Kawase Blur filter\n     * @default 1\n     */\n    get pixelSizeY(): number { return this._blurFilter.pixelSizeY; }\n    set pixelSizeY(value: number) { this._blurFilter.pixelSizeY = value; }\n}\n","import { Color, ColorSource, deprecation, Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './ascii.frag';\nimport source from './ascii.wgsl';\n\n// This WebGPU filter has been ported from the WebGL renderer that was originally created by Vico (@vicocotea)\n\n/** Options for AsciiFilter constructor. */\nexport interface AsciiFilterOptions\n{\n    /**\n     * The pixel size used by the filter\n     * @default 8\n     */\n    size?: number;\n    /**\n     * A color to set the ascii characters to. If not set, the color will be taken from the source.\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0x000000\n     */\n    color?: ColorSource;\n    /**\n     * Determine whether or not to replace the source colors with the provided.\n     *\n     * Will automatically be assigned to `true` if `color` is provided.\n     * Set `replaceColor` to `false` to prevent that.\n     * @default false\n     */\n    replaceColor?: boolean;\n}\n\n/**\n * An ASCII filter.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/ascii.png)\n *\n * @class\n * @extends Filter\n */\nexport class AsciiFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: AsciiFilterOptions = {\n        size: 8,\n        color: 0xffffff,\n        replaceColor: false,\n    };\n\n    public uniforms: {\n        uSize: number;\n        uColor: Float32Array;\n        uReplaceColor: number;\n    };\n\n    private _color!: Color;\n\n    /**\n     * Constructor.\n     * @param {AsciiFilterOptions} options - The options of the ASCII filter.\n     */\n    constructor(options?: AsciiFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {number} [size=8] - Size of the font\n     */\n    constructor(size: number);\n    /** @ignore */\n    constructor(...args: [AsciiFilterOptions?] | [number])\n    {\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'AsciiFilter constructor params are now options object. See params: { size, color, replaceColor }');\n\n            options = { size: options };\n        }\n\n        const replaceColor = options?.color && options.replaceColor !== false;\n\n        options = { ...AsciiFilter.DEFAULT_OPTIONS, ...options } as AsciiFilterOptions;\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'ascii-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                asciiUniforms: {\n                    uSize: { value: options.size, type: 'f32' },\n                    uColor: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uReplaceColor: { value: Number(replaceColor), type: 'f32' },\n                },\n            },\n        });\n\n        this.uniforms = this.resources.asciiUniforms.uniforms;\n        this._color = new Color();\n        this.color = options.color ?? 0xffffff;\n    }\n\n    /**\n     * The pixel size used by the filter.\n     * @default 8\n     */\n    get size(): number { return this.uniforms.uSize; }\n    set size(value: number) { this.uniforms.uSize = value; }\n\n    /**\n     * The resulting color of the ascii characters, as a 3 component RGB or numerical hex\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0xffffff\n     */\n    get color(): ColorSource { return this._color.value as ColorSource; }\n    set color(value: ColorSource)\n    {\n        this._color.setValue(value);\n        const [r, g, b] = this._color.toArray();\n\n        this.uniforms.uColor[0] = r;\n        this.uniforms.uColor[1] = g;\n        this.uniforms.uColor[2] = b;\n    }\n\n    /**\n     * Determine whether or not to replace the source colors with the provided.\n     */\n    get replaceColor(): boolean { return this.uniforms.uReplaceColor > 0.5; }\n    set replaceColor(value: boolean) { this.uniforms.uReplaceColor = value ? 1 : 0; }\n}\n","import {\n    BlurFilter,\n    BlurFilterOptions,\n    Filter,\n    FilterSystem,\n    GlProgram,\n    GpuProgram,\n    RenderSurface,\n    Texture,\n    TexturePool,\n} from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './backdrop-blur-blend.frag';\nimport wgslFragment from './backdrop-blur-blend.wgsl';\n\n/**\n * The BackdropBlurFilter applies a Gaussian blur to everything behind an object, and then draws the object on top of it.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/backdrop-blur.png)\n *\n * @class\n * @extends BlurFilter\n */\nexport class BackdropBlurFilter extends BlurFilter\n{\n    private _blendPass: Filter;\n\n    /**\n     * @param options - The options of the blur filter.\n     */\n    constructor(options?: BlurFilterOptions)\n    {\n        super(options);\n\n        this.blendRequired = true;\n        this.padding = 0;\n\n        this._blendPass = new Filter({\n            gpuProgram: GpuProgram.from({\n                vertex: {\n                    source: wgslVertex,\n                    entryPoint: 'mainVertex',\n                },\n                fragment: {\n                    source: wgslFragment,\n                    entryPoint: 'mainFragment',\n                },\n            }),\n            glProgram: GlProgram.from({\n                vertex,\n                fragment,\n                name: 'drop-shadow-filter',\n            }),\n            resources: {\n                uBackground: Texture.EMPTY,\n            },\n        });\n    }\n\n    /**\n     * Override existing apply method in `Filter`\n     * @override\n     * @ignore\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        // @ts-expect-error - this should probably not be grabbed from a private property\n        const backTexture = filterManager._activeFilterData.backTexture;\n\n        const blurredBackground = TexturePool.getSameSizeTexture(input);\n\n        super.apply(filterManager, backTexture, blurredBackground, true);\n\n        this._blendPass.resources.uBackground = blurredBackground.source;\n        this._blendPass.apply(filterManager, input, output, clearMode);\n\n        TexturePool.returnTexture(blurredBackground);\n    }\n\n    protected updatePadding(): void\n    {\n        this.padding = 0;\n    }\n}\n","import { Color, ColorSource, DEG_TO_RAD, Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './bevel.frag';\nimport source from './bevel.wgsl';\n\n/** Options for the BevelFilter constructor. */\nexport interface BevelFilterOptions\n{\n    /**\n     * The angle of the light in degrees\n     * @default 45\n     */\n    rotation?: number,\n    /**\n     * The thickness of the bevel\n     * @default 2\n     */\n    thickness?: number,\n    /**\n     * The color value of the left & top bevel.\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0xffffff\n     */\n    lightColor?: ColorSource,\n    /**\n     * The alpha value of the left & top bevel.\n     * @default 0.7\n     */\n    lightAlpha?: number,\n    /**\n     * The color value of the right & bottom bevel.\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0x000000\n     */\n    shadowColor?: ColorSource,\n    /**\n     * The alpha value of the right & bottom bevel.\n     * @default 0.7\n     */\n    shadowAlpha?: number,\n}\n\n/**\n * Bevel Filter.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/bevel.png)\n *\n * @class\n * @extends Filter\n */\nexport class BevelFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: BevelFilterOptions = {\n        rotation: 45,\n        thickness: 2,\n        lightColor: 0xffffff,\n        lightAlpha: 0.7,\n        shadowColor: 0x000000,\n        shadowAlpha: 0.7,\n    };\n\n    public uniforms: {\n        uLightColor: Float32Array;\n        uLightAlpha: number;\n        uShadowColor: Float32Array;\n        uShadowAlpha: number;\n        uTransform: Float32Array;\n    };\n\n    private _thickness!: number;\n    private _rotation!: number;\n    private _lightColor: Color;\n    private _shadowColor: Color;\n\n    /**\n     * @param options - Options for the BevelFilter constructor.\n     */\n    constructor(options?: BevelFilterOptions)\n    {\n        options = { ...BevelFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'bevel-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                bevelUniforms: {\n                    uLightColor: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uLightAlpha: { value: options.lightAlpha, type: 'f32' },\n                    uShadowColor: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uShadowAlpha: { value: options.shadowAlpha, type: 'f32' },\n                    uTransform: { value: new Float32Array(2), type: 'vec2<f32>' },\n                }\n            },\n            // Workaround: https://github.com/pixijs/filters/issues/230\n            // applies correctly only if there is at least a single-pixel padding with alpha=0 around an image\n            // To solve this problem, a padding of 1 put on the filter should suffice\n            padding: 1,\n        });\n\n        this.uniforms = this.resources.bevelUniforms.uniforms;\n        this._lightColor = new Color();\n        this._shadowColor = new Color();\n        this.lightColor = options.lightColor ?? 0xffffff;\n        this.shadowColor = options.shadowColor ?? 0x000000;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * The angle of the light in degrees\n     * @default 45\n     */\n    get rotation(): number { return this._rotation / DEG_TO_RAD; }\n    set rotation(value: number)\n    {\n        this._rotation = value * DEG_TO_RAD;\n        this._updateTransform();\n    }\n\n    /**\n     * The thickness of the bevel\n     * @default 2\n     */\n    get thickness(): number { return this._thickness; }\n    set thickness(value: number)\n    {\n        this._thickness = value;\n        this._updateTransform();\n    }\n\n    /**\n     * The color value of the left & top bevel.\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0xffffff\n     */\n    get lightColor(): ColorSource { return this._lightColor.value as ColorSource; }\n    set lightColor(value: ColorSource)\n    {\n        this._lightColor.setValue(value);\n        const [r, g, b] = this._lightColor.toArray();\n\n        this.uniforms.uLightColor[0] = r;\n        this.uniforms.uLightColor[1] = g;\n        this.uniforms.uLightColor[2] = b;\n    }\n\n    /**\n     * The alpha value of the left & top bevel.\n     * @default 0.7\n     */\n    get lightAlpha(): number { return this.uniforms.uLightAlpha; }\n    set lightAlpha(value: number) { this.uniforms.uLightAlpha = value; }\n\n    /**\n     * The color value of the right & bottom bevel.\n     * @default 0xffffff\n     */\n    get shadowColor(): ColorSource { return this._shadowColor.value as ColorSource; }\n    set shadowColor(value: ColorSource)\n    {\n        this._shadowColor.setValue(value);\n        const [r, g, b] = this._shadowColor.toArray();\n\n        this.uniforms.uShadowColor[0] = r;\n        this.uniforms.uShadowColor[1] = g;\n        this.uniforms.uShadowColor[2] = b;\n    }\n\n    /**\n     * The alpha value of the right & bottom bevel.\n     * @default 0.7\n     */\n    get shadowAlpha(): number { return this.uniforms.uShadowAlpha; }\n    set shadowAlpha(value: number) { this.uniforms.uShadowAlpha = value; }\n\n    /**\n     * Update the transform matrix of offset angle.\n     * @private\n     */\n    private _updateTransform()\n    {\n        this.uniforms.uTransform[0] = this.thickness * Math.cos(this._rotation);\n        this.uniforms.uTransform[1] = this.thickness * Math.sin(this._rotation);\n    }\n}\n","/* eslint-disable max-len */\nimport {\n    AlphaFilter,\n    BlurFilterPass,\n    deprecation,\n    FilterSystem,\n    PointData,\n    RenderSurface,\n    Texture,\n    TexturePool,\n} from 'pixi.js';\n\ntype DeprecatedBlurValue = number | PointData | number[];\n\n/** Options for the BloomFilter constructor. */\nexport interface BloomFilterOptions\n{\n    /**\n     * Sets the strength of the blur. If only a number is provided, it will assign to both x and y.\n     * @default {x:2,y:2}\n     */\n    strength?: PointData | number;\n    /**\n     * The quality of the blur.\n     * @default 4\n     */\n    quality?: number;\n    /**\n     * The resolution of the blurX & blurY filter.\n     * @default 1\n     */\n    resolution?: number;\n    /**\n     * The kernel size of the blur filter. Must be an odd number between 5 and 15 (inclusive).\n     * @default 5\n     */\n    kernelSize?: number;\n}\n\n/**\n * The BloomFilter applies a Gaussian blur to an object.\n * The strength of the blur can be set for x- and y-axis separately.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/bloom.png)\n *\n * @class\n * @extends Filter\n */\nexport class BloomFilter extends AlphaFilter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: BloomFilterOptions = {\n        strength: { x: 2, y: 2 },\n        quality: 4,\n        resolution: 1,\n        kernelSize: 5\n    };\n\n    private _blurXFilter: BlurFilterPass;\n    private _blurYFilter: BlurFilterPass;\n    private _strength: PointData;\n\n    /**\n     * @param {BloomFilterOptions} options - Options for the BloomFilter constructor.\n     */\n    constructor(options?: BloomFilterOptions);\n    /**\n    * @deprecated since 6.0.0\n    *\n    * @param {number|PIXI.PointData|number[]} [blur=2] - Sets the strength of both the blurX and blurY properties simultaneously\n    * @param {number} [quality=4] - The quality of the blurX & blurY filter.\n    * @param {number} [resolution=1] - The resolution of the blurX & blurY filter.\n    * @param {number} [kernelSize=5] - The kernelSize of the blurX & blurY filter.Options: 5, 7, 9, 11, 13, 15.\n    */\n    constructor(blur?: DeprecatedBlurValue, quality?: number, resolution?: number, kernelSize?: number);\n    /** @ignore */\n    constructor(...args: [BloomFilterOptions?] | [DeprecatedBlurValue?, number?, number?, number?])\n    {\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number' || Array.isArray(options) || ('x' in options && 'y' in options))\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'BloomFilter constructor params are now options object. See params: { strength, quality, resolution, kernelSize }');\n\n            let strength = options;\n\n            if (Array.isArray(strength)) strength = { x: strength[0], y: strength[1] };\n\n            options = { strength };\n\n            if (args[1] !== undefined) options.quality = args[1];\n            if (args[2] !== undefined) options.resolution = args[2];\n            if (args[3] !== undefined) options.kernelSize = args[3];\n        }\n\n        options = { ...BloomFilter.DEFAULT_OPTIONS, ...options } as BloomFilterOptions;\n\n        super();\n\n        this._strength = { x: 2, y: 2 };\n\n        if (options.strength)\n        {\n            if (typeof options.strength === 'number')\n            {\n                this._strength.x = options.strength;\n                this._strength.y = options.strength;\n            }\n            else\n            {\n                this._strength.x = options.strength.x;\n                this._strength.y = options.strength.y;\n            }\n        }\n\n        this._blurXFilter = new BlurFilterPass({\n            ...options,\n            horizontal: true,\n            strength: this.strengthX,\n        });\n\n        this._blurYFilter = new BlurFilterPass({\n            ...options,\n            horizontal: false,\n            strength: this.strengthY,\n        });\n\n        this._blurYFilter.blendMode = 'screen';\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Override existing apply method in `Filter`\n     * @override\n     * @ignore\n     */\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clear: boolean,\n    ): void\n    {\n        const renderTarget = TexturePool.getSameSizeTexture(input);\n\n        filterManager.applyFilter(this, input, output, clear);\n        this._blurXFilter.apply(filterManager, input, renderTarget, true);\n        this._blurYFilter.apply(filterManager, renderTarget, output, false);\n\n        TexturePool.returnTexture(renderTarget);\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     * @default 2\n     */\n    get strength(): PointData { return this._strength; }\n    set strength(value: PointData | number)\n    {\n        this._strength = typeof value === 'number' ? { x: value, y: value } : value;\n        this._updateStrength();\n    }\n\n    /**\n     * Sets the strength of the blur on the `x` axis\n     * @default 2\n     */\n    get strengthX(): number { return this.strength.x; }\n    set strengthX(value: number)\n    {\n        this.strength.x = value;\n        this._updateStrength();\n    }\n\n    /**\n     * Sets the strength of the blur on the `y` axis\n     * @default 2\n     */\n    get strengthY(): number { return this.strength.y; }\n    set strengthY(value: number)\n    {\n        this.strength.y = value;\n        this._updateStrength();\n    }\n\n    private _updateStrength()\n    {\n        this._blurXFilter.blur = this.strengthX;\n        this._blurYFilter.blur = this.strengthY;\n    }\n\n    /**\n     * @deprecated since 6.0.0\n     *\n     * The strength of both the blurX and blurY properties simultaneously\n     * @default 2\n     * @see BloomFilter#strength\n     */\n    get blur(): number\n    {\n        deprecation('6.0.0', 'BloomFilter.blur is deprecated, please use BloomFilter.strength instead');\n\n        return this.strengthX;\n    }\n    set blur(value: number)\n    {\n        deprecation('6.0.0', 'BloomFilter.blur is deprecated, please use BloomFilter.strength instead');\n\n        this.strength = value;\n    }\n\n    /**\n     * @deprecated since 6.0.0\n     *\n     * The strength of the blurX property\n     * @default 2\n     * @see BloomFilter#strengthX\n     */\n    get blurX(): number\n    {\n        deprecation('6.0.0', 'BloomFilter.blurX is deprecated, please use BloomFilter.strengthX instead');\n\n        return this.strengthX;\n    }\n    set blurX(value: number)\n    {\n        deprecation('6.0.0', 'BloomFilter.blurX is deprecated, please use BloomFilter.strengthX instead');\n\n        this.strengthX = value;\n    }\n\n    /**\n     * @deprecated since 6.0.0\n     *\n     * The strength of the blurY property\n     * @default 2\n     * @see BloomFilter#strengthY\n     */\n    get blurY(): number\n    {\n        deprecation('6.0.0', 'BloomFilter.blurY is deprecated, please use BloomFilter.strengthY instead');\n\n        return this.strengthY;\n    }\n    set blurY(value: number)\n    {\n        deprecation('6.0.0', 'BloomFilter.blurY is deprecated, please use BloomFilter.strengthY instead');\n\n        this.strengthY = value;\n    }\n}\n","import { Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './bulge-pinch.frag';\nimport source from './bulge-pinch.wgsl';\n\nimport type { FilterSystem, PointData, RenderSurface, Texture } from 'pixi.js';\n\n// This WebGPU filter has been ported from the WebGL renderer that was originally created by Julien CLEREL (@JuloxRox)\n\n/** Options for the BulgePinchFilter constructor. */\nexport interface BulgePinchFilterOptions\n{\n    /**\n     * Offset coordinates to change the position of the center of the circle of effect.\n     * @default {x:0,y:0}\n     */\n    center?: PointData | number[] | number;\n    /**\n     * The radius of the circle of effect\n     * @default 100\n     */\n    radius?: number;\n    /**\n     * A value between -1 and 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\n     * @default 1\n     */\n    strength?: number;\n}\n\n/**\n * Bulges or pinches the image in a circle.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/bulge-pinch.gif)\n *\n * @class\n * @extends Filter\n */\nexport class BulgePinchFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: BulgePinchFilterOptions = {\n        center: { x: 0.5, y: 0.5 },\n        radius: 100,\n        strength: 1\n    };\n\n    public uniforms: {\n        uDimensions: Float32Array;\n        uCenter: PointData;\n        uRadius: number;\n        uStrength: number;\n    };\n\n    /**\n     * @param options - Options for the BulgePinchFilter constructor.\n     */\n    constructor(options?: BulgePinchFilterOptions)\n    {\n        options = { ...BulgePinchFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'bulge-pinch-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                bulgePinchUniforms: {\n                    uDimensions: { value: [0, 0], type: 'vec2<f32>' },\n                    uCenter: { value: options.center, type: 'vec2<f32>' },\n                    uRadius: { value: options.radius, type: 'f32' },\n                    uStrength: { value: options.strength, type: 'f32' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.bulgePinchUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Override existing apply method in `Filter`\n     * @override\n     * @ignore\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        this.uniforms.uDimensions[0] = input.frame.width;\n        this.uniforms.uDimensions[1] = input.frame.height;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * Sets the center of the effect in normalized screen coords.\n     * { x: 0, y: 0 } means top-left and { x: 1, y: 1 } mean bottom-right\n     * @default {x:0.5,y:0.5}\n     */\n    get center(): PointData { return this.uniforms.uCenter; }\n    set center(value: PointData | number[] | number)\n    {\n        if (typeof value === 'number')\n        {\n            value = { x: value, y: value };\n        }\n\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this.uniforms.uCenter = value;\n    }\n\n    /**\n     * Sets the center of the effect in normalized screen coords on the `x` axis\n     * @default 0\n     */\n    get centerX(): number { return this.uniforms.uCenter.x; }\n    set centerX(value: number) { this.uniforms.uCenter.x = value; }\n\n    /**\n     * Sets the center of the effect in normalized screen coords on the `y` axis\n     * @default 0\n     */\n    get centerY(): number { return this.uniforms.uCenter.y; }\n    set centerY(value: number) { this.uniforms.uCenter.y = value; }\n\n    /**\n     * The radius of the circle of effect\n     * @default 100\n     */\n    get radius(): number { return this.uniforms.uRadius; }\n    set radius(value: number) { this.uniforms.uRadius = value; }\n\n    /**\n     * A value between -1 and 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\n     * @default 1\n     */\n    get strength(): number { return this.uniforms.uStrength; }\n    set strength(value: number) { this.uniforms.uStrength = value; }\n}\n","// Copyright (c) 2014 Rafael Caricio. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nvar GradientParser = (GradientParser || {});\n\nGradientParser.stringify = (function() {\n\n  var visitor = {\n\n    'visit_linear-gradient': function(node) {\n      return visitor.visit_gradient(node);\n    },\n\n    'visit_repeating-linear-gradient': function(node) {\n      return visitor.visit_gradient(node);\n    },\n\n    'visit_radial-gradient': function(node) {\n      return visitor.visit_gradient(node);\n    },\n\n    'visit_repeating-radial-gradient': function(node) {\n      return visitor.visit_gradient(node);\n    },\n\n    'visit_gradient': function(node) {\n      var orientation = visitor.visit(node.orientation);\n      if (orientation) {\n        orientation += ', ';\n      }\n\n      return node.type + '(' + orientation + visitor.visit(node.colorStops) + ')';\n    },\n\n    'visit_shape': function(node) {\n      var result = node.value,\n          at = visitor.visit(node.at),\n          style = visitor.visit(node.style);\n\n      if (style) {\n        result += ' ' + style;\n      }\n\n      if (at) {\n        result += ' at ' + at;\n      }\n\n      return result;\n    },\n\n    'visit_default-radial': function(node) {\n      var result = '',\n          at = visitor.visit(node.at);\n\n      if (at) {\n        result += at;\n      }\n      return result;\n    },\n\n    'visit_extent-keyword': function(node) {\n      var result = node.value,\n          at = visitor.visit(node.at);\n\n      if (at) {\n        result += ' at ' + at;\n      }\n\n      return result;\n    },\n\n    'visit_position-keyword': function(node) {\n      return node.value;\n    },\n\n    'visit_position': function(node) {\n      return visitor.visit(node.value.x) + ' ' + visitor.visit(node.value.y);\n    },\n\n    'visit_%': function(node) {\n      return node.value + '%';\n    },\n\n    'visit_em': function(node) {\n      return node.value + 'em';\n    },\n\n    'visit_px': function(node) {\n      return node.value + 'px';\n    },\n\n    'visit_literal': function(node) {\n      return visitor.visit_color(node.value, node);\n    },\n\n    'visit_hex': function(node) {\n      return visitor.visit_color('#' + node.value, node);\n    },\n\n    'visit_rgb': function(node) {\n      return visitor.visit_color('rgb(' + node.value.join(', ') + ')', node);\n    },\n\n    'visit_rgba': function(node) {\n      return visitor.visit_color('rgba(' + node.value.join(', ') + ')', node);\n    },\n\n    'visit_color': function(resultColor, node) {\n      var result = resultColor,\n          length = visitor.visit(node.length);\n\n      if (length) {\n        result += ' ' + length;\n      }\n      return result;\n    },\n\n    'visit_angular': function(node) {\n      return node.value + 'deg';\n    },\n\n    'visit_directional': function(node) {\n      return 'to ' + node.value;\n    },\n\n    'visit_array': function(elements) {\n      var result = '',\n          size = elements.length;\n\n      elements.forEach(function(element, i) {\n        result += visitor.visit(element);\n        if (i < size - 1) {\n          result += ', ';\n        }\n      });\n\n      return result;\n    },\n\n    'visit': function(element) {\n      if (!element) {\n        return '';\n      }\n      var result = '';\n\n      if (element instanceof Array) {\n        return visitor.visit_array(element, result);\n      } else if (element.type) {\n        var nodeVisitor = visitor['visit_' + element.type];\n        if (nodeVisitor) {\n          return nodeVisitor(element);\n        } else {\n          throw Error('Missing visitor visit_' + element.type);\n        }\n      } else {\n        throw Error('Invalid node.');\n      }\n    }\n\n  };\n\n  return function(root) {\n    return visitor.visit(root);\n  };\n})();\n\n// Copyright (c) 2014 Rafael Caricio. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nvar GradientParser = (GradientParser || {});\n\nGradientParser.parse = (function() {\n\n  var tokens = {\n    linearGradient: /^(\\-(webkit|o|ms|moz)\\-)?(linear\\-gradient)/i,\n    repeatingLinearGradient: /^(\\-(webkit|o|ms|moz)\\-)?(repeating\\-linear\\-gradient)/i,\n    radialGradient: /^(\\-(webkit|o|ms|moz)\\-)?(radial\\-gradient)/i,\n    repeatingRadialGradient: /^(\\-(webkit|o|ms|moz)\\-)?(repeating\\-radial\\-gradient)/i,\n    sideOrCorner: /^to (left (top|bottom)|right (top|bottom)|left|right|top|bottom)/i,\n    extentKeywords: /^(closest\\-side|closest\\-corner|farthest\\-side|farthest\\-corner|contain|cover)/,\n    positionKeywords: /^(left|center|right|top|bottom)/i,\n    pixelValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))px/,\n    percentageValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))\\%/,\n    emValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))em/,\n    angleValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))deg/,\n    startCall: /^\\(/,\n    endCall: /^\\)/,\n    comma: /^,/,\n    hexColor: /^\\#([0-9a-fA-F]+)/,\n    literalColor: /^([a-zA-Z]+)/,\n    rgbColor: /^rgb/i,\n    rgbaColor: /^rgba/i,\n    number: /^(([0-9]*\\.[0-9]+)|([0-9]+\\.?))/\n  };\n\n  var input = '';\n\n  function error(msg) {\n    var err = new Error(input + ': ' + msg);\n    err.source = input;\n    throw err;\n  }\n\n  function getAST() {\n    var ast = matchListDefinitions();\n\n    if (input.length > 0) {\n      error('Invalid input not EOF');\n    }\n\n    return ast;\n  }\n\n  function matchListDefinitions() {\n    return matchListing(matchDefinition);\n  }\n\n  function matchDefinition() {\n    return matchGradient(\n            'linear-gradient',\n            tokens.linearGradient,\n            matchLinearOrientation) ||\n\n          matchGradient(\n            'repeating-linear-gradient',\n            tokens.repeatingLinearGradient,\n            matchLinearOrientation) ||\n\n          matchGradient(\n            'radial-gradient',\n            tokens.radialGradient,\n            matchListRadialOrientations) ||\n\n          matchGradient(\n            'repeating-radial-gradient',\n            tokens.repeatingRadialGradient,\n            matchListRadialOrientations);\n  }\n\n  function matchGradient(gradientType, pattern, orientationMatcher) {\n    return matchCall(pattern, function(captures) {\n\n      var orientation = orientationMatcher();\n      if (orientation) {\n        if (!scan(tokens.comma)) {\n          error('Missing comma before color stops');\n        }\n      }\n\n      return {\n        type: gradientType,\n        orientation: orientation,\n        colorStops: matchListing(matchColorStop)\n      };\n    });\n  }\n\n  function matchCall(pattern, callback) {\n    var captures = scan(pattern);\n\n    if (captures) {\n      if (!scan(tokens.startCall)) {\n        error('Missing (');\n      }\n\n      var result = callback(captures);\n\n      if (!scan(tokens.endCall)) {\n        error('Missing )');\n      }\n\n      return result;\n    }\n  }\n\n  function matchLinearOrientation() {\n    return matchSideOrCorner() ||\n      matchAngle();\n  }\n\n  function matchSideOrCorner() {\n    return match('directional', tokens.sideOrCorner, 1);\n  }\n\n  function matchAngle() {\n    return match('angular', tokens.angleValue, 1);\n  }\n\n  function matchListRadialOrientations() {\n    var radialOrientations,\n        radialOrientation = matchRadialOrientation(),\n        lookaheadCache;\n\n    if (radialOrientation) {\n      radialOrientations = [];\n      radialOrientations.push(radialOrientation);\n\n      lookaheadCache = input;\n      if (scan(tokens.comma)) {\n        radialOrientation = matchRadialOrientation();\n        if (radialOrientation) {\n          radialOrientations.push(radialOrientation);\n        } else {\n          input = lookaheadCache;\n        }\n      }\n    }\n\n    return radialOrientations;\n  }\n\n  function matchRadialOrientation() {\n    var radialType = matchCircle() ||\n      matchEllipse();\n\n    if (radialType) {\n      radialType.at = matchAtPosition();\n    } else {\n      var extent = matchExtentKeyword();\n      if (extent) {\n        radialType = extent;\n        var positionAt = matchAtPosition();\n        if (positionAt) {\n          radialType.at = positionAt;\n        }\n      } else {\n        var defaultPosition = matchPositioning();\n        if (defaultPosition) {\n          radialType = {\n            type: 'default-radial',\n            at: defaultPosition\n          };\n        }\n      }\n    }\n\n    return radialType;\n  }\n\n  function matchCircle() {\n    var circle = match('shape', /^(circle)/i, 0);\n\n    if (circle) {\n      circle.style = matchLength() || matchExtentKeyword();\n    }\n\n    return circle;\n  }\n\n  function matchEllipse() {\n    var ellipse = match('shape', /^(ellipse)/i, 0);\n\n    if (ellipse) {\n      ellipse.style =  matchDistance() || matchExtentKeyword();\n    }\n\n    return ellipse;\n  }\n\n  function matchExtentKeyword() {\n    return match('extent-keyword', tokens.extentKeywords, 1);\n  }\n\n  function matchAtPosition() {\n    if (match('position', /^at/, 0)) {\n      var positioning = matchPositioning();\n\n      if (!positioning) {\n        error('Missing positioning value');\n      }\n\n      return positioning;\n    }\n  }\n\n  function matchPositioning() {\n    var location = matchCoordinates();\n\n    if (location.x || location.y) {\n      return {\n        type: 'position',\n        value: location\n      };\n    }\n  }\n\n  function matchCoordinates() {\n    return {\n      x: matchDistance(),\n      y: matchDistance()\n    };\n  }\n\n  function matchListing(matcher) {\n    var captures = matcher(),\n      result = [];\n\n    if (captures) {\n      result.push(captures);\n      while (scan(tokens.comma)) {\n        captures = matcher();\n        if (captures) {\n          result.push(captures);\n        } else {\n          error('One extra comma');\n        }\n      }\n    }\n\n    return result;\n  }\n\n  function matchColorStop() {\n    var color = matchColor();\n\n    if (!color) {\n      error('Expected color definition');\n    }\n\n    color.length = matchDistance();\n    return color;\n  }\n\n  function matchColor() {\n    return matchHexColor() ||\n      matchRGBAColor() ||\n      matchRGBColor() ||\n      matchLiteralColor();\n  }\n\n  function matchLiteralColor() {\n    return match('literal', tokens.literalColor, 0);\n  }\n\n  function matchHexColor() {\n    return match('hex', tokens.hexColor, 1);\n  }\n\n  function matchRGBColor() {\n    return matchCall(tokens.rgbColor, function() {\n      return  {\n        type: 'rgb',\n        value: matchListing(matchNumber)\n      };\n    });\n  }\n\n  function matchRGBAColor() {\n    return matchCall(tokens.rgbaColor, function() {\n      return  {\n        type: 'rgba',\n        value: matchListing(matchNumber)\n      };\n    });\n  }\n\n  function matchNumber() {\n    return scan(tokens.number)[1];\n  }\n\n  function matchDistance() {\n    return match('%', tokens.percentageValue, 1) ||\n      matchPositionKeyword() ||\n      matchLength();\n  }\n\n  function matchPositionKeyword() {\n    return match('position-keyword', tokens.positionKeywords, 1);\n  }\n\n  function matchLength() {\n    return match('px', tokens.pixelValue, 1) ||\n      match('em', tokens.emValue, 1);\n  }\n\n  function match(type, pattern, captureIndex) {\n    var captures = scan(pattern);\n    if (captures) {\n      return {\n        type: type,\n        value: captures[captureIndex]\n      };\n    }\n  }\n\n  function scan(regexp) {\n    var captures,\n        blankCaptures;\n\n    blankCaptures = /^[\\n\\r\\t\\s]+/.exec(input);\n    if (blankCaptures) {\n        consume(blankCaptures[0].length);\n    }\n\n    captures = regexp.exec(input);\n    if (captures) {\n        consume(captures[0].length);\n    }\n\n    return captures;\n  }\n\n  function consume(size) {\n    input = input.substr(size);\n  }\n\n  return function(code) {\n    input = code.toString();\n    return getAST();\n  };\n})();\n\nexports.parse = GradientParser.parse;\nexports.stringify = GradientParser.stringify;\n","import {\n    AngularNode,\n    ColorStop as CssColorStop,\n    DefaultRadialNode,\n    DirectionalNode,\n    ExtentKeywordNode,\n    GradientNode,\n    parse,\n    ShapeNode\n} from 'gradient-parser';\nimport { Color } from 'pixi.js';\nimport { ColorStop } from './ColorGradientFilter';\n\nexport type ParseResult = {\n    type: number;\n    stops: ColorStop[];\n    angle: number;\n};\n\nexport function parseCssGradient(cssGradient: string): ParseResult\n{\n    const cssGradientNodes: GradientNode[] = parse(trimCssGradient(cssGradient));\n\n    if (cssGradientNodes.length === 0)\n    {\n        throw new Error('Invalid CSS gradient.');\n    }\n    else if (cssGradientNodes.length !== 1)\n    {\n        throw new Error('Unsupported CSS gradient (multiple gradients is not supported).');\n    }\n\n    const cssGradientNode = cssGradientNodes[0];\n\n    const type = typeFromCssType(cssGradientNode.type);\n    const stops = stopsFromCssStops(cssGradientNode.colorStops);\n    const angle = angleFromCssOrientation(cssGradientNode.orientation);\n\n    return {\n        type,\n        stops,\n        angle,\n    };\n}\n\nexport function typeFromCssType(type: string): number\n{\n    const supportedTypes: { [key: string]: number } = {\n        'linear-gradient': 0,\n        'radial-gradient': 1,\n    };\n\n    if (!(type in supportedTypes))\n    {\n        throw new Error(`Unsupported gradient type \"${type}\"`);\n    }\n\n    return supportedTypes[type];\n}\n\nexport function stopsFromCssStops(stops: CssColorStop[]): ColorStop[]\n{\n    const offsets: number[] = offsetsFromCssColorStops(stops);\n    const result: ColorStop[] = [];\n    const color = new Color();\n\n    for (let i = 0; i < stops.length; i++)\n    {\n        const colorString = colorAsStringFromCssStop(stops[i]);\n        const rgbaColor = color.setValue(colorString).toArray();\n\n        result.push({\n            offset: offsets[i],\n            color: rgbaColor.slice(0, 3),\n            alpha: rgbaColor[3]\n        });\n    }\n\n    return result;\n}\n\nexport function colorAsStringFromCssStop(stop: CssColorStop): string\n{\n    switch (stop.type)\n    {\n        case 'hex':\n            return `#${stop.value}`;\n        case 'literal':\n            return stop.value;\n        default:\n            return `${stop.type}(${stop.value.join(',')})`;\n    }\n}\n\nexport function offsetsFromCssColorStops(stops: CssColorStop[]): number[]\n{\n    const offsets: number[] = [];\n    const dynamicOffset = -1;\n\n    for (let i = 0; i < stops.length; i++)\n    {\n        const cssStop = stops[i];\n        let stopOffset = dynamicOffset;\n\n        if (cssStop.type === 'literal')\n        {\n            if (cssStop.length && 'type' in cssStop.length && cssStop.length.type === '%' && 'value' in cssStop.length)\n            {\n                stopOffset = parseFloat(cssStop.length.value) / 100;\n            }\n        }\n\n        offsets.push(stopOffset);\n    }\n\n    const findNextFixedStop = (fromIndex: number): { indexDelta: number; offset: number; } =>\n    {\n        for (let k = fromIndex; k < offsets.length; k++)\n        {\n            if (offsets[k] !== dynamicOffset)\n            {\n                return {\n                    indexDelta: k - fromIndex,\n                    offset: offsets[k]\n                };\n            }\n        }\n\n        return {\n            indexDelta: (offsets.length - 1) - fromIndex,\n            offset: 1.0\n        };\n    };\n\n    let prevFixedOffset = 0;\n\n    for (let i = 0; i < offsets.length; i++)\n    {\n        const offset = offsets[i];\n\n        if (offset !== dynamicOffset)\n        {\n            prevFixedOffset = offset;\n        }\n        else if (i === 0)\n        {\n            offsets[i] = 0;\n        }\n        else if (i + 1 === offsets.length)\n        {\n            offsets[i] = 1.0;\n        }\n        else\n        {\n            const nextFixed = findNextFixedStop(i);\n            const offsetDelta = nextFixed.offset - prevFixedOffset;\n            const stepSize = offsetDelta / (1 + nextFixed.indexDelta);\n\n            for (let s = 0; s <= nextFixed.indexDelta; s++)\n            {\n                offsets[i + s] = prevFixedOffset + ((s + 1) * stepSize);\n            }\n\n            i += nextFixed.indexDelta;\n            prevFixedOffset = offsets[i];\n        }\n    }\n\n    return offsets.map(fixFloatRounding);\n}\n\n// fixes issues like 0.3 - 0.1 = 0.19999999999999998\nfunction fixFloatRounding(value: number): number\n{\n    const maxLength = 6;\n\n    if (value.toString().length > maxLength)\n    {\n        return parseFloat(value.toString().substring(0, maxLength));\n    }\n\n    return value;\n}\n\ntype CssOrientation = DirectionalNode | AngularNode | (ShapeNode | DefaultRadialNode | ExtentKeywordNode)[] | undefined;\n\nexport function angleFromCssOrientation(orientation: CssOrientation): number\n{\n    if (typeof orientation === 'undefined')\n    {\n        return 0;\n    }\n\n    if ('type' in orientation && 'value' in orientation)\n    {\n        switch (orientation.type)\n        {\n            case 'angular':\n                return parseFloat(orientation.value);\n            case 'directional':\n                return angleFromDirectionalValue(orientation.value);\n        }\n    }\n\n    return 0;\n}\n\nexport function angleFromDirectionalValue(value: string): number\n{\n    const supportedValues: { [key: string]: number } = {\n        left: 270,\n        top: 0,\n        bottom: 180,\n        right: 90,\n        'left top': 315,\n        'top left': 315,\n        'left bottom': 225,\n        'bottom left': 225,\n        'right top': 45,\n        'top right': 45,\n        'right bottom': 135,\n        'bottom right': 135,\n    };\n\n    if (!(value in supportedValues))\n    {\n        throw new Error(`Unsupported directional value \"${value}\"`);\n    }\n\n    return supportedValues[value];\n}\n\nexport function trimCssGradient(value: string) : string\n{\n    let value_ = value.replace(/\\s{2,}/gu, ' ');\n\n    value_ = value_.replace(/;/g, '');\n    value_ = value_.replace(/ ,/g, ',');\n    value_ = value_.replace(/\\( /g, '(');\n    value_ = value_.replace(/ \\)/g, ')');\n\n    return value_.trim();\n}\n","import { Color, ColorSource, Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport fragment from './color-gradient.frag';\nimport vertex from './color-gradient.vert';\nimport source from './color-gradient.wgsl';\nimport { parseCssGradient } from './CssGradientParser';\n\n/** Color stop object. */\nexport interface ColorStop\n{\n    offset: number;\n    color: ColorSource;\n    alpha: number;\n}\n\n/** Options for ColorGradientFilter constructor. */\nexport interface ColorGradientFilterOptions\n{\n    /**\n     * Linear = 0, Radial = 1, Conic = 2\n     * @default ColorGradientFilter.LINEAR\n     */\n    type: number;\n    /** Collection of stops, must be 2+ */\n    stops: ColorStop[];\n    /**\n     * Angle for linear gradients, in degrees.\n     * @default 90\n     */\n    angle?: number;\n    /**\n     * Alpha value for the gradient.\n     * @default 1\n     */\n    alpha?: number;\n    /**\n     * Maximum number of colors to render (0 = no limit)\n     * @default 0\n     */\n    maxColors?: number;\n    /**\n     * If true, the gradient will replace the existing color, otherwise it will be multiplied with it\n     * @default false\n     */\n    replace?: boolean;\n}\n\n/** Options for CSS-style gradient for use with constructor. */\nexport interface ColorGradientFilterCSSOptions\n{\n    /** CSS-style gradient string */\n    css: string;\n    /**\n     * Alpha value for the gradient.\n     * @default 1\n     */\n    alpha?: number;\n    /**\n     * Maximum number of colors to render (0 = no limit)\n     * @default 0\n     */\n    maxColors?: number;\n}\n\nconst ANGLE_OFFSET = 90; // align degrees with CSS\n\nfunction sortColorStops(stops: ColorStop[]): ColorStop[]\n{\n    return [...stops].sort((a, b) => a.offset - b.offset);\n}\n\n/**\n * Render a colored gradient.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/color-gradient.png)\n *\n * @class\n * @extends Filter\n */\nexport class ColorGradientFilter extends Filter\n{\n    /** Gradient types */\n    static readonly LINEAR = 0;\n    static readonly RADIAL = 1;\n    static readonly CONIC = 2;\n\n    /** Default constructor options */\n    public static readonly defaults: ColorGradientFilterOptions = {\n        type: ColorGradientFilter.LINEAR,\n        stops: [\n            { offset: 0.0, color: 0xff0000, alpha: 1.0 },\n            { offset: 1.0, color: 0x0000ff, alpha: 1.0 },\n        ],\n        alpha: 1.0,\n        angle: 90.0,\n        maxColors: 0,\n        replace: false,\n    };\n\n    public baseUniforms: {\n        uOptions: Float32Array;\n        uCounts: Float32Array;\n    };\n\n    public stopsUniforms: {\n        uColors: Float32Array;\n        uStops: Float32Array;\n    };\n\n    private _stops: ColorStop[] = [];\n\n    /**\n     * @param options - Options for the ColorGradientFilter constructor.\n     */\n    constructor(options?: ColorGradientFilterOptions | ColorGradientFilterCSSOptions)\n    {\n        if (options && 'css' in options)\n        {\n            options = {\n                ...parseCssGradient(options.css || ''),\n                alpha: options.alpha ?? ColorGradientFilter.defaults.alpha,\n                maxColors: options.maxColors ?? ColorGradientFilter.defaults.maxColors,\n            };\n        }\n        else\n        {\n            options = { ...ColorGradientFilter.defaults, ...options };\n        }\n\n        if (!options.stops || options.stops.length < 2)\n        {\n            throw new Error('ColorGradientFilter requires at least 2 color stops.');\n        }\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'color-gradient-filter',\n        });\n\n        const maxStops = 32;\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                baseUniforms: {\n                    uOptions: {\n                        value: [\n                            // Gradient Type\n                            options.type,\n                            // Gradient Angle\n                            options.angle ?? ANGLE_OFFSET,\n                            // Master Alpha\n                            options.alpha,\n                            // Replace Base Color\n                            options.replace ? 1 : 0,\n                        ],\n                        type: 'vec4<f32>',\n                    },\n                    uCounts: {\n                        value: [\n                            // Number of Stops\n                            options.stops.length,\n                            // Max Gradient Colors\n                            options.maxColors,\n                        ],\n                        type: 'vec2<f32>',\n                    },\n                },\n                stopsUniforms: {\n                    uColors: { value: new Float32Array(maxStops * 3), type: 'vec3<f32>', size: maxStops },\n\n                    // We only need vec2, but we need to pad to eliminate the WGSL warning, TODO: @Mat ?\n                    uStops: { value: new Float32Array(maxStops * 4), type: 'vec4<f32>', size: maxStops },\n                }\n            },\n        });\n\n        this.baseUniforms = this.resources.baseUniforms.uniforms;\n        this.stopsUniforms = this.resources.stopsUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    get stops(): ColorStop[]\n    {\n        return this._stops;\n    }\n\n    set stops(stops: ColorStop[])\n    {\n        const sortedStops = sortColorStops(stops);\n        const color = new Color();\n        let r;\n        let g;\n        let b;\n\n        for (let i = 0; i < sortedStops.length; i++)\n        {\n            color.setValue(sortedStops[i].color);\n            const indexStart = i * 3;\n\n            [r, g, b] = color.toArray();\n            this.stopsUniforms.uColors[indexStart] = r;\n            this.stopsUniforms.uColors[indexStart + 1] = g;\n            this.stopsUniforms.uColors[indexStart + 2] = b;\n\n            this.stopsUniforms.uStops[i * 4] = sortedStops[i].offset;\n            this.stopsUniforms.uStops[(i * 4) + 1] = sortedStops[i].alpha;\n        }\n\n        this.baseUniforms.uCounts[0] = sortedStops.length;\n        this._stops = sortedStops;\n    }\n\n    /**\n   * The type of gradient\n   * @default ColorGradientFilter.LINEAR\n   */\n    get type(): number { return this.baseUniforms.uOptions[0]; }\n    set type(value: number) { this.baseUniforms.uOptions[0] = value; }\n\n    /**\n   * The angle of the gradient in degrees\n   * @default 90\n   */\n    get angle(): number { return this.baseUniforms.uOptions[1] + ANGLE_OFFSET; }\n    set angle(value: number) { this.baseUniforms.uOptions[1] = value - ANGLE_OFFSET; }\n\n    /**\n   * The alpha value of the gradient (0-1)\n   * @default 1\n   */\n    get alpha(): number { return this.baseUniforms.uOptions[2]; }\n    set alpha(value: number) { this.baseUniforms.uOptions[2] = value; }\n\n    /**\n   * The maximum number of colors to render (0 = no limit)\n   * @default 0\n   */\n    get maxColors(): number { return this.baseUniforms.uCounts[1]; }\n    set maxColors(value: number) { this.baseUniforms.uCounts[1] = value; }\n\n    /**\n     * If true, the gradient will replace the existing color, otherwise it\n     * will be multiplied with it\n     * @default false\n     */\n    get replace(): boolean { return this.baseUniforms.uOptions[3] > 0.5; }\n    set replace(value: boolean) { this.baseUniforms.uOptions[3] = value ? 1 : 0; }\n}\n\n","import { deprecation, Filter, GlProgram, GpuProgram, SCALE_MODE, Texture, TextureSource } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './color-map.frag';\nimport source from './color-map.wgsl';\n\ntype ColorMapTexture = TextureSource | Texture;\n\n/** Options for the ColorMapFilter constructor. */\nexport interface ColorMapFilterOptions\n{\n    /** The colorMap texture of the filter. */\n    colorMap: ColorMapTexture;\n    /**\n     *  The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n     * @default 1\n     */\n    mix?: number;\n    /**\n     * Whether use NEAREST scale mode for `colorMap` texture.\n     * @default false\n     */\n    nearest?: boolean;\n}\n\n/**\n * The ColorMapFilter applies a color-map effect to an object.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/color-map.png)\n *\n * @class\n * @extends Filter\n */\nexport class ColorMapFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: ColorMapFilterOptions = {\n        colorMap: Texture.WHITE,\n        nearest: false,\n        mix: 1\n    };\n\n    public uniforms: {\n        uMix: number;\n        uSize: number;\n        uSliceSize: number;\n        uSlicePixelSize: number;\n        uSliceInnerSize: number;\n    };\n\n    private _size = 0;\n    private _sliceSize = 0;\n    private _slicePixelSize = 0;\n    private _sliceInnerSize = 0;\n    private _nearest = false;\n    private _scaleMode: SCALE_MODE = 'linear';\n    private _colorMap!: ColorMapTexture;\n\n    /**\n     * @param options - Options for the ColorMapFilter constructor.\n     */\n    constructor(options: ColorMapFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {HTMLImageElement|HTMLCanvasElement|PIXI.BaseTexture|PIXI.Texture} [colorMap] - The\n     *        colorMap texture of the filter.\n     * @param {boolean} [nearest=false] - Whether use NEAREST for colorMap texture.\n     * @param {number} [mix=1] - The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n     */\n    constructor(colorMap: ColorMapTexture, nearest?: boolean, mix?: number);\n    /** @ignore */\n    constructor(...args: [ColorMapFilterOptions] | [ColorMapTexture, boolean?, number?])\n    {\n        let options = args[0] ?? {};\n\n        if (options instanceof Texture || options instanceof TextureSource)\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'ColorMapFilter constructor params are now options object. See params: { colorMap, nearest, mix }');\n\n            options = { colorMap: options };\n\n            if (args[1] !== undefined) options.nearest = args[1];\n            if (args[2] !== undefined) options.mix = args[2];\n        }\n\n        options = { ...ColorMapFilter.DEFAULT_OPTIONS, ...options };\n\n        if (!options.colorMap) throw Error('No color map texture source was provided to ColorMapFilter');\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'color-map-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                colorMapUniforms: {\n                    uMix: { value: options.mix, type: 'f32' },\n                    uSize: { value: 0, type: 'f32' },\n                    uSliceSize: { value: 0, type: 'f32' },\n                    uSlicePixelSize: { value: 0, type: 'f32' },\n                    uSliceInnerSize: { value: 0, type: 'f32' },\n                },\n                uMapTexture: options.colorMap.source,\n                uMapSampler: options.colorMap.source.style,\n            },\n        });\n\n        this.uniforms = this.resources.colorMapUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    /** The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image. */\n    get mix(): number { return this.uniforms.uMix; }\n    set mix(value: number) { this.uniforms.uMix = value; }\n\n    /**\n     * The size of one color slice.\n     * @readonly\n     */\n    get colorSize(): number { return this._size; }\n\n    /** The colorMap texture. */\n    get colorMap(): ColorMapTexture { return this._colorMap; }\n    set colorMap(value: ColorMapTexture)\n    {\n        if (!value || value === this.colorMap) return;\n\n        const source = value instanceof Texture ? value.source : value;\n\n        source.style.scaleMode = this._scaleMode;\n        source.autoGenerateMipmaps = false;\n\n        this._size = source.height;\n        this._sliceSize = 1 / this._size;\n        this._slicePixelSize = this._sliceSize / this._size;\n        this._sliceInnerSize = this._slicePixelSize * (this._size - 1);\n\n        this.uniforms.uSize = this._size;\n        this.uniforms.uSliceSize = this._sliceSize;\n        this.uniforms.uSlicePixelSize = this._slicePixelSize;\n        this.uniforms.uSliceInnerSize = this._sliceInnerSize;\n\n        this.resources.uMapTexture = source;\n        this._colorMap = value;\n    }\n\n    /** Whether use NEAREST for colorMap texture. */\n    get nearest(): boolean { return this._nearest; }\n    set nearest(nearest: boolean)\n    {\n        this._nearest = nearest;\n        this._scaleMode = nearest ? 'nearest' : 'linear';\n\n        const texture = this._colorMap;\n\n        if (texture && texture.source)\n        {\n            texture.source.scaleMode = this._scaleMode;\n            texture.source.autoGenerateMipmaps = false;\n            texture.source.style.update();\n            texture.source.update();\n        }\n    }\n\n    /**\n     * If the colorMap is based on canvas,\n     * and the content of canvas has changed, then call `updateColorMap` for update texture.\n     */\n    updateColorMap(): void\n    {\n        const texture = this._colorMap;\n\n        if (texture?.source)\n        {\n            texture.source.update();\n            this.colorMap = texture;\n        }\n    }\n\n    /**\n     * Destroys this filter\n     * @default false\n     */\n    destroy(): void\n    {\n        this._colorMap?.destroy(/** true | TODO: Should base texture be destroyed? **/);\n        super.destroy();\n    }\n}\n","import { Color, ColorSource, deprecation, Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './color-overlay.frag';\nimport source from './color-overlay.wgsl';\n\ntype DeprecatedColor = number | number[] | Float32Array;\n\n/** Options for the ColorOverlayFilter constructor. */\nexport interface ColorOverlayFilterOptions\n{\n    /**\n     * The color of the overlay\n     * @default 0x000000\n     */\n    color?: ColorSource;\n    /**\n     * The alpha of the overlay\n     * @default 1\n     */\n    alpha?: number;\n}\n\n/**\n * Overlay a source graphic with a color.<br>\n *\n * @class\n * @extends Filter\n */\nexport class ColorOverlayFilter extends Filter\n{\n    /** Default shockwave filter options */\n    public static readonly DEFAULT_OPTIONS: ColorOverlayFilterOptions = {\n        /** The color of the overlay */\n        color: 0x000000,\n        /** The alpha of the overlay */\n        alpha: 1,\n    };\n\n    public uniforms: {\n        uColor: Float32Array;\n        uAlpha: number;\n    };\n\n    private _color: Color;\n\n    /**\n     * @param options - Options for the ColorOverlayFilter constructor.\n     */\n    constructor(options?: ColorOverlayFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {number|Array<number>} [color=0x000000] - The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]\n     * @param {number} [alpha=1] - The alpha value of the color\n     */\n    constructor(color?: DeprecatedColor, alpha?: number);\n    /** @ignore */\n    constructor(...args: [ColorOverlayFilterOptions?] | [DeprecatedColor?, number?])\n    {\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number' || Array.isArray(options) || options instanceof Float32Array)\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'ColorOverlayFilter constructor params are now options object. See params: { color, alpha }');\n\n            options = { color: options };\n\n            if (args[1] !== undefined) options.alpha = args[1];\n        }\n\n        options = { ...ColorOverlayFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'color-overlay-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                colorOverlayUniforms: {\n                    uColor: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uAlpha: { value: options.alpha, type: 'f32' },\n                },\n            },\n        });\n\n        this.uniforms = this.resources.colorOverlayUniforms.uniforms;\n\n        this._color = new Color();\n        this.color = options.color ?? 0x000000;\n    }\n\n    /**\n     * The over color source\n     * @member {number|Array<number>|Float32Array}\n     * @default 0x000000\n     */\n    get color(): ColorSource { return this._color.value as ColorSource; }\n    set color(value: ColorSource)\n    {\n        this._color.setValue(value);\n        const [r, g, b] = this._color.toArray();\n\n        this.uniforms.uColor[0] = r;\n        this.uniforms.uColor[1] = g;\n        this.uniforms.uColor[2] = b;\n    }\n\n    /**\n     * The alpha value of the color\n     * @default 1\n     */\n    get alpha(): number { return this.uniforms.uAlpha; }\n    set alpha(value: number) { this.uniforms.uAlpha = value; }\n}\n","import { Color, ColorSource, deprecation, Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './color-replace.frag';\nimport source from './color-replace.wgsl';\n\n/**\n * This WebGPU filter has been ported from the WebGL renderer that was originally created by mishaa, updated by timetocode\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\n */\n\ntype DeprecatedColor = number | number[] | Float32Array;\n\n/** Options for the ColorReplaceFilter constructor. */\nexport interface ColorReplaceFilterOptions\n{\n    /**\n     * The color that will be changed.\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0xff0000\n     */\n    originalColor?: ColorSource;\n    /**\n     * The resulting color.\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0x000000\n     */\n    targetColor?: ColorSource;\n    /**\n     * Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     * @default 0.4\n     */\n    tolerance?: number;\n}\n\n/**\n * ColorReplaceFilter, originally by mishaa, updated by timetocode\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/color-replace.png)\n *\n * @class\n * @extends Filter\n *\n * @example\n *  // replaces true red with true blue\n *  someSprite.filters = [new ColorReplaceFilter({\n *   originalColor: [1, 0, 0],\n *   targetColor: [0, 0, 1],\n *   tolerance: 0.001\n *   })];\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.filters = [new ColorReplaceFilter({\n *   originalColor: [220/255.0, 220/255.0, 220/255.0],\n *   targetColor: [225/255.0, 200/255.0, 215/255.0],\n *   tolerance: 0.001\n *   })];\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.filters = [new ColorReplaceFilter({ originalColor: 0xdcdcdc, targetColor: 0xe1c8d7, tolerance: 0.001 })];\n *\n */\nexport class ColorReplaceFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: ColorReplaceFilterOptions = {\n        originalColor: 0xff0000,\n        targetColor: 0x000000,\n        tolerance: 0.4\n    };\n\n    public uniforms: {\n        uOriginalColor: Float32Array,\n        uTargetColor: Float32Array,\n        uTolerance: number,\n    };\n\n    private _originalColor: Color;\n    private _targetColor: Color;\n\n    /**\n     * @param options - Options for the ColorReplaceFilter constructor.\n     */\n    constructor(options?: ColorReplaceFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {number|Array<number>|Float32Array} [originalColor=0xFF0000] - The color that will be changed,\n     *        as a 3 component RGB e.g. `[1.0, 1.0, 1.0]`\n     * @param {number|Array<number>|Float32Array} [newColor=0x000000] - The resulting color, as a 3 component\n     *        RGB e.g. `[1.0, 0.5, 1.0]`\n     * @param {number} [epsilon=0.4] - Tolerance/sensitivity of the floating-point comparison between colors\n     *        (lower = more exact, higher = more inclusive)\n     */\n    constructor(originalColor?: number, newColor?: number, epsilon?: number);\n    /** @ignore */\n    constructor(...args: [ColorReplaceFilterOptions?] | [DeprecatedColor?, DeprecatedColor?, number?])\n    {\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number' || Array.isArray(options) || options instanceof Float32Array)\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'ColorReplaceFilter constructor params are now options object. See params: { originalColor, targetColor, tolerance }');\n\n            options = { originalColor: options };\n\n            if (args[1] !== undefined) options.targetColor = args[1];\n            if (args[2] !== undefined) options.tolerance = args[2];\n        }\n\n        options = { ...ColorReplaceFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'color-replace-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                colorReplaceUniforms: {\n                    uOriginalColor: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uTargetColor: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uTolerance: { value: options.tolerance, type: 'f32' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.colorReplaceUniforms.uniforms;\n\n        this._originalColor = new Color();\n        this._targetColor = new Color();\n        this.originalColor = options.originalColor ?? 0xff0000;\n        this.targetColor = options.targetColor ?? 0x000000;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * The color that will be changed.\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0xff0000\n     */\n    get originalColor(): ColorSource { return this._originalColor.value as ColorSource; }\n    set originalColor(value: ColorSource)\n    {\n        this._originalColor.setValue(value);\n        const [r, g, b] = this._originalColor.toArray();\n\n        this.uniforms.uOriginalColor[0] = r;\n        this.uniforms.uOriginalColor[1] = g;\n        this.uniforms.uOriginalColor[2] = b;\n    }\n\n    /**\n      * The resulting color.\n      * @example [1.0, 1.0, 1.0] = 0xffffff\n      * @default 0x000000\n      */\n    get targetColor(): ColorSource { return this._targetColor.value as ColorSource; }\n    set targetColor(value: ColorSource)\n    {\n        this._targetColor.setValue(value);\n        const [r, g, b] = this._targetColor.toArray();\n\n        this.uniforms.uTargetColor[0] = r;\n        this.uniforms.uTargetColor[1] = g;\n        this.uniforms.uTargetColor[2] = b;\n    }\n\n    /**\n      * Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n      * @default 0.4\n      */\n    get tolerance(): number { return this.uniforms.uTolerance; }\n    set tolerance(value: number) { this.uniforms.uTolerance = value; }\n\n    /**\n     * @deprecated since 6.0.0\n     *\n     * The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]\n     * @member {number|Array<number>|Float32Array}\n     * @default 0x000000\n     * @see ColorReplaceFilter#targetColor\n     */\n    set newColor(value: DeprecatedColor)\n    {\n        deprecation('6.0.0', 'ColorReplaceFilter.newColor is deprecated, please use ColorReplaceFilter.targetColor instead');\n\n        this.targetColor = value;\n    }\n    get newColor(): DeprecatedColor\n    {\n        deprecation('6.0.0', 'ColorReplaceFilter.newColor is deprecated, please use ColorReplaceFilter.targetColor instead');\n\n        return this.targetColor as DeprecatedColor;\n    }\n\n    /**\n     * @deprecated since 6.0.0\n     *\n     * Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     * @default 0.4\n     * @see ColorReplaceFilter#tolerance\n     */\n    set epsilon(value: number)\n    {\n        deprecation('6.0.0', 'ColorReplaceFilter.epsilon is deprecated, please use ColorReplaceFilter.tolerance instead');\n\n        this.tolerance = value;\n    }\n    get epsilon(): number\n    {\n        deprecation('6.0.0', 'ColorReplaceFilter.epsilon is deprecated, please use ColorReplaceFilter.tolerance instead');\n\n        return this.tolerance;\n    }\n}\n","import { deprecation, Filter, GlProgram, GpuProgram, PointData } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './convolution.frag';\nimport source from './convolution.wgsl';\n\ntype FixedArray<T, L extends number> = [ T, ...Array<T> ] & { length: L };\n\nexport type ConvolutionMatrix = Float32Array | FixedArray<number, 9>;\n\n/** Options for the ConvolutionFilter constructor. */\nexport interface ConvolutionFilterOptions\n{\n    /**\n     * An array of values used for matrix transformation, specified as a 9 point Array\n     * @example\n     * const matrix = new Float32Array(9); // 9 elements of value 0\n     * const matrix = [0,0.5,0,0.5,1,0.5,0,0.5,0];\n     * @default [0,0,0,0,0,0,0,0,0]\n     */\n    matrix?: ConvolutionMatrix;\n    /**\n     * Width of the object you are transforming\n     * @default 200\n     */\n    width?: number;\n    /**\n     * Height of the object you are transforming\n     * @default 200\n     */\n    height?: number;\n}\n\n/**\n * The ConvolutionFilter class applies a matrix convolution filter effect.\n * A convolution combines pixels in the input image with neighboring pixels to produce a new image.\n * A wide variety of image effects can be achieved through convolutions, including blurring, edge\n * detection, sharpening, embossing, and beveling. The matrix should be specified as a 9 point Array.\n * See https://docs.gimp.org/2.10/en/gimp-filter-convolution-matrix.html for more info.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/convolution.png)\n *\n * @class\n * @extends Filter\n */\nexport class ConvolutionFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: ConvolutionFilterOptions = {\n        matrix: new Float32Array(9),\n        width: 200,\n        height: 200,\n    };\n\n    public uniforms: {\n        uMatrix: ConvolutionMatrix;\n        uTexelSize: PointData;\n    };\n\n    /**\n     * @param options - Options for the ConvolutionFilter constructor.\n     */\n    constructor(options?: ConvolutionFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {number[]} [matrix=[0,0,0,0,0,0,0,0,0]] - An array of values used for matrix transformation.\n     *        Specified as a 9 point Array.\n     * @param {number} [width=200] - Width of the object you are transforming\n     * @param {number} [height=200] - Height of the object you are transforming\n     */\n    constructor(matrix: number[], width?: number, height?: number);\n    /** @ignore */\n    constructor(...args: [ConvolutionFilterOptions?] | [number[], number?, number?])\n    {\n        let options = args[0] ?? {};\n\n        if (Array.isArray(options))\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'ConvolutionFilter constructor params are now options object. See params: { matrix, width, height }');\n\n            options = { matrix: options as ConvolutionMatrix };\n\n            if (args[1] !== undefined) options.width = args[1];\n            if (args[2] !== undefined) options.height = args[2];\n        }\n\n        options = { ...ConvolutionFilter.DEFAULT_OPTIONS, ...options };\n\n        const width = options.width ?? 200;\n        const height = options.height ?? 200;\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'convolution-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                convolutionUniforms: {\n                    uMatrix: { value: options.matrix, type: 'mat3x3<f32>' },\n                    uTexelSize: { value: { x: 1 / width, y: 1 / height }, type: 'vec2<f32>' },\n                },\n            },\n        });\n\n        this.uniforms = this.resources.convolutionUniforms.uniforms;\n\n        this.width = width;\n        this.height = height;\n    }\n\n    /**\n     * An array of values used for matrix transformation, specified as a 9 point Array\n     * @example\n     * const matrix = new Float32Array(9); // 9 elements of value 0\n     * const matrix = [0,0.5,0,0.5,1,0.5,0,0.5,0];\n     * @default [0,0,0,0,0,0,0,0,0]\n     */\n    get matrix(): ConvolutionMatrix { return this.uniforms.uMatrix; }\n    set matrix(matrix: ConvolutionMatrix)\n    {\n        matrix.forEach((v, i) =>\n        {\n            this.uniforms.uMatrix[i] = v;\n        });\n    }\n\n    /**\n     * Width of the object you are transforming\n     * @default 200\n     */\n    get width(): number { return 1 / this.uniforms.uTexelSize.x; }\n    set width(value: number) { this.uniforms.uTexelSize.x = 1 / value; }\n\n    /**\n     * Height of the object you are transforming\n     * @default 200\n     */\n    get height(): number { return 1 / this.uniforms.uTexelSize.y; }\n    set height(value: number) { this.uniforms.uTexelSize.y = 1 / value; }\n}\n","import { Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './crosshatch.frag';\nimport source from './crosshatch.wgsl';\n\n/**\n * A Cross Hatch effect filter.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/cross-hatch.png)\n *\n * @class\n * @extends Filter\n */\nexport class CrossHatchFilter extends Filter\n{\n    constructor()\n    {\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'cross-hatch-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {},\n        });\n    }\n}\n","import { Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './crt.frag';\nimport source from './crt.wgsl';\n\nimport type { FilterSystem, RenderSurface, Texture } from 'pixi.js';\n\n/** Options for the CRTFilter constructor. */\nexport interface CRTFilterOptions\n{\n    /**\n     * Bend of interlaced lines, higher value means more bend\n     * @default 1\n     */\n    curvature?: number,\n    /**\n     * Width of the interlaced lines\n     * @default 1\n     */\n    lineWidth?: number,\n    /**\n     * Contrast of interlaced lines\n     * @default 0.25\n     */\n    lineContrast?: number,\n    /**\n     * The orientation of the line:\n     *\n     * `true` create vertical lines, `false` creates horizontal lines\n     * @default false\n     */\n    verticalLine?: boolean,\n    /**\n     * For animating interlaced lines\n     * @default 0\n     */\n    time?: number,\n    /**\n     * Opacity/intensity of the noise effect between `0` and `1`\n     * @default 0.3\n     */\n    noise?: number,\n    /**\n     * The size of the noise particles\n     * @default 1\n     */\n    noiseSize?: number,\n    /**\n     * A seed value to apply to the random noise generation\n     * @default 0\n     */\n    seed?: number,\n    /**\n     * The radius of the vignette effect, smaller values produces a smaller vignette\n     * @default 0.3\n     */\n    vignetting?: number,\n    /**\n     * Amount of opacity on the vignette\n     * @default 1\n     */\n    vignettingAlpha?: number,\n    /**\n     * Blur intensity of the vignette\n     * @default 0.3\n     */\n    vignettingBlur?: number,\n}\n\n/**\n * The CRTFilter applies a CRT effect to an object.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/crt.png)\n *\n * @class\n * @extends Filter\n */\nexport class CRTFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: CRTFilterOptions = {\n        curvature: 1.0,\n        lineWidth: 1.0,\n        lineContrast: 0.25,\n        verticalLine: false,\n        noise: 0.0,\n        noiseSize: 1.0,\n        vignetting: 0.3,\n        vignettingAlpha: 1.0,\n        vignettingBlur: 0.3,\n        time: 0.0,\n        seed: 0.0,\n    };\n\n    public uniforms: {\n        uLine: Float32Array;\n        uNoise: Float32Array;\n        uVignette: Float32Array;\n        uSeed: number;\n        uTime: number;\n        uDimensions: Float32Array;\n    };\n\n    /**\n     * A seed value to apply to the random noise generation\n     * @default 0\n     */\n    public seed!: number;\n\n    /**\n     * Opacity/intensity of the noise effect between `0` and `1`\n     * @default 0.3\n     */\n    public time!: number;\n\n    /**\n     * @param options - Options for the CRTFilter constructor.\n     */\n    constructor(options?: CRTFilterOptions)\n    {\n        options = { ...CRTFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'crt-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                crtUniforms: {\n                    uLine: { value: new Float32Array(4), type: 'vec4<f32>' },\n                    uNoise: { value: new Float32Array(2), type: 'vec2<f32>' },\n                    uVignette: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uSeed: { value: options.seed, type: 'f32' },\n                    uTime: { value: options.time, type: 'f32' },\n                    uDimensions: { value: new Float32Array(2), type: 'vec2<f32>' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.crtUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Override existing apply method in `Filter`\n     * @override\n     * @ignore\n     */\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        this.uniforms.uDimensions[0] = input.frame.width;\n        this.uniforms.uDimensions[1] = input.frame.height;\n\n        this.uniforms.uSeed = this.seed;\n        this.uniforms.uTime = this.time;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * Bend of interlaced lines, higher value means more bend\n     * @default 1\n     */\n    get curvature(): number { return this.uniforms.uLine[0]; }\n    set curvature(value: number) { this.uniforms.uLine[0] = value; }\n\n    /**\n     * Width of interlaced lines\n     * @default 1\n     */\n    get lineWidth(): number { return this.uniforms.uLine[1]; }\n    set lineWidth(value: number) { this.uniforms.uLine[1] = value; }\n\n    /**\n     * Contrast of interlaced lines\n     * @default 0.25\n     */\n    get lineContrast(): number { return this.uniforms.uLine[2]; }\n    set lineContrast(value: number) { this.uniforms.uLine[2] = value; }\n\n    /**\n     * The orientation of the line:\n     *\n     * `true` create vertical lines, `false` creates horizontal lines\n     * @default false\n     */\n    get verticalLine(): boolean { return this.uniforms.uLine[3] > 0.5; }\n    set verticalLine(value: boolean) { this.uniforms.uLine[3] = value ? 1 : 0; }\n\n    /**\n     * Opacity/intensity of the noise effect between `0` and `1`\n     * @default 0.3\n     */\n    get noise(): number { return this.uniforms.uNoise[0]; }\n    set noise(value: number) { this.uniforms.uNoise[0] = value; }\n\n    /**\n     * The size of the noise particles\n     * @default 0\n     */\n    get noiseSize(): number { return this.uniforms.uNoise[1]; }\n    set noiseSize(value: number) { this.uniforms.uNoise[1] = value; }\n\n    /**\n     * The radius of the vignette effect, smaller values produces a smaller vignette\n     * @default 0.3\n     */\n    get vignetting(): number { return this.uniforms.uVignette[0]; }\n    set vignetting(value: number) { this.uniforms.uVignette[0] = value; }\n\n    /**\n     * Amount of opacity of vignette\n     * @default 1\n     */\n    get vignettingAlpha(): number { return this.uniforms.uVignette[1]; }\n    set vignettingAlpha(value: number) { this.uniforms.uVignette[1] = value; }\n\n    /**\n     * Blur intensity of the vignette\n     * @default 0.3\n     */\n    get vignettingBlur(): number { return this.uniforms.uVignette[2]; }\n    set vignettingBlur(value: number) { this.uniforms.uVignette[2] = value; }\n}\n","import { deprecation, Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './dot.frag';\nimport source from './dot.wgsl';\n\n/** Options for the DotFilter constructor. */\nexport interface DotFilterOptions\n{\n    /**\n     * The scale of the effect\n     * @default 1\n     */\n    scale?: number;\n    /**\n     * The angle of the effect\n     * @default 5\n     */\n    angle?: number;\n    /**\n     * Whether to rendering it in gray scale\n     * @default true\n     */\n    grayscale?: boolean;\n}\n\n/**\n * This filter applies a dotscreen effect making display objects appear to be made out of\n * black and white halftone dots like an old printer.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/dot.png)\n *\n * {@link https://github.com/evanw/glfx.js/blob/master/src/filters/fun/dotscreen.js Original filter}\n *\n * @class\n * @extends Filter\n */\nexport class DotFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: DotFilterOptions = {\n        scale: 1,\n        angle: 5,\n        grayscale: true\n    };\n\n    /**\n     * @param options - Options for the DotFilter constructor.\n     */\n    constructor(options?: DotFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {number} [scale=1] - The scale of the effect.\n     * @param {number} [angle=5] - The radius of the effect.\n     * @param {boolean} [grayscale=true] - Render as grayscale.\n     */\n    constructor(scale?: number, angle?: number, grayscale?: boolean);\n    /** @ignore */\n    constructor(...args: [DotFilterOptions?] | [number?, number?, boolean?])\n    {\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'DotFilter constructor params are now options object. See params: { scale, angle, grayscale }');\n\n            options = { scale: options };\n\n            if (args[1] !== undefined) options.angle = args[1];\n            if (args[2] !== undefined) options.grayscale = args[2];\n        }\n\n        options = { ...DotFilter.DEFAULT_OPTIONS, ...options };\n\n        const dotUniforms = {\n            uScale: { value: options.scale, type: 'f32' },\n            uAngle: { value: options.angle, type: 'f32' },\n            uGrayScale: { value: options.grayscale ? 1 : 0, type: 'f32' },\n        };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'dot-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                dotUniforms,\n            },\n        });\n    }\n\n    /**\n     * The scale of the effect.\n     * @default 1\n     */\n    get scale(): number { return this.resources.dotUniforms.uniforms.uScale; }\n    set scale(value: number) { this.resources.dotUniforms.uniforms.uScale = value; }\n\n    /**\n    * The radius of the effect.\n    * @default 5\n    */\n    get angle(): number { return this.resources.dotUniforms.uniforms.uAngle; }\n    set angle(value: number) { this.resources.dotUniforms.uniforms.uAngle = value; }\n\n    /**\n    * Whether to rendering it in gray scale.\n    * @default true\n    */\n    get grayscale(): boolean { return this.resources.dotUniforms.uniforms.uGrayScale === 1; }\n    set grayscale(value: boolean) { this.resources.dotUniforms.uniforms.uGrayScale = value ? 1 : 0; }\n}\n","import {\n    Color,\n    ColorSource,\n    Filter,\n    FilterSystem,\n    GlProgram,\n    GpuProgram,\n    PointData,\n    RenderSurface,\n    Texture,\n    TexturePool,\n} from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport { KawaseBlurFilter } from '../kawase-blur/KawaseBlurFilter';\nimport fragment from './drop-shadow.frag';\nimport source from './drop-shadow.wgsl';\n\n/** Options for the DropShadowFilter constructor. */\nexport interface DropShadowFilterOptions\n{\n    /**\n     * The offset position of the drop-shadow relative to the original image.\n     * @default {x:4,y:4}\n     */\n    offset?: PointData;\n    /**\n     * The color value of shadow.\n     * @example [0.0, 0.0, 0.0] = 0x000000\n     * @default 0x000000\n     */\n    color?: ColorSource;\n    /**\n     * Coefficient for alpha multiplication.\n     * @default 1\n     */\n    alpha?: number;\n    /**\n     * Hide the contents, only show the shadow.\n     * @default false\n     */\n    shadowOnly?: boolean;\n    /**\n     * The strength of the shadow's blur.\n     * @default 2\n     */\n    blur?: number;\n    /**\n     * The quality of the Blur Filter.\n     * @default 4\n     */\n    quality?: number;\n    /**\n     * The kernel size of the blur filter.\n     * @default null\n     */\n    kernels?: number[];\n    /**\n     * The pixelSize of the Kawase Blur filter\n     * @default {x:1,y:1}\n     */\n    pixelSize?: PointData | number[] | number;\n    /**\n     * The resolution of the Kawase Blur filter\n     * @default 1\n     */\n    resolution?: number;\n}\n\n/**\n * Drop shadow filter.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/drop-shadow.png)\n * @class\n * @extends Filter\n */\nexport class DropShadowFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: DropShadowFilterOptions = {\n        offset: { x: 4, y: 4 },\n        color: 0x000000,\n        alpha: 0.5,\n        shadowOnly: false,\n        kernels: undefined,\n        blur: 2,\n        quality: 3,\n        pixelSize: { x: 1, y: 1 },\n        resolution: 1,\n    };\n\n    public uniforms: {\n        uAlpha: number;\n        uColor: Float32Array;\n        uOffset: PointData;\n    };\n\n    /**\n     * Hide the contents, only show the shadow.\n     * @default false\n     */\n    public shadowOnly = false;\n\n    private _color!: Color;\n    private _blurFilter: KawaseBlurFilter;\n    private _basePass: Filter;\n\n    /**\n     * @param options - Options for the DropShadowFilter constructor.\n     */\n    constructor(options?: DropShadowFilterOptions)\n    {\n        options = { ...DropShadowFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'drop-shadow-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                dropShadowUniforms: {\n                    uAlpha: { value: options.alpha, type: 'f32' },\n                    uColor: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uOffset: { value: options.offset, type: 'vec2<f32>' },\n                }\n            },\n            resolution: options.resolution,\n        });\n\n        this.uniforms = this.resources.dropShadowUniforms.uniforms;\n        this._color = new Color();\n        this.color = options.color ?? 0x000000;\n\n        this._blurFilter = new KawaseBlurFilter({\n            strength: options.kernels as [number, number] ?? options.blur,\n            quality: options.kernels ? undefined : options.quality,\n        });\n\n        this._basePass = new Filter({\n            gpuProgram: GpuProgram.from({\n                vertex: {\n                    source: wgslVertex,\n                    entryPoint: 'mainVertex',\n                },\n                fragment: {\n                    source: `\n                    @group(0) @binding(1) var uTexture: texture_2d<f32>; \n                    @group(0) @binding(2) var uSampler: sampler;\n                    @fragment\n                    fn mainFragment(\n                        @builtin(position) position: vec4<f32>,\n                        @location(0) uv : vec2<f32>\n                    ) -> @location(0) vec4<f32> {\n                        return textureSample(uTexture, uSampler, uv);\n                    }\n                    `,\n                    entryPoint: 'mainFragment',\n                },\n            }),\n            glProgram: GlProgram.from({\n                vertex,\n                fragment: `\n                in vec2 vTextureCoord;\n                out vec4 finalColor;\n                uniform sampler2D uTexture;\n\n                void main(void){\n                    finalColor = texture(uTexture, vTextureCoord);\n                }\n                `,\n                name: 'drop-shadow-filter',\n            }),\n            resources: {},\n        });\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Override existing apply method in `Filter`\n     * @override\n     * @ignore\n     */\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean,\n    ): void\n    {\n        const renderTarget = TexturePool.getSameSizeTexture(input);\n\n        filterManager.applyFilter(this, input, renderTarget, true);\n        this._blurFilter.apply(filterManager, renderTarget, output, clearMode);\n\n        if (!this.shadowOnly)\n        {\n            filterManager.applyFilter(this._basePass, input, output, false);\n        }\n\n        TexturePool.returnTexture(renderTarget);\n    }\n\n    /**\n     * Set the offset position of the drop-shadow relative to the original image.\n     * @default [4,4]\n     */\n    public get offset(): PointData { return this.uniforms.uOffset; }\n    public set offset(value: PointData)\n    {\n        this.uniforms.uOffset = value;\n        this._updatePadding();\n    }\n\n    /**\n     * Set the offset position of the drop-shadow relative to the original image on the `x` axis\n     * @default 4\n     */\n    get offsetX(): number { return this.offset.x; }\n    set offsetX(value: number)\n    {\n        this.offset.x = value;\n        this._updatePadding();\n    }\n\n    /**\n     * Set the offset position of the drop-shadow relative to the original image on the `y` axis\n     * @default 4\n     */\n    get offsetY(): number { return this.offset.y; }\n    set offsetY(value: number)\n    {\n        this.offset.y = value;\n        this._updatePadding();\n    }\n\n    /**\n     * The color value of shadow.\n     * @example [0.0, 0.0, 0.0] = 0x000000\n     * @default 0x000000\n     */\n    get color(): ColorSource { return this._color.value as ColorSource; }\n    set color(value: ColorSource)\n    {\n        this._color.setValue(value);\n        const [r, g, b] = this._color.toArray();\n\n        this.uniforms.uColor[0] = r;\n        this.uniforms.uColor[1] = g;\n        this.uniforms.uColor[2] = b;\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     * @default 1\n     */\n    get alpha(): number { return this.uniforms.uAlpha; }\n    set alpha(value: number) { this.uniforms.uAlpha = value; }\n\n    /**\n     * The strength of the shadow's blur.\n     * @default 2\n     */\n    get blur(): number { return this._blurFilter.strength; }\n    set blur(value: number)\n    {\n        this._blurFilter.strength = value;\n        this._updatePadding();\n    }\n\n    /**\n     * Sets the quality of the Blur Filter\n     * @default 4\n     */\n    get quality(): number { return this._blurFilter.quality; }\n    set quality(value: number)\n    {\n        this._blurFilter.quality = value;\n        this._updatePadding();\n    }\n\n    /** Sets the kernels of the Blur Filter */\n    get kernels(): number[] { return this._blurFilter.kernels; }\n    set kernels(value: number[]) { this._blurFilter.kernels = value; }\n\n    /**\n     * Sets the pixelSize of the Kawase Blur filter\n     * @default [1,1]\n     */\n    get pixelSize(): PointData\n    {\n        return this._blurFilter.pixelSize as PointData;\n    }\n    set pixelSize(value: PointData | number[] | number)\n    {\n        if (typeof value === 'number')\n        {\n            value = { x: value, y: value };\n        }\n\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this._blurFilter.pixelSize = value;\n    }\n\n    /**\n     * Sets the pixelSize of the Kawase Blur filter on the `x` axis\n     * @default 1\n     */\n    get pixelSizeX(): number { return this._blurFilter.pixelSizeX; }\n    set pixelSizeX(value: number) { this._blurFilter.pixelSizeX = value; }\n\n    /**\n     * Sets the pixelSize of the Kawase Blur filter on the `y` axis\n     * @default 1\n     */\n    get pixelSizeY(): number { return this._blurFilter.pixelSizeY; }\n    set pixelSizeY(value: number) { this._blurFilter.pixelSizeY = value; }\n\n    /**\n     * Recalculate the proper padding amount.\n     * @private\n     */\n    private _updatePadding()\n    {\n        const offsetPadding = Math.max(\n            Math.abs(this.offsetX),\n            Math.abs(this.offsetY),\n        );\n\n        this.padding = offsetPadding + (this.blur * 2) + (this.quality * 4);\n    }\n}\n","import { Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './emboss.frag';\nimport source from './emboss.wgsl';\n\n/**\n * An RGB Split Filter.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/emboss.png)\n *\n * @class\n * @extends Filter\n */\nexport class EmbossFilter extends Filter\n{\n    public uniforms: {\n        uStrength: number;\n    };\n\n    /**\n     * @param {number} [strength=5] - Strength of the emboss.\n     */\n    constructor(strength = 5)\n    {\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'emboss-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                embossUniforms: {\n                    uStrength: { value: strength, type: 'f32' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.embossUniforms.uniforms;\n    }\n\n    /**\n     * Strength of the emboss\n     * @default 5\n     */\n    get strength(): number { return this.uniforms.uStrength; }\n    set strength(value: number) { this.uniforms.uStrength = value; }\n}\n","import { DEG_TO_RAD, Filter, GlProgram, GpuProgram, ImageSource, Texture } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './glitch.frag';\nimport source from './glitch.wgsl';\n\nimport type { FilterSystem, PointData, RenderSurface } from 'pixi.js';\n\nenum FILL_MODES\n    {\n    TRANSPARENT = 0,\n    ORIGINAL = 1,\n    LOOP = 2,\n    CLAMP = 3,\n    MIRROR = 4,\n}\n\n/** Options for the GlitchFilter constructor. */\nexport interface GlitchFilterOptions\n{\n    /**\n     * The count of glitch slices.\n     * @default 5\n     */\n    slices?: number;\n    /**\n     * The maximum offset amount of slices.\n     * @default 100\n     */\n    offset?: number;\n    /**\n     * The angle in degree of the offset of slices.\n     * @default 0\n     */\n    direction?: number;\n    /**\n     * The fill mode of the space after the offset.\n     * @default FILL_MODES.TRANSPARENT\n     */\n    fillMode?: number;\n    /**\n     * A seed value for randomizing glitch effect.\n     * @default 0\n     */\n    seed?: number;\n    /**\n     * `true` will divide the bands roughly based on equal amounts\n     * where as setting to `false` will vary the band sizes dramatically (more random looking).\n     * @default false\n     */\n    average?: boolean;\n    /**\n     * Minimum size of slices as a portion of the `sampleSize`\n     * @default 8\n     */\n    minSize?: number;\n    /**\n     * Height of the displacement map canvas.\n     * @default 512\n     */\n    sampleSize?: number;\n    /**\n     * Red channel offset.\n     * @default {x:0,y:0}\n     */\n    red?: PointData | number[];\n    /**\n     * Green channel offset.\n     * @default {x:0,y:0}\n     */\n    green?: PointData | number[];\n    /**\n     * Blue offset.\n     * @default {x:0,y:0}\n     */\n    blue?: PointData | number[];\n}\n\n/**\n * The GlitchFilter applies a glitch effect to an object.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/glitch.png)\n *\n * @class\n * @extends Filter\n */\nexport class GlitchFilter extends Filter\n{\n    /** Default constructor options. */\n    public static readonly defaults: GlitchFilterOptions = {\n        slices: 5,\n        offset: 100,\n        direction: 0,\n        fillMode: 0,\n        average: false,\n        seed: 0,\n        red: { x: 0, y: 0 },\n        green: { x: 0, y: 0 },\n        blue: { x: 0, y: 0 },\n        minSize: 8,\n        sampleSize: 512,\n    };\n\n    public uniforms: {\n        uSeed: number\n        uDimensions: Float32Array,\n        uAspect: number,\n        uFillMode: number,\n        uOffset: number,\n        uDirection: number,\n        uRed: PointData,\n        uGreen: PointData,\n        uBlue: PointData,\n    };\n\n    /**\n     * `true` will divide the bands roughly based on equal amounts\n     * where as setting to `false` will vary the band sizes dramatically (more random looking).\n     */\n    public average = false;\n\n    /** Minimum size of slices as a portion of the `sampleSize` */\n    public minSize = 8;\n\n    /** Height of the displacement map canvas. */\n    public sampleSize = 512;\n\n    /** Internally generated canvas. */\n    private _canvas: HTMLCanvasElement;\n\n    /**\n     * The displacement map is used to generate the bands.\n     * If using your own texture, `slices` will be ignored.\n     *\n     * @member {Texture}\n     * @readonly\n     */\n    public texture: Texture;\n\n    /** Internal number of slices */\n    private _slices = 0;\n\n    private _sizes: Float32Array = new Float32Array(1);\n    private _offsets: Float32Array = new Float32Array(1);\n\n    /**\n     * @param options - Options for the GlitchFilter constructor.\n     */\n    constructor(options?: GlitchFilterOptions)\n    {\n        options = { ...GlitchFilter.defaults, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'glitch-filter',\n        });\n\n        const canvas = document.createElement('canvas');\n\n        canvas.width = 4;\n        canvas.height = options.sampleSize ?? 512;\n\n        const texture = new Texture({\n            source: new ImageSource({ resource: canvas })\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                glitchUniforms: {\n                    uSeed: { value: options?.seed ?? 0, type: 'f32' },\n                    uDimensions: { value: new Float32Array(2), type: 'vec2<f32>' },\n                    uAspect: { value: 1, type: 'f32' },\n                    uFillMode: { value: options?.fillMode ?? 0, type: 'f32' },\n                    uOffset: { value: options?.offset ?? 100, type: 'f32' },\n                    uDirection: { value: options?.direction ?? 0, type: 'f32' },\n                    uRed: { value: options.red, type: 'vec2<f32>' },\n                    uGreen: { value: options.green, type: 'vec2<f32>' },\n                    uBlue: { value: options.blue, type: 'vec2<f32>' },\n                },\n                uDisplacementMap: texture.source,\n                uDisplacementSampler: texture.source.style,\n            },\n        });\n\n        this.uniforms = this.resources.glitchUniforms.uniforms;\n\n        this._canvas = canvas;\n        this.texture = texture;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Override existing apply method in Filter\n     * @private\n     */\n    apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        const { width, height } = input.frame;\n\n        this.uniforms.uDimensions[0] = width;\n        this.uniforms.uDimensions[1] = height;\n        this.uniforms.uAspect = height / width;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * Randomize the slices size (heights).\n     *\n     * @private\n     */\n    private _randomizeSizes()\n    {\n        const arr = this._sizes;\n        const last = this._slices - 1;\n        const size = this.sampleSize;\n        const min = Math.min(this.minSize / size, 0.9 / this._slices);\n\n        if (this.average)\n        {\n            const count = this._slices;\n            let rest = 1;\n\n            for (let i = 0; i < last; i++)\n            {\n                const averageWidth = rest / (count - i);\n                const w = Math.max(averageWidth * (1 - (Math.random() * 0.6)), min);\n\n                arr[i] = w;\n                rest -= w;\n            }\n            arr[last] = rest;\n        }\n        else\n        {\n            let rest = 1;\n            const ratio = Math.sqrt(1 / this._slices);\n\n            for (let i = 0; i < last; i++)\n            {\n                const w = Math.max(ratio * rest * Math.random(), min);\n\n                arr[i] = w;\n                rest -= w;\n            }\n            arr[last] = rest;\n        }\n\n        this.shuffle();\n    }\n\n    /**\n     * Shuffle the sizes of the slices, advanced usage.\n     */\n    shuffle(): void\n    {\n        const arr = this._sizes;\n        const last = this._slices - 1;\n\n        // shuffle\n        for (let i = last; i > 0; i--)\n        {\n            const rand = (Math.random() * i) >> 0;\n            const temp = arr[i];\n\n            arr[i] = arr[rand];\n            arr[rand] = temp;\n        }\n    }\n\n    /**\n     * Randomize the values for offset from -1 to 1\n     *\n     * @private\n     */\n    private _randomizeOffsets(): void\n    {\n        for (let i = 0; i < this._slices; i++)\n        {\n            this._offsets[i] = Math.random() * (Math.random() < 0.5 ? -1 : 1);\n        }\n    }\n\n    /**\n     * Regenerating random size, offsets for slices.\n     */\n    refresh(): void\n    {\n        this._randomizeSizes();\n        this._randomizeOffsets();\n        this.redraw();\n    }\n\n    /**\n     * Redraw displacement bitmap texture, advanced usage.\n     */\n    redraw(): void\n    {\n        const size = this.sampleSize;\n        const texture = this.texture;\n        const ctx = this._canvas.getContext('2d') as CanvasRenderingContext2D;\n\n        ctx.clearRect(0, 0, 8, size);\n\n        let offset;\n        let y = 0;\n\n        for (let i = 0; i < this._slices; i++)\n        {\n            offset = Math.floor(this._offsets[i] * 256);\n            const height = this._sizes[i] * size;\n            const red = offset > 0 ? offset : 0;\n            const green = offset < 0 ? -offset : 0;\n\n            ctx.fillStyle = `rgba(${red}, ${green}, 0, 1)`;\n            ctx.fillRect(0, y >> 0, size, height + 1 >> 0);\n            y += height;\n        }\n\n        texture.source.update();\n    }\n\n    /**\n     * Manually custom slices size (height) of displacement bitmap\n     *\n     * @member {number[]|Float32Array}\n     */\n    set sizes(sizes: Float32Array)\n    {\n        const len = Math.min(this._slices, sizes.length);\n\n        for (let i = 0; i < len; i++)\n        {\n            this._sizes[i] = sizes[i];\n        }\n    }\n    get sizes(): Float32Array\n    {\n        return this._sizes;\n    }\n\n    /**\n     * Manually set custom slices offset of displacement bitmap, this is\n     * a collection of values from -1 to 1. To change the max offset value\n     * set `offset`.\n     *\n     * @member {number[]|Float32Array}\n     */\n    set offsets(offsets: Float32Array)\n    {\n        const len = Math.min(this._slices, offsets.length);\n\n        for (let i = 0; i < len; i++)\n        {\n            this._offsets[i] = offsets[i];\n        }\n    }\n    get offsets(): Float32Array { return this._offsets; }\n\n    /**\n     * The count of slices.\n     * @default 5\n     */\n    get slices(): number { return this._slices; }\n    set slices(value: number)\n    {\n        if (this._slices === value) return;\n        this._slices = value;\n        this._sizes = new Float32Array(value);\n        this._offsets = new Float32Array(value);\n        this.refresh();\n    }\n\n    /**\n     * The maximum offset amount of slices.\n     * @default 100\n     */\n    get offset(): number { return this.uniforms.uOffset; }\n    set offset(value: number) { this.uniforms.uOffset = value; }\n\n    /**\n     * A seed value for randomizing glitch effect.\n     * @default 0\n     */\n    get seed(): number { return this.uniforms.uSeed; }\n    set seed(value: number) { this.uniforms.uSeed = value; }\n\n    /**\n     * The fill mode of the space after the offset.\n     * @default FILL_MODES.TRANSPARENT\n     */\n    get fillMode(): FILL_MODES { return this.uniforms.uFillMode; }\n    set fillMode(value: FILL_MODES) { this.uniforms.uFillMode = value; }\n\n    /**\n     * The angle in degree of the offset of slices.\n     * @default 0\n     */\n    get direction(): number { return this.uniforms.uDirection / DEG_TO_RAD; }\n    set direction(value: number) { this.uniforms.uDirection = value * DEG_TO_RAD; }\n\n    /**\n     * Red channel offset.\n     * @default {x:0,y:0}\n     */\n    get red(): PointData { return this.uniforms.uRed; }\n    set red(value: PointData | number[])\n    {\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this.uniforms.uRed = value;\n    }\n\n    /**\n     * Green channel offset.\n     * @default {x:0,y:0}\n     */\n    get green(): PointData { return this.uniforms.uGreen; }\n    set green(value: PointData | number[])\n    {\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this.uniforms.uGreen = value;\n    }\n\n    /**\n     * Blue offset.\n     * @default {x:0,y:0}\n     */\n    get blue(): PointData { return this.uniforms.uBlue; }\n    set blue(value: PointData | number[])\n    {\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this.uniforms.uBlue = value;\n    }\n\n    /**\n     * Removes all references\n     */\n    destroy(): void\n    {\n        this.texture?.destroy(true);\n        this.texture\n        = this._canvas\n        = this.red\n        = this.green\n        = this.blue\n        = this._sizes\n        = this._offsets = null as any;\n    }\n}\n","import { Color, ColorSource, Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './glow.frag';\nimport source from './glow.wgsl';\n\n/**\n * Options for the GlowFilter constructor.\n */\nexport interface GlowFilterOptions\n{\n    /**\n     * The distance of the glow\n     * @default 10\n     */\n    distance?: number;\n    /**\n     * The strength of the glow outward from the edge of the sprite\n     * @default 4\n     */\n    outerStrength?: number;\n    /**\n     * The strength of the glow inward from the edge of the sprite\n     * @default 0\n     */\n    innerStrength?: number;\n    /**\n     * The color of the glow\n     * @default 0xffffff\n     */\n    color?: ColorSource;\n    /**\n     * The alpha of the glow\n     * @default 1\n     */\n    alpha?: number;\n    /**\n     * A number between 0 and 1 that describes the quality of the glow. The higher the number the less performant\n     * @default 0.1\n     */\n    quality?: number;\n    /**\n     * Toggle to hide the contents and only show glow\n     * @default false\n     */\n    knockout?: boolean;\n}\n\n/**\n * GlowFilter, originally by mishaa\n * [codepen]{@link http://codepen.io/mishaa/pen/raKzrm}.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/glow.png)\n * @class\n *\n * @extends Filter\n *\n * @example\n *  someSprite.filters = [\n *      new GlowFilter({ distance: 15, outerStrength: 2 })\n *  ];\n */\nexport class GlowFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: GlowFilterOptions = {\n        distance: 10,\n        outerStrength: 4,\n        innerStrength: 0,\n        color: 0xffffff,\n        alpha: 1,\n        quality: 0.1,\n        knockout: false,\n    };\n\n    public uniforms: {\n        uDistance: number;\n        uStrength: Float32Array;\n        uColor: Float32Array;\n        uAlpha: number;\n        uQuality: number;\n        uKnockout: number;\n    };\n\n    private _color!: Color;\n\n    /**\n     * @param options - Options for the GlowFilter constructor.\n     */\n    constructor(options?: GlowFilterOptions)\n    {\n        options = { ...GlowFilter.DEFAULT_OPTIONS, ...options };\n\n        const distance = options.distance ?? 10;\n        const quality = options.quality ?? 0.1;\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        // Altering uDistance and uQuality won't have any affect on WebGL\n        // since we hard-assign them during creation to allow\n        // for the values to be used in GLSL loops\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment: fragment\n                .replace(/__ANGLE_STEP_SIZE__/gi, `${(1 / quality / distance).toFixed(7)}`)\n                .replace(/__DIST__/gi, `${distance.toFixed(0)}.0`),\n            name: 'glow-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                glowUniforms: {\n                    uDistance: { value: distance, type: 'f32' },\n                    uStrength: { value: [options.innerStrength, options.outerStrength], type: 'vec2<f32>' },\n                    uColor: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uAlpha: { value: options.alpha, type: 'f32' },\n                    uQuality: { value: quality, type: 'f32' },\n                    uKnockout: { value: (options?.knockout ?? false) ? 1 : 0, type: 'f32' },\n                }\n            },\n            padding: distance,\n        });\n\n        this.uniforms = this.resources.glowUniforms.uniforms;\n        this._color = new Color();\n        this.color = options.color ?? 0xffffff;\n    }\n\n    /**\n     * Only draw the glow, not the texture itself\n     * @default false\n     */\n    get distance(): number { return this.uniforms.uDistance; }\n    set distance(value: number) { this.uniforms.uDistance = this.padding = value; }\n\n    /**\n    * The strength of the glow inward from the edge of the sprite.\n    * @default 0\n    */\n    get innerStrength(): number { return this.uniforms.uStrength[0]; }\n    set innerStrength(value: number) { this.uniforms.uStrength[0] = value; }\n\n    /**\n    * The strength of the glow outward from the edge of the sprite.\n    * @default 4\n    */\n    get outerStrength(): number { return this.uniforms.uStrength[1]; }\n    set outerStrength(value: number) { this.uniforms.uStrength[1] = value; }\n\n    /**\n    * The color of the glow.\n    * @default 0xFFFFFF\n    */\n    get color(): ColorSource { return this._color.value as ColorSource; }\n    set color(value: ColorSource)\n    {\n        this._color.setValue(value);\n        const [r, g, b] = this._color.toArray();\n\n        this.uniforms.uColor[0] = r;\n        this.uniforms.uColor[1] = g;\n        this.uniforms.uColor[2] = b;\n    }\n\n    /**\n    * The alpha of the glow\n    * @default 1\n    */\n    get alpha(): number { return this.uniforms.uAlpha; }\n    set alpha(value: number) { this.uniforms.uAlpha = value; }\n\n    /**\n    * A number between 0 and 1 that describes the quality of the glow. The higher the number the less performant\n    * @default 0.1\n    */\n    get quality(): number { return this.uniforms.uQuality; }\n    set quality(value: number) { this.uniforms.uQuality = value; }\n\n    /**\n    * Only draw the glow, not the texture itself\n    * @default false\n    */\n    get knockout(): boolean { return this.uniforms.uKnockout === 1; }\n    set knockout(value: boolean) { this.uniforms.uKnockout = value ? 1 : 0; }\n}\n","import { DEG_TO_RAD, Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './god-ray.frag';\nimport source from './god-ray.wgsl';\nimport perlin from './perlin.frag';\nimport sourcePerlin from './perlin.wgsl';\n\nimport type { FilterSystem, PointData, RenderSurface, Texture } from 'pixi.js';\n\n/** Options for the GodrayFilter constructor. */\nexport interface GodrayFilterOptions\n{\n    /**\n     * The angle/light-source of the rays in degrees. For instance,\n     * a value of 0 is vertical rays, values of 90 or -90 produce horizontal rays.\n     * @default 30\n     */\n    angle?: number;\n    /**\n     * `true` if light rays are parallel (uses angle), `false` to use the focal `center` point\n     * @default true\n     */\n    parallel?: boolean;\n    /**\n     * Focal point for non-parallel rays, to use this `parallel` must be set to `false`.\n     * This should be a size 2 array or an object containing `x` and `y` values, you cannot change types\n     * once defined in the constructor\n     * @default {x:0,y:0}\n     */\n    center?: PointData | number[];\n    /**\n     * General intensity of the effect. A value closer to 1 will produce a more intense effect,\n     * where a value closer to 0 will produce a subtler effect.\n     * @default 0.5\n     */\n    gain?: number;\n    /**\n     * The density of the fractal noise\n     * @default 2.5\n     */\n    lacunarity?: number;\n    /**\n     * The current time position\n     * @default 0\n     */\n    time?: number;\n    /**\n     * The alpha (opacity) of the rays.  0 is fully transparent, 1 is fully opaque.\n     * @default 1\n     */\n    alpha?: number;\n}\n\n/**\n * GordayFilter, {@link https://codepen.io/alaingalvan originally} by Alain Galvan\n *\n *\n *\n * ![original](../screenshots/original.png)![filter](../screenshots/godray.gif)\n * @class\n * @extends Filter\n *\n * @example\n *  displayObject.filters = [new GodrayFilter()];\n */\nexport class GodrayFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: GodrayFilterOptions = {\n        angle: 30,\n        gain: 0.5,\n        lacunarity: 2.5,\n        parallel: true,\n        time: 0,\n        center: { x: 0, y: 0 },\n        alpha: 1,\n    };\n\n    public uniforms: {\n        uLight: Float32Array;\n        uParallel: number;\n        uAspect: number;\n        uTime: number;\n        uRay: Float32Array;\n        uDimensions: Float32Array;\n    };\n\n    /**\n     * The current time position\n     * @default 0\n     */\n    public time = 0;\n\n    private _angleLight: [number, number] = [0, 0];\n    private _angle = 0;\n    private _center!: PointData;\n\n    /**\n     * @param options - Options for the GodrayFilter constructor.\n     */\n    constructor(options?: GodrayFilterOptions)\n    {\n        options = { ...GodrayFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source: source.replace('${PERLIN}', sourcePerlin),\n                entryPoint: 'mainFragment',\n            },\n        });\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment: fragment.replace('${PERLIN}', perlin),\n            name: 'god-ray-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                godrayUniforms: {\n                    uLight: { value: new Float32Array(2), type: 'vec2<f32>' },\n                    uParallel: { value: 0, type: 'f32' },\n                    uAspect: { value: 0, type: 'f32' },\n                    uTime: { value: options.time, type: 'f32' },\n                    uRay: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uDimensions: { value: new Float32Array(2), type: 'vec2<f32>' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.godrayUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Override existing apply method in Filter\n     * @override\n     * @ignore\n     */\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        const width = input.frame.width;\n        const height = input.frame.height;\n\n        this.uniforms.uLight[0] = this.parallel ? this._angleLight[0] : this._center.x;\n        this.uniforms.uLight[1] = this.parallel ? this._angleLight[1] : this._center.y;\n        this.uniforms.uDimensions[0] = width;\n        this.uniforms.uDimensions[1] = height;\n        this.uniforms.uAspect = height / width;\n        this.uniforms.uTime = this.time;\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * The angle/light-source of the rays in degrees. For instance,\n     * a value of 0 is vertical rays, values of 90 or -90 produce horizontal rays\n     * @default 30\n     */\n    get angle(): number { return this._angle; }\n    set angle(value: number)\n    {\n        this._angle = value;\n\n        const radians = value * DEG_TO_RAD;\n\n        this._angleLight[0] = Math.cos(radians);\n        this._angleLight[1] = Math.sin(radians);\n    }\n\n    /**\n     * `true` if light rays are parallel (uses angle), `false` to use the focal `center` point\n     * @default true\n     */\n    get parallel(): boolean { return this.uniforms.uParallel > 0.5; }\n    set parallel(value: boolean) { this.uniforms.uParallel = value ? 1 : 0; }\n\n    /**\n     * Focal point for non-parallel rays, to use this `parallel` must be set to `false`.\n     * @default {x:0,y:0}\n     */\n    get center(): PointData { return this._center; }\n    set center(value: PointData | number[])\n    {\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this._center = value;\n    }\n\n    /**\n     * Focal point for non-parallel rays on the `x` axis, to use this `parallel` must be set to `false`.\n     * @default 0\n     */\n    get centerX(): number { return this.center.x; }\n    set centerX(value: number) { this.center.x = value; }\n\n    /**\n     * Focal point for non-parallel rays on the `y` axis, to use this `parallel` must be set to `false`.\n     * @default 0\n     */\n    get centerY(): number { return this.center.y; }\n    set centerY(value: number) { this.center.y = value; }\n\n    /**\n     * General intensity of the effect. A value closer to 1 will produce a more intense effect,\n     * where a value closer to 0 will produce a subtler effect\n     * @default 0.5\n     */\n    get gain(): number { return this.uniforms.uRay[0]; }\n    set gain(value: number) { this.uniforms.uRay[0] = value; }\n\n    /**\n     * The density of the fractal noise.\n     * A higher amount produces more rays and a smaller amount produces fewer waves\n     * @default 2.5\n     */\n    get lacunarity(): number { return this.uniforms.uRay[1]; }\n    set lacunarity(value: number) { this.uniforms.uRay[1] = value; }\n\n    /**\n     * The alpha (opacity) of the rays.  0 is fully transparent, 1 is fully opaque.\n     * @default 1\n     */\n    get alpha(): number { return this.uniforms.uRay[2]; }\n    set alpha(value: number) { this.uniforms.uRay[2] = value; }\n}\n","import { Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './grayscale.frag';\nimport source from './grayscale.wgsl';\n\n/**\n * This filter applies a grayscale effect.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/grayscale.png)\n *\n * @class\n * @extends Filter\n */\nexport class GrayscaleFilter extends Filter\n{\n    constructor()\n    {\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'grayscale-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {},\n        });\n    }\n}\n","import { Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './hsladjustment.frag';\nimport source from './hsladjustment.wgsl';\n\n/**\n * Options for the HslAdjustmentFilter constructor.\n */\nexport interface HslAdjustmentFilterOptions\n{\n    /**\n     * The amount of hue in degrees (-180 to 180)\n     * @default 0\n     */\n    hue: number;\n    /**\n     * The amount of color saturation (-1 to 1)\n     * @default 0\n     */\n    saturation: number;\n    /**\n     * The amount of lightness (-1 to 1)\n     * @default 0\n     */\n    lightness: number;\n    /**\n     * Whether to colorize the image\n     * @default false\n     */\n    colorize: boolean;\n    /**\n     * The amount of alpha (0 to 1)\n     * @default 1\n     */\n    alpha: number;\n}\n\n/**\n * ![original](../screenshots/original.png)![filter](../screenshots/hsl-adjustment.png)\n *\n * This WebGPU filter has been ported from the WebGL renderer that was originally created by Viktor Persson (@vikpe)\n *\n * @class\n * @extends Filter\n */\nexport class HslAdjustmentFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: HslAdjustmentFilterOptions = {\n        hue: 0,\n        saturation: 0,\n        lightness: 0,\n        colorize: false,\n        alpha: 1,\n    };\n\n    public uniforms: {\n        uHsl: Float32Array;\n        uColorize: number;\n        uAlpha: number;\n    };\n\n    private _hue!: number;\n\n    /**\n     * @param options - Options for the HslAdjustmentFilter constructor.\n     */\n    constructor(options?: HslAdjustmentFilterOptions)\n    {\n        options = { ...HslAdjustmentFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'hsl-adjustment-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                hslUniforms: {\n                    uHsl: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uColorize: { value: options.colorize ? 1 : 0, type: 'f32' },\n                    uAlpha: { value: options.alpha, type: 'f32' },\n                },\n            },\n        });\n\n        this.uniforms = this.resources.hslUniforms.uniforms;\n        Object.assign(this, options);\n    }\n\n    /**\n     * The amount of hue in degrees (-180 to 180)\n     * @default 0\n     */\n    get hue(): number { return this._hue; }\n    set hue(value: number)\n    {\n        this._hue = value;\n        this.uniforms.uHsl[0] = value * (Math.PI / 180);\n    }\n\n    /**\n     * The amount of lightness (-1 to 1)\n     * @default 0\n     */\n    get saturation(): number { return this.uniforms.uHsl[1]; }\n    set saturation(value: number) { this.uniforms.uHsl[1] = value; }\n\n    /**\n     * The amount of lightness (-1 to 1)\n     * @default 0\n     */\n    get lightness(): number { return this.uniforms.uHsl[2]; }\n    set lightness(value: number) { this.uniforms.uHsl[2] = value; }\n\n    /**\n     * Whether to colorize the image\n     * @default false\n     */\n    get colorize(): boolean { return this.uniforms.uColorize === 1; }\n    set colorize(value: boolean) { this.uniforms.uColorize = value ? 1 : 0; }\n\n    /**\n     * The amount of alpha (0 to 1)\n     * @default 1\n     */\n    get alpha(): number { return this.uniforms.uAlpha; }\n    set alpha(value: number) { this.uniforms.uAlpha = value; }\n}\n","/* eslint-disable max-len */\nimport { deprecation, Filter, GlProgram, GpuProgram, ObservablePoint, PointData } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './motion-blur.frag';\nimport source from './motion-blur.wgsl';\n\n/** Options for the MotionBlurFilter constructor. */\nexport interface MotionBlurFilterOptions\n{\n    /**\n     * Sets the velocity of the motion for blur effect\n     * This should be a size 2 array or an object containing `x` and `y` values, you cannot change types\n     * once defined in the constructor\n     * @default {x:0,y:0}\n     */\n    velocity?: PointData | number[];\n    /**\n     * The kernelSize of the blur filter. Must be odd number >= 5\n     * @default 5\n     */\n    kernelSize?: number;\n    /**\n     * The offset of the blur filter\n     * @default 0\n     */\n    offset?: number;\n}\n\n/**\n * The MotionBlurFilter applies a Motion blur to an object.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/motion-blur.png)\n *\n * @class\n * @extends Filter\n */\nexport class MotionBlurFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: MotionBlurFilterOptions = {\n        velocity: { x: 0, y: 0 },\n        kernelSize: 5,\n        offset: 0,\n    };\n\n    public uniforms: {\n        uVelocity: PointData;\n        uKernelSize: number;\n        uOffset: number;\n    };\n\n    private _kernelSize!: number;\n\n    /**\n     * @param options - Options for the MotionBlurFilter constructor.\n     */\n    constructor(options?: MotionBlurFilterOptions);\n    /**\n     * @deprecated since 8.0.0\n     *\n     * @param {PIXI.ObservablePoint|PIXI.PointData|number[]} [velocity=[0, 0]] - Sets the velocity of the motion for blur effect.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter. Must be odd number >= 5\n     * @param {number} [offset=0] - The offset of the blur filter.\n     */\n    constructor(velocity?: number[] | PointData | ObservablePoint, kernelSize?: number, offset?: number);\n    /** @ignore */\n    constructor(...args: [MotionBlurFilterOptions?] | [(number[] | PointData | ObservablePoint)?, number?, number?])\n    {\n        let options = args[0] ?? {};\n\n        if (Array.isArray(options) || ('x' in options && 'y' in options) || options instanceof ObservablePoint)\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'MotionBlurFilter constructor params are now options object. See params: { velocity, kernelSize, offset }');\n\n            const x = 'x' in options ? options.x : options[0];\n            const y = 'y' in options ? options.y : options[1];\n\n            options = { velocity: { x, y } };\n\n            if (args[1] !== undefined) options.kernelSize = args[1];\n            if (args[2] !== undefined) options.offset = args[2];\n        }\n\n        options = { ...MotionBlurFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'motion-blur-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                motionBlurUniforms: {\n                    uVelocity: { value: options.velocity, type: 'vec2<f32>' },\n                    uKernelSize: { value: Math.trunc(options.kernelSize ?? 5), type: 'i32' },\n                    uOffset: { value: options.offset, type: 'f32' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.motionBlurUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Sets the velocity of the motion for blur effect\n     * This should be a size 2 array or an object containing `x` and `y` values, you cannot change types\n     * once defined in the constructor\n     * @default {x:0,y:0}\n     */\n    get velocity(): PointData { return this.uniforms.uVelocity; }\n    set velocity(value: PointData | number[])\n    {\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this.uniforms.uVelocity = value;\n        this._updateDirty();\n    }\n\n    /**\n     * Sets the velocity of the motion for blur effect on the `x` axis\n     * @default 0\n     */\n    get velocityX(): number { return this.velocity.x; }\n    set velocityX(value: number)\n    {\n        this.velocity.x = value;\n        this._updateDirty();\n    }\n\n    /**\n     * Sets the velocity of the motion for blur effect on the `x` axis\n     * @default 0\n     */\n    get velocityY(): number { return this.velocity.y; }\n    set velocityY(value: number)\n    {\n        this.velocity.y = value;\n        this._updateDirty();\n    }\n\n    /**\n     * The kernelSize of the blur filter. Must be odd number >= 5\n     * @default 5\n     */\n    get kernelSize(): number { return this._kernelSize; }\n    set kernelSize(value: number)\n    {\n        this._kernelSize = value;\n        this._updateDirty();\n    }\n\n    /**\n     * The offset of the blur filter\n     * @default 0\n     */\n    get offset(): number { return this.uniforms.uOffset; }\n    set offset(value: number) { this.uniforms.uOffset = value; }\n\n    private _updateDirty()\n    {\n        // The padding will be increased as the velocity and intern the blur size is changed\n        this.padding = (Math.max(Math.abs(this.velocityX), Math.abs(this.velocityY)) >> 0) + 1;\n        this.uniforms.uKernelSize = (this.velocityX !== 0 || this.velocityY !== 0) ? this._kernelSize : 0;\n    }\n}\n","import { Color, ColorSource, deprecation, Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './multi-color-replace.frag';\nimport source from './multi-color-replace.wgsl';\n\ntype DeprecatedColor = number | number[] | Float32Array;\n\n/** Options for the MultiColorReplaceFilter constructor. */\nexport interface MultiColorReplaceFilterOptions\n{\n    /**\n     * The collection of replacement items. Each item is color-pair\n     * (an array length is 2). In the pair, the first value is original color , the second value is target color\n     *\n     * _If you wish to change individual elements on the replacement array after instantiation,\n     * use the `refresh` function to update the uniforms once you've made the changes_\n     */\n    replacements: Array<[ColorSource, ColorSource]>;\n    /**\n     * Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     * @default 0.05\n     */\n    tolerance?: number\n    /**\n     * The maximum number of replacements filter is able to use.\n     * Because the fragment is only compiled once, this cannot be changed after construction.\n     * If omitted, the default value is the length of `replacements`\n     */\n    maxColors?: number;\n}\n\n/**\n * Filter for replacing a color with another color. Similar to ColorReplaceFilter, but support multiple\n * colors.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/multi-color-replace.png)\n * @class\n * @extends Filter\n *\n * @example\n *  // replaces pure red with pure blue, and replaces pure green with pure white\n *  someSprite.filters = [new MultiColorReplaceFilter({\n *    replacements: [\n *      [0xFF0000, 0x0000FF],\n *      [0x00FF00, 0xFFFFFF]\n *    ],\n *    tolerance: 0.001\n *  })];\n *\n *  You also could use [R, G, B] as the color\n *  someOtherSprite.filters = [new MultiColorReplaceFilter({\n *    replacements: [\n *      [ [1,0,0], [0,0,1] ],\n *      [ [0,1,0], [1,1,1] ]\n *    ],\n *    tolerance: 0.001\n *  })];\n *\n */\nexport class MultiColorReplaceFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: MultiColorReplaceFilterOptions = {\n        replacements: [[0xff0000, 0x0000ff]],\n        tolerance: 0.05,\n        maxColors: undefined,\n    };\n\n    public uniforms: {\n        uOriginalColors: Float32Array;\n        uTargetColors: Float32Array;\n        uTolerance: number;\n    };\n\n    private _replacements: Array<[ColorSource, ColorSource]> = [];\n    private _maxColors: number;\n\n    /**\n     * @param options - Options for the MultiColorReplaceFilter constructor.\n     */\n    constructor(options?: MultiColorReplaceFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {Array<Array>} replacements - The collection of replacement items. Each item is color-pair\n     *        (an array length is 2). In the pair, the first value is original color , the second value\n     *        is target color.\n     * @param {number} [epsilon=0.05] - Tolerance of the floating-point comparison between colors\n     *        (lower = more exact, higher = more inclusive)\n     * @param {number} [maxColors] - The maximum number of replacements filter is able to use. Because the\n     *        fragment is only compiled once, this cannot be changed after construction.\n     *        If omitted, the default value is the length of `replacements`.\n     */\n    constructor(replacements: Array<[DeprecatedColor, DeprecatedColor]>, epsilon?: number, maxColors?: number);\n    /** @ignore */\n    constructor(...args: [MultiColorReplaceFilterOptions?] | [Array<[DeprecatedColor, DeprecatedColor]>, number?, number?])\n    {\n        let options = args[0] ?? {} as MultiColorReplaceFilterOptions;\n\n        if (Array.isArray(options))\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'MultiColorReplaceFilter constructor params are now options object. See params: { replacements, tolerance, maxColors }');\n\n            options = { replacements: options };\n\n            if (args[1]) options.tolerance = args[1];\n            if (args[2]) options.maxColors = args[2];\n        }\n\n        options = { ...MultiColorReplaceFilter.DEFAULT_OPTIONS, ...options };\n\n        const maxColors = options.maxColors ?? options.replacements.length;\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source: source.replace(/\\$\\{MAX_COLORS\\}/g, (maxColors).toFixed(0)),\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment: fragment.replace(/\\$\\{MAX_COLORS\\}/g, (maxColors).toFixed(0)),\n            name: 'multi-color-replace-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                multiColorReplaceUniforms: {\n                    uOriginalColors: {\n                        value: new Float32Array(3 * maxColors),\n                        type: 'vec3<f32>',\n                        size: maxColors\n                    },\n                    uTargetColors: {\n                        value: new Float32Array(3 * maxColors),\n                        type: 'vec3<f32>',\n                        size: maxColors\n                    },\n                    uTolerance: { value: options.tolerance, type: 'f32' },\n                }\n            },\n        });\n\n        this._maxColors = maxColors;\n\n        this.uniforms = this.resources.multiColorReplaceUniforms.uniforms;\n\n        this.replacements = options.replacements;\n    }\n\n    /**\n     * The collection of replacement items. Each item is color-pair\n     * (an array length is 2). In the pair, the first value is original color , the second value is target color\n     */\n    set replacements(replacements: Array<[ColorSource, ColorSource]>)\n    {\n        const originals = this.uniforms.uOriginalColors;\n        const targets = this.uniforms.uTargetColors;\n        const colorCount = replacements.length;\n        const color = new Color();\n\n        if (colorCount > this._maxColors)\n        {\n            throw new Error(`Length of replacements (${colorCount}) exceeds the maximum colors length (${this._maxColors})`);\n        }\n\n        // Fill with negative values\n        originals[colorCount * 3] = -1;\n\n        let r;\n        let g;\n        let b;\n\n        for (let i = 0; i < colorCount; i++)\n        {\n            const pair = replacements[i];\n\n            // for original colors\n            color.setValue(pair[0]);\n\n            [r, g, b] = color.toArray();\n\n            originals[i * 3] = r;\n            originals[(i * 3) + 1] = g;\n            originals[(i * 3) + 2] = b;\n\n            // for target colors\n            color.setValue(pair[1]);\n\n            [r, g, b] = color.toArray();\n\n            targets[i * 3] = r;\n            targets[(i * 3) + 1] = g;\n            targets[(i * 3) + 2] = b;\n        }\n\n        this._replacements = replacements;\n    }\n\n    get replacements(): Array<[ColorSource, ColorSource]>\n    {\n        return this._replacements;\n    }\n\n    /**\n      * Should be called after changing any of the contents of the replacements.\n      * This is a convenience method for resetting the `replacements`.\n      * @todo implement nested proxy to remove the need for this function\n      */\n    refresh(): void\n    {\n        this.replacements = this._replacements;\n    }\n\n    /**\n      * The maximum number of color replacements supported by this filter. Can be changed\n      * _only_ during construction.\n      * @readonly\n      */\n    get maxColors(): number { return this._maxColors; }\n\n    /**\n      * Tolerance of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n      * @default 0.05\n      */\n    get tolerance(): number { return this.uniforms.uTolerance; }\n    set tolerance(value: number) { this.uniforms.uTolerance = value; }\n\n    /**\n     * @deprecated since 6.0.0\n     *\n     * Tolerance of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     * @default 0.05\n     */\n    set epsilon(value: number)\n    {\n        // eslint-disable-next-line max-len\n        deprecation('6.0.0', 'MultiColorReplaceFilter.epsilon is deprecated, please use MultiColorReplaceFilter.tolerance instead');\n        this.tolerance = value;\n    }\n    get epsilon(): number\n    {\n        // eslint-disable-next-line max-len\n        deprecation('6.0.0', 'MultiColorReplaceFilter.epsilon is deprecated, please use MultiColorReplaceFilter.tolerance instead');\n\n        return this.tolerance;\n    }\n}\n","import { Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './old-film.frag';\nimport source from './old-film.wgsl';\n\nimport type { FilterSystem, RenderSurface, Texture } from 'pixi.js';\n\n/** Options for the OldFilmFilter constructor. */\nexport interface OldFilmFilterOptions\n{\n    /**\n     * The amount of saturation of sepia effect,\n     * a value of `1` is more saturation and closer to `0` is less, and a value of `0` produces no sepia effect\n     * @default 0.3\n     */\n    sepia?: number;\n    /**\n     * Opacity/intensity of the noise effect between `0` and `1`\n     * @default 0.3\n     */\n    noise?: number;\n    /**\n     * The size of the noise particles\n     * @default 1\n     */\n    noiseSize?: number;\n    /**\n     * How often scratches appear\n     * @default 0.5\n     */\n    scratch?: number;\n    /**\n     * The density of the number of scratches\n     * @default 0.3\n     */\n    scratchDensity?: number;\n    /**\n     * The width of the scratches\n     * @default 1\n     */\n    scratchWidth?: number;\n    /**\n     * The radius of the vignette effect, smaller values produces a smaller vignette\n     * @default 0.3\n     */\n    vignetting?: number;\n    /**\n     * Amount of opacity on the vignette\n     * @default 1\n     */\n    vignettingAlpha?: number;\n    /**\n     * Blur intensity of the vignette\n     * @default 1\n     */\n    vignettingBlur?: number;\n    /**\n     * A seed value to apply to the random noise generation\n     * @default 0\n     */\n    seed?: number;\n}\n\n/**\n * The OldFilmFilter applies a Old film effect to an object.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/old-film.gif)\n *\n * @class\n * @extends Filter\n */\nexport class OldFilmFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: OldFilmFilterOptions = {\n        sepia: 0.3,\n        noise: 0.3,\n        noiseSize: 1,\n        scratch: 0.5,\n        scratchDensity: 0.3,\n        scratchWidth: 1,\n        vignetting: 0.3,\n        vignettingAlpha: 1,\n        vignettingBlur: 0.3,\n        seed: 0\n    };\n\n    public uniforms: {\n        uSepia: number;\n        uNoise: Float32Array;\n        uScratch: Float32Array;\n        uVignetting: Float32Array;\n        uSeed: number;\n        uDimensions: Float32Array;\n    };\n\n    /**\n     * A seed value to apply to the random noise generation\n     * @default 0\n     */\n    public seed!: number;\n\n    /**\n     * @param options - Options for the OldFilmFilter constructor.\n     */\n    constructor(options?: OldFilmFilterOptions)\n    {\n        options = { ...OldFilmFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'old-film-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                oldFilmUniforms: {\n                    uSepia: { value: options.sepia, type: 'f32' },\n                    uNoise: { value: new Float32Array(2), type: 'vec2<f32>' },\n                    uScratch: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uVignetting: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uSeed: { value: options.seed, type: 'f32' },\n                    uDimensions: { value: new Float32Array(2), type: 'vec2<f32>' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.oldFilmUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Override existing apply method in `Filter`\n     * @override\n     * @ignore\n     */\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        this.uniforms.uDimensions[0] = input.frame.width;\n        this.uniforms.uDimensions[1] = input.frame.height;\n        this.uniforms.uSeed = this.seed;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * The amount of saturation of sepia effect,\n     * a value of `1` is more saturation and closer to `0` is less, and a value of `0` produces no sepia effect\n     * @default 0.3\n     */\n    get sepia(): number { return this.uniforms.uSepia; }\n    set sepia(value: number) { this.uniforms.uSepia = value; }\n\n    /**\n     * Opacity/intensity of the noise effect between `0` and `1`\n     * @default 0.3\n     */\n    get noise(): number { return this.uniforms.uNoise[0]; }\n    set noise(value: number) { this.uniforms.uNoise[0] = value; }\n\n    /**\n     * The size of the noise particles\n     * @default 1\n     */\n    get noiseSize(): number { return this.uniforms.uNoise[1]; }\n    set noiseSize(value: number) { this.uniforms.uNoise[1] = value; }\n\n    /**\n     * How often scratches appear\n     * @default 0.5\n     */\n    get scratch(): number { return this.uniforms.uScratch[0]; }\n    set scratch(value: number) { this.uniforms.uScratch[0] = value; }\n\n    /**\n     * The density of the number of scratches\n     * @default 0.3\n     */\n    get scratchDensity(): number { return this.uniforms.uScratch[1]; }\n    set scratchDensity(value: number) { this.uniforms.uScratch[1] = value; }\n\n    /**\n     * The width of the scratches\n     * @default 1\n     */\n    get scratchWidth(): number { return this.uniforms.uScratch[2]; }\n    set scratchWidth(value: number) { this.uniforms.uScratch[2] = value; }\n\n    /**\n     * The radius of the vignette effect, smaller values produces a smaller vignette\n     * @default 0.3\n     */\n    get vignetting(): number { return this.uniforms.uVignetting[0]; }\n    set vignetting(value: number) { this.uniforms.uVignetting[0] = value; }\n\n    /**\n     * Amount of opacity on the vignette\n     * @default 1\n     */\n    get vignettingAlpha(): number { return this.uniforms.uVignetting[1]; }\n    set vignettingAlpha(value: number) { this.uniforms.uVignetting[1] = value; }\n\n    /**\n     * Blur intensity of the vignette\n     * @default 1\n     */\n    get vignettingBlur(): number { return this.uniforms.uVignetting[2]; }\n    set vignettingBlur(value: number) { this.uniforms.uVignetting[2] = value; }\n}\n","import { Color, deprecation, Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './outline.frag';\nimport source from './outline.wgsl';\n\nimport type { ColorSource, FilterSystem, RenderSurface, Texture } from 'pixi.js';\n\n/** Options for the OutlineFilter constructor. */\nexport interface OutlineFilterOptions\n{\n    /**\n     * The thickness of the outline\n     * @default 1\n     */\n    thickness?: number;\n    /**\n     * The color of the outline\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0x000000\n     */\n    color?: ColorSource;\n    /**\n     * The alpha of the outline\n     * @default 1\n     */\n    alpha?: number;\n    /**\n     * The quality of the outline from `0` to `1`.\n     * Using a higher quality setting will result in more accuracy but slower performance\n     * @default 0.1\n     */\n    quality?: number;\n    /**\n     * Whether to only render outline, not the contents.\n     * @default false\n     */\n    knockout?: boolean;\n}\n\n/**\n * OutlineFilter, originally by mishaa\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\n * http://codepen.io/mishaa/pen/emGNRB<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/outline.png)\n *\n * @class\n * @extends Filter *\n * @example\n *  someSprite.filters = [new OutlineFilter(2, 0x99ff99)];\n */\nexport class OutlineFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: OutlineFilterOptions = {\n        thickness: 1,\n        color: 0x000000,\n        alpha: 1,\n        quality: 0.1,\n        knockout: false,\n    };\n\n    /** The minimum number of samples for rendering outline. */\n    public static MIN_SAMPLES = 1;\n\n    /** The maximum number of samples for rendering outline. */\n    public static MAX_SAMPLES = 100;\n\n    public uniforms: {\n        uThickness: Float32Array,\n        uColor: Float32Array,\n        uAlpha: number;\n        uAngleStep: number,\n        uKnockout: number,\n    };\n\n    private _thickness!: number;\n    private _quality!: number;\n    private _color!: Color;\n\n    /**\n     * @param options - Options for the OutlineFilter constructor.\n     */\n    constructor(options?: OutlineFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {number} [thickness=1] - The tickness of the outline. Make it 2 times more for resolution 2\n     * @param {number} [color=0x000000] - The color of the outline.\n     * @param {number} [quality=0.1] - The quality of the outline from `0` to `1`, using a higher quality\n     *        setting will result in slower performance and more accuracy.\n     * @param {number} [alpha=1.0] - The alpha of the outline.\n     * @param {boolean} [knockout=false] - Only render outline, not the contents.\n     */\n    constructor(thickness?: number, color?: number, quality?: number, alpha?: number, knockout?: boolean);\n    /** @ignore */\n    constructor(...args: [OutlineFilterOptions?] | [number?, number?, number?, number?, boolean?])\n    {\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'OutlineFilter constructor params are now options object. See params: { thickness, color, quality, alpha, knockout }');\n\n            options = { thickness: options };\n\n            if (args[1] !== undefined) options.color = args[1];\n            if (args[2] !== undefined) options.quality = args[2];\n            if (args[3] !== undefined) options.alpha = args[3];\n            if (args[4] !== undefined) options.knockout = args[4];\n        }\n\n        options = { ...OutlineFilter.DEFAULT_OPTIONS, ...options };\n\n        const quality = options.quality ?? 0.1;\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment: fragment.replace(/\\$\\{ANGLE_STEP\\}/, OutlineFilter.getAngleStep(quality).toFixed(7)),\n            name: 'outline-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                outlineUniforms: {\n                    uThickness: { value: new Float32Array(2), type: 'vec2<f32>' },\n                    uColor: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uAlpha: { value: options.alpha, type: 'f32' },\n                    uAngleStep: { value: 0, type: 'f32' },\n                    uKnockout: { value: options.knockout ? 1 : 0, type: 'f32' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.outlineUniforms.uniforms;\n        this.uniforms.uAngleStep = OutlineFilter.getAngleStep(quality);\n        this._color = new Color();\n        this.color = options.color ?? 0x000000;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Override existing apply method in `Filter`\n     * @override\n     * @ignore\n     */\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        this.uniforms.uThickness[0] = this.thickness / input.source.width;\n        this.uniforms.uThickness[1] = this.thickness / input.source.height;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * Get the angleStep by quality\n     * @param quality\n     */\n    private static getAngleStep(quality: number): number\n    {\n        return parseFloat(((Math.PI * 2) / Math.max(\n            quality * OutlineFilter.MAX_SAMPLES,\n            OutlineFilter.MIN_SAMPLES,\n        )).toFixed(7));\n    }\n\n    /**\n     * The thickness of the outline\n     * @default 1\n     */\n    get thickness(): number { return this._thickness; }\n    set thickness(value: number) { this._thickness = this.padding = value; }\n\n    /**\n     * The color value of the ambient color\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0x000000\n     */\n    get color(): ColorSource { return this._color.value as ColorSource; }\n    set color(value: ColorSource)\n    {\n        this._color.setValue(value);\n        const [r, g, b] = this._color.toArray();\n\n        this.uniforms.uColor[0] = r;\n        this.uniforms.uColor[1] = g;\n        this.uniforms.uColor[2] = b;\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     * @default 1\n     */\n    get alpha(): number { return this.uniforms.uAlpha; }\n    set alpha(value: number) { this.uniforms.uAlpha = value; }\n\n    /**\n     * The quality of the outline from `0` to `1`.\n     * Using a higher quality setting will result in more accuracy but slower performance\n     * @default 0.1\n     */\n    get quality(): number { return this._quality; }\n    set quality(value: number)\n    {\n        this._quality = value;\n        this.uniforms.uAngleStep = OutlineFilter.getAngleStep(value);\n    }\n\n    /**\n     * Whether to only render outline, not the contents.\n     * @default false\n     */\n    get knockout(): boolean { return this.uniforms.uKnockout === 1; }\n    set knockout(value: boolean) { this.uniforms.uKnockout = value ? 1 : 0; }\n}\n","import { Filter, GlProgram, GpuProgram, Point } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './pixelate.frag';\nimport source from './pixelate.wgsl';\n\ntype Size = number | number[] | Point;\n\n/**\n * This filter applies a pixelate effect making display objects appear 'blocky'.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/pixelate.png)\n *\n * @class\n * @extends Filter\n */\nexport class PixelateFilter extends Filter\n{\n    /**\n     * @param {Point|Array<number>|number} [size=10] - Either the width/height of the size of the pixels, or square size\n     */\n    constructor(size: Size = 10)\n    {\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'pixelate-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                pixelateUniforms: {\n                    uSize: { value: new Float32Array(2), type: 'vec2<f32>' },\n                },\n            },\n        });\n\n        this.size = size;\n    }\n\n    /**\n     * The size of the pixels\n     * @default [10,10]\n     */\n    get size(): Size { return this.resources.pixelateUniforms.uniforms.uSize; }\n    set size(value: Size)\n    {\n        if (value instanceof Point)\n        {\n            this.sizeX = value.x;\n            this.sizeY = value.y;\n        }\n        else if (Array.isArray(value))\n        {\n            this.resources.pixelateUniforms.uniforms.uSize = value;\n        }\n        else\n        {\n            this.sizeX = this.sizeY = value;\n        }\n    }\n\n    /**\n    * The size of the pixels on the `x` axis\n    * @default 10\n    */\n    get sizeX(): number { return this.resources.pixelateUniforms.uniforms.uSize[0]; }\n    set sizeX(value: number) { this.resources.pixelateUniforms.uniforms.uSize[0] = value; }\n\n    /**\n    * The size of the pixels on the `y` axis\n    * @default 10\n    */\n    get sizeY(): number { return this.resources.pixelateUniforms.uniforms.uSize[1]; }\n    set sizeY(value: number) { this.resources.pixelateUniforms.uniforms.uSize[1] = value; }\n}\n","import { deprecation, Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './radial-blur.frag';\nimport source from './radial-blur.wgsl';\n\nimport type { PointData } from 'pixi.js';\n\n/** Options for the RadialBlurFilter constructor. */\nexport interface RadialBlurFilterOptions\n{\n    /**\n     * Sets the angle of the motion for blur effect\n     * @default 0\n     */\n    angle?: number;\n    /**\n     * The `x` and `y` offset coordinates to change the position of the center of the circle of effect.\n     * This should be a size 2 array or an object containing `x` and `y` values, you cannot change types\n     * once defined in the constructor\n     * @default {x:0,y:0}\n     */\n    center?: PointData | number[];\n    /**\n     * The kernelSize of the blur filter. Must be odd number >= 3\n     * @default 5\n     */\n    kernelSize?: number;\n    /**\n     * The maximum size of the blur radius, less than `0` equates to infinity\n     * @default -1\n     */\n    radius?: number\n}\n\n/**\n * The RadialBlurFilter applies a Motion blur to an object.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/radial-blur.png)\n *\n * @class\n * @extends Filter\n */\nexport class RadialBlurFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: RadialBlurFilterOptions = {\n        angle: 0,\n        center: { x: 0, y: 0 },\n        kernelSize: 5,\n        radius: -1,\n    };\n\n    public uniforms: {\n        uRadian: number;\n        uCenter: PointData;\n        uKernelSize: number;\n        uRadius: number;\n    };\n\n    private _angle!: number;\n    private _kernelSize!: number;\n\n    /**\n     * @param options - Options for the RadialBlurFilter constructor.\n     */\n    constructor(options?: RadialBlurFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {number} [angle=0] - Sets the angle of the motion for blur effect.\n     * @param {PIXI.Point|number[]} [center=[0,0]] - The center of the radial.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter. Must be odd number >= 3\n     * @param {number} [radius=-1] - The maximum size of the blur radius, `-1` is infinite\n     */\n    constructor(angle?: number, center?: PointData | number[], kernelSize?: number, radius?: number);\n    /** @ignore */\n    constructor(...args: [RadialBlurFilterOptions?] | [number?, (PointData | number[])?, number?, number?])\n    {\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'RadialBlurFilter constructor params are now options object. See params: { angle, center, kernelSize, radius }');\n\n            options = { angle: options };\n\n            if (args[1])\n            {\n                const x = 'x' in args[1] ? args[1].x : args[1][0];\n                const y = 'y' in args[1] ? args[1].y : args[1][1];\n\n                options.center = { x, y };\n            }\n            if (args[2]) options.kernelSize = args[2];\n            if (args[3]) options.radius = args[3];\n        }\n\n        options = { ...RadialBlurFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'radial-blur-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                radialBlurUniforms: {\n                    uRadian: { value: 0, type: 'f32' },\n                    uCenter: { value: options.center, type: 'vec2<f32>' },\n                    uKernelSize: { value: options.kernelSize, type: 'i32' },\n                    uRadius: { value: options.radius, type: 'f32' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.radialBlurUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    private _updateKernelSize()\n    {\n        this.uniforms.uKernelSize = this._angle !== 0 ? this.kernelSize : 0;\n    }\n\n    /**\n     * Sets the angle in degrees of the motion for blur effect.\n     * @default 0\n     */\n    get angle(): number { return this._angle; }\n    set angle(value: number)\n    {\n        this._angle = value;\n        this.uniforms.uRadian = value * Math.PI / 180;\n        this._updateKernelSize();\n    }\n\n    /**\n     * The `x` and `y` offset coordinates to change the position of the center of the circle of effect.\n     * This should be a size 2 array or an object containing `x` and `y` values, you cannot change types\n     * once defined in the constructor\n     * @default {x:0,y:0}\n     */\n    get center(): PointData { return this.uniforms.uCenter; }\n    set center(value: PointData | number[])\n    {\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this.uniforms.uCenter = value;\n    }\n\n    /**\n     * Sets the velocity of the motion for blur effect on the `x` axis\n     * @default 0\n     */\n    get centerX(): number { return this.center.x; }\n    set centerX(value: number) { this.center.x = value; }\n\n    /**\n     * Sets the velocity of the motion for blur effect on the `x` axis\n     * @default 0\n     */\n    get centerY(): number { return this.center.y; }\n    set centerY(value: number) { this.center.y = value; }\n\n    /**\n     * The kernelSize of the blur filter. Must be odd number >= 3\n     * @default 5\n     */\n    get kernelSize(): number { return this._kernelSize; }\n    set kernelSize(value: number)\n    {\n        this._kernelSize = value;\n        this._updateKernelSize();\n    }\n\n    /**\n     * The maximum size of the blur radius, less than `0` equates to infinity\n     * @default -1\n     */\n    get radius(): number { return this.uniforms.uRadius; }\n    set radius(value: number) { this.uniforms.uRadius = value < 0 || value === Infinity ? -1 : value; }\n}\n","import { Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './reflection.frag';\nimport source from './reflection.wgsl';\n\nimport type { FilterSystem, RenderSurface, Texture } from 'pixi.js';\n\n/** [MIN, MAX] */\ntype Range = [number, number] | Float32Array;\n\n/** Options for the ReflectionFilter constructor. */\nexport interface ReflectionFilterOptions\n{\n    /**\n     * `true` to reflect the image, `false` for waves-only\n     * @default true\n     */\n    mirror?: boolean;\n    /**\n     * Vertical position of the reflection point, `0.5` equates to the middle\n     * smaller numbers produce a larger reflection, larger numbers produce a smaller reflection\n     * @default 0.5\n     */\n    boundary?: number;\n    /**\n     * Starting and ending amplitude of waves\n     * @default [0,20]\n     */\n    amplitude?: Range;\n    /**\n     * Starting and ending length of waves\n     * @default [30,100]\n     */\n    waveLength?: Range;\n    /**\n     * Starting and ending alpha values\n     * @default [1,1]\n     */\n    alpha?: Range;\n    /**\n     * Time for animating position of waves\n     * @default 0\n     */\n    time?: number;\n}\n\n/**\n * Applies a reflection effect to simulate the reflection on water with waves.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/reflection.png)\n *\n * @class\n * @extends Filter\n */\nexport class ReflectionFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: ReflectionFilterOptions = {\n        mirror: true,\n        boundary: 0.5,\n        amplitude: [0, 20],\n        waveLength: [30, 100],\n        alpha: [1, 1],\n        time: 0,\n    };\n\n    public uniforms: {\n        uMirror: number;\n        uBoundary: number;\n        uAmplitude: Float32Array;\n        uWavelength: Float32Array;\n        uAlpha: Float32Array;\n        uTime: number;\n        uDimensions: Float32Array;\n    };\n\n    /**\n     * Time for animating position of waves\n     * @default 0\n     */\n    public time = 0;\n\n    /**\n     * @param options - Options for the ReflectionFilter constructor.\n     */\n    constructor(options?: ReflectionFilterOptions)\n    {\n        options = { ...ReflectionFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'reflection-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                reflectionUniforms: {\n                    uMirror: { value: options.mirror ? 1 : 0, type: 'f32' },\n                    uBoundary: { value: options.boundary, type: 'f32' },\n                    uAmplitude: { value: options.amplitude, type: 'vec2<f32>' },\n                    uWavelength: { value: options.waveLength, type: 'vec2<f32>' },\n                    uAlpha: { value: options.alpha, type: 'vec2<f32>' },\n                    uTime: { value: options.time, type: 'f32' },\n                    uDimensions: { value: new Float32Array(2), type: 'vec2<f32>' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.reflectionUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Override existing apply method in `Filter`\n     * @override\n     * @ignore\n     */\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        this.uniforms.uDimensions[0] = input.frame.width;\n        this.uniforms.uDimensions[1] = input.frame.height;\n\n        this.uniforms.uTime = this.time;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * `true` to reflect the image, `false` for waves-only\n     * @default true\n     */\n    get mirror(): boolean { return this.uniforms.uMirror > 0.5; }\n    set mirror(value: boolean) { this.uniforms.uMirror = value ? 1 : 0; }\n\n    /**\n     * Vertical position of the reflection point, default is 50% (middle)\n     * smaller numbers produce a larger reflection, larger numbers produce a smaller reflection.\n     * @default 0.5\n     */\n    get boundary(): number { return this.uniforms.uBoundary; }\n    set boundary(value: number) { this.uniforms.uBoundary = value; }\n\n    /**\n     * Starting and ending amplitude of waves\n     * @default [0,20]\n     */\n    get amplitude(): Range { return Array.from(this.uniforms.uAmplitude) as Range; }\n    set amplitude(value: Range)\n    {\n        this.uniforms.uAmplitude[0] = value[0];\n        this.uniforms.uAmplitude[1] = value[1];\n    }\n\n    /**\n     * Starting amplitude of waves\n     * @default 0\n     */\n    get amplitudeStart(): number { return this.uniforms.uAmplitude[0]; }\n    set amplitudeStart(value: number) { this.uniforms.uAmplitude[0] = value; }\n\n    /**\n     * Starting amplitude of waves\n     * @default 20\n     */\n    get amplitudeEnd(): number { return this.uniforms.uAmplitude[1]; }\n    set amplitudeEnd(value: number) { this.uniforms.uAmplitude[1] = value; }\n\n    /**\n     * Starting and ending length of waves\n     * @default [30,100]\n     */\n    get waveLength(): Range { return Array.from(this.uniforms.uWavelength) as Range; }\n    set waveLength(value: Range)\n    {\n        this.uniforms.uWavelength[0] = value[0];\n        this.uniforms.uWavelength[1] = value[1];\n    }\n\n    /**\n     * Starting wavelength of waves\n     * @default 30\n     */\n    get wavelengthStart(): number { return this.uniforms.uWavelength[0]; }\n    set wavelengthStart(value: number) { this.uniforms.uWavelength[0] = value; }\n\n    /**\n     * Starting wavelength of waves\n     * @default 100\n     */\n    get wavelengthEnd(): number { return this.uniforms.uWavelength[1]; }\n    set wavelengthEnd(value: number) { this.uniforms.uWavelength[1] = value; }\n\n    /**\n     * Starting and ending alpha values\n     * @default [1,1]\n     */\n    get alpha(): Range { return Array.from(this.uniforms.uAlpha) as Range; }\n    set alpha(value: Range)\n    {\n        this.uniforms.uAlpha[0] = value[0];\n        this.uniforms.uAlpha[1] = value[1];\n    }\n\n    /**\n     * Starting wavelength of waves\n     * @default 1\n     */\n    get alphaStart(): number { return this.uniforms.uAlpha[0]; }\n    set alphaStart(value: number) { this.uniforms.uAlpha[0] = value; }\n\n    /**\n     * Starting wavelength of waves\n     * @default 1\n     */\n    get alphaEnd(): number { return this.uniforms.uAlpha[1]; }\n    set alphaEnd(value: number) { this.uniforms.uAlpha[1] = value; }\n}\n","import { deprecation, Filter, GlProgram, GpuProgram, PointData } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './rgb-split.frag';\nimport source from './rgb-split.wgsl';\n\ntype OffsetType = PointData | [number, number];\n\n/** Options for the RGBSplitFilter constructor. */\nexport interface RGBSplitFilterOptions\n{\n    /**\n     * The amount of offset for the red channel.\n     * @default {x:-10,y:0}\n     */\n    red?: OffsetType;\n    /**\n     * The amount of offset for the green channel.\n     * @default {x:0,y:10}\n     */\n    green?: OffsetType;\n    /**\n     * The amount of offset for the blue channel.\n     * @default {x:0,y:0}\n     */\n    blue?: OffsetType;\n}\n\n/**\n * An RGB Split Filter.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/rgb.png)\n *\n * @class\n * @extends Filter\n */\nexport class RGBSplitFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: RGBSplitFilterOptions = {\n        red: { x: -10, y: 0 },\n        green: { x: 0, y: 10 },\n        blue: { x: 0, y: 0 },\n    };\n\n    public uniforms: {\n        uRed: PointData;\n        uGreen: PointData;\n        uBlue: PointData;\n    };\n\n    /**\n     * @param options - Options for the RGBSplitFilter constructor.\n     */\n    constructor(options?: RGBSplitFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {PIXI.PointData | number[]} [red=[-10,0]] - Red channel offset\n     * @param {PIXI.PointData | number[]} [green=[0, 10]] - Green channel offset\n     * @param {PIXI.PointData | number[]} [blue=[0, 0]] - Blue channel offset\n     */\n    constructor(red?: OffsetType, green?: OffsetType, blue?: OffsetType);\n    /** @ignore */\n    constructor(...args: [RGBSplitFilterOptions?] | [OffsetType?, OffsetType?, OffsetType?])\n    {\n        let options = args[0] ?? {};\n\n        if (Array.isArray(options) || ('x' in options && 'y' in options))\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'RGBSplitFilter constructor params are now options object. See params: { red, green, blue }');\n\n            options = { red: options };\n\n            if (args[1] !== undefined) options.green = args[1];\n            if (args[2] !== undefined) options.blue = args[2];\n        }\n\n        options = { ...RGBSplitFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'rgb-split-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                rgbSplitUniforms: {\n                    uRed: { value: options.red, type: 'vec2<f32>' },\n                    uGreen: { value: options.green, type: 'vec2<f32>' },\n                    uBlue: { value: options.blue, type: 'vec2<f32>' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.rgbSplitUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Red channel offset.\n     * @default {x:-10,y:0}\n     */\n    get red(): PointData { return this.uniforms.uRed; }\n    set red(value: OffsetType)\n    {\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this.uniforms.uRed = value;\n    }\n\n    /**\n     * Amount of x-axis offset for the red channel.\n     * @default -10\n     */\n    get redX(): number { return this.red.x; }\n    set redX(value: number) { this.red.x = value; }\n\n    /**\n     * Amount of y-axis offset for the red channel.\n     * @default 0\n     */\n    get redY(): number { return this.red.y; }\n    set redY(value: number) { this.red.y = value; }\n\n    /**\n     * Green channel offset.\n     * @default {x:0,y:10}\n     */\n    get green(): PointData { return this.uniforms.uGreen; }\n    set green(value: OffsetType)\n    {\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this.uniforms.uGreen = value;\n    }\n\n    /**\n     * Amount of x-axis offset for the green channel.\n     * @default 0\n     */\n    get greenX(): number { return this.green.x; }\n    set greenX(value: number) { this.green.x = value; }\n\n    /**\n     * Amount of y-axis offset for the green channel.\n     * @default 10\n     */\n    get greenY(): number { return this.green.y; }\n    set greenY(value: number) { this.green.y = value; }\n\n    /**\n     * Blue channel offset.\n     * @default {x:0,y:0}\n     */\n    get blue(): PointData { return this.uniforms.uBlue; }\n    set blue(value: OffsetType)\n    {\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this.uniforms.uBlue = value;\n    }\n\n    /**\n     * Amount of x-axis offset for the blue channel.\n     * @default 0\n     */\n    get blueX(): number { return this.blue.x; }\n    set blueX(value: number) { this.blue.x = value; }\n\n    /**\n     * Amount of y-axis offset for the blue channel.\n     * @default 0\n     */\n    get blueY(): number { return this.blue.y; }\n    set blueY(value: number) { this.blue.y = value; }\n}\n","import {\n    deprecation,\n    Filter,\n    FilterSystem,\n    GlProgram,\n    GpuProgram,\n    PointData,\n    RenderSurface,\n    Texture,\n} from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './shockwave.frag';\nimport source from './shockwave.wgsl';\n\n/** Options for the ShockwaveFilter constructor. */\nexport interface ShockwaveFilterOptions\n{\n    /**\n     * The `x` and `y` center coordinates to change the position of the center of the circle of effect.\n     * @default {x:0,y:0}\n     */\n    center?: PointData;\n    /**\n     * The speed about the shockwave ripples out. The unit is `pixel-per-second`\n     * @default 500\n     */\n    speed?: number;\n    /**\n     * The amplitude of the shockwave\n     * @default 30\n     */\n    amplitude?: number;\n    /**\n     * The wavelength of the shockwave\n     * @default 160\n     */\n    wavelength?: number;\n    /**\n     * The brightness of the shockwave\n     * @default 1\n     */\n    brightness?: number;\n    /**\n     * The maximum radius of shockwave. less than `0` means the max is an infinite distance\n     * @default -1\n     */\n    radius?: number;\n    /**\n     * Sets the elapsed time of the shockwave.\n     * @default 0\n     */\n    time?: number;\n}\n\n/**\n * Create a visual wrinkle effect by like a pond or blast wave.<br />\n * ![original](../screenshots/original.png)![filter](../screenshots/shockwave.gif)\n *\n * {@link https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js original filter}\n * @author Vico @vicocotea\n */\nexport class ShockwaveFilter extends Filter\n{\n    /** Default shockwave filter options */\n    public static readonly DEFAULT_OPTIONS: ShockwaveFilterOptions = {\n        /** The `x` and `y` center coordinates to change the position of the center of the circle of effect. */\n        center: { x: 0, y: 0 },\n        /** The speed about the shockwave ripples out. The unit is `pixel-per-second` */\n        speed: 500,\n        /** The amplitude of the shockwave */\n        amplitude: 30,\n        /** The wavelength of the shockwave */\n        wavelength: 160,\n        /** The brightness of the shockwave */\n        brightness: 1,\n        /** The maximum radius of shockwave. less than `0` means the max is an infinite distance */\n        radius: -1,\n    };\n\n    public uniforms: {\n        uTime: number;\n        uCenter: PointData;\n        uSpeed: number;\n        uWave: Float32Array;\n    };\n\n    /** Sets the elapsed time of the shockwave. It could control the current size of shockwave. */\n    public time: number;\n\n    /**\n     * @param options - Options for the ShockwaveFilter constructor.\n     */\n    constructor(options?: ShockwaveFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {PIXI.PointData|number[]} [center=[0.5, 0.5]] - See `center` property.\n     * @param {object} [options] - The optional parameters of shockwave filter.\n     * @param {number} [options.amplitude=0.5] - See `amplitude`` property.\n     * @param {number} [options.wavelength=1.0] - See `wavelength` property.\n     * @param {number} [options.speed=500.0] - See `speed` property.\n     * @param {number} [options.brightness=8] - See `brightness` property.\n     * @param {number} [options.radius=4] - See `radius` property.\n     * @param {number} [time=0] - See `time` property.\n     */\n    constructor(center?: PointData | number[], options?: Omit<ShockwaveFilterOptions, 'time' | 'center'>, time?: number);\n    /** @ignore */\n    // eslint-disable-next-line max-len\n    constructor(...args: [ShockwaveFilterOptions?] | [(PointData | number[])?, Omit<ShockwaveFilterOptions, 'time' | 'center'>?, number?])\n    {\n        let options = args[0] ?? {};\n\n        if (Array.isArray(options) || ('x' in options && 'y' in options))\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'ShockwaveFilter constructor params are now options object. See params: { center, speed, amplitude, wavelength, brightness, radius, time }');\n\n            options = { center: options, ...args[1] } as ShockwaveFilterOptions;\n\n            if (args[2] !== undefined) options.time = args[2];\n        }\n\n        options = { ...ShockwaveFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'shockwave-filter'\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                shockwaveUniforms: {\n                    uTime: { value: options.time, type: 'f32' },\n                    uCenter: { value: options.center, type: 'vec2<f32>' },\n                    uSpeed: { value: options.speed, type: 'f32' },\n                    uWave: { value: new Float32Array(4), type: 'vec4<f32>' },\n                },\n            },\n        });\n\n        this.time = 0;\n\n        this.uniforms = this.resources.shockwaveUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        // There is no set/get of `time`, for performance.\n        // Because in the most real cases, `time` will be changed in ever game tick.\n        // Use set/get will take more function-call.\n        this.uniforms.uTime = this.time;\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * The `x` and `y` center coordinates to change the position of the center of the circle of effect.\n     * @default [0,0]\n     */\n    get center(): PointData { return this.uniforms.uCenter; }\n    set center(value: PointData | number[])\n    {\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this.uniforms.uCenter = value;\n    }\n\n    /**\n     * Sets the center of the effect in normalized screen coords on the `x` axis\n     * @default 0\n     */\n    get centerX(): number { return this.uniforms.uCenter.x; }\n    set centerX(value: number) { this.uniforms.uCenter.x = value; }\n\n    /**\n     * Sets the center of the effect in normalized screen coords on the `y` axis\n     * @default 0\n     */\n    get centerY(): number { return this.uniforms.uCenter.y; }\n    set centerY(value: number) { this.uniforms.uCenter.y = value; }\n\n    /**\n     * The speed about the shockwave ripples out. The unit is `pixel-per-second`\n     * @default 500\n     */\n    get speed(): number { return this.uniforms.uSpeed; }\n    set speed(value: number) { this.uniforms.uSpeed = value; }\n\n    /**\n     * The amplitude of the shockwave\n     * @default 30\n     */\n    get amplitude(): number { return this.uniforms.uWave[0]; }\n    set amplitude(value: number) { this.uniforms.uWave[0] = value; }\n\n    /**\n     * The wavelength of the shockwave\n     * @default 160\n     */\n    get wavelength(): number { return this.uniforms.uWave[1]; }\n    set wavelength(value: number) { this.uniforms.uWave[1] = value; }\n\n    /**\n     * The brightness of the shockwave\n     * @default 1\n     */\n    get brightness(): number { return this.uniforms.uWave[2]; }\n    set brightness(value: number) { this.uniforms.uWave[2] = value; }\n\n    /**\n     * The maximum radius of shockwave. less than `0` means the max is an infinite distance\n     * @default -1\n     */\n    get radius(): number { return this.uniforms.uWave[3]; }\n    set radius(value: number) { this.uniforms.uWave[3] = value; }\n}\n","import {\n    Color,\n    ColorSource,\n    deprecation,\n    Filter,\n    FilterSystem,\n    GlProgram,\n    GpuProgram,\n    RenderSurface,\n    Texture,\n} from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './simple-lightmap.frag';\nimport source from './simple-lightmap.wgsl';\n\ntype DeprecatedColor = number | number[];\n\n/** Options for the SimpleLightmapFilter constructor. */\nexport interface SimpleLightmapFilterOptions\n{\n    /** A texture where your lightmap is rendered */\n    lightMap: Texture;\n    /**\n     * The color value of the ambient color\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0x000000\n     */\n    color?: ColorSource;\n    /**\n     * Coefficient for alpha multiplication\n     * @default 1\n     */\n    alpha?: number;\n}\n\n/**\n* SimpleLightmap, originally by Oza94\n* {@link http://www.html5gamedevs.com/topic/20027-pixijs-simple-lightmapping/}\n* {@link http://codepen.io/Oza94/pen/EPoRxj}\n*\n* You have to specify filterArea, or suffer consequences.\n* You may have to use it with `filter.dontFit = true`,\n*  until we rewrite this using same approach as for DisplacementFilter.\n*\n* ![original](../screenshots/original.png)![filter](../screenshots/simple-lightmap.png)\n* @class\n* @extends Filter\n* @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n*\n* @example\n*  displayObject.filters = [new SimpleLightmapFilter(texture, 0x666666)];\n*/\nexport class SimpleLightmapFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: SimpleLightmapFilterOptions = {\n        lightMap: Texture.WHITE,\n        color: 0x000000,\n        alpha: 1\n    };\n\n    public uniforms: {\n        uColor: Float32Array;\n        uAlpha: number;\n        uDimensions: Float32Array;\n    };\n\n    private _color!: Color;\n    private _lightMap!: Texture;\n\n    /**\n     * @param options - Options for the SimpleLightmapFilter constructor.\n     */\n    constructor(options: SimpleLightmapFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {PIXI.Texture} texture - a texture where your lightmap is rendered\n     * @param {Array<number>|number} [color=0x000000] - An RGBA array of the ambient color\n     * @param {number} [alpha=1] - Default alpha set independent of color (if it's a number, not array).\n     */\n    constructor(texture: Texture, color?: DeprecatedColor, alpha?: number);\n    /** @ignore */\n    constructor(...args: [SimpleLightmapFilterOptions] | [Texture, DeprecatedColor?, number?])\n    {\n        let options = args[0] ?? {};\n\n        if (options instanceof Texture)\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'SimpleLightmapFilter constructor params are now options object. See params: { lightMap, color, alpha }');\n\n            options = { lightMap: options };\n\n            if (args[1] !== undefined) options.color = args[1];\n            if (args[2] !== undefined) options.alpha = args[2];\n        }\n\n        options = { ...SimpleLightmapFilter.DEFAULT_OPTIONS, ...options };\n\n        if (!options.lightMap) throw Error('No light map texture source was provided to SimpleLightmapFilter');\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'simple-lightmap-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                simpleLightmapUniforms: {\n                    uColor: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uAlpha: { value: options.alpha, type: 'f32' },\n                    uDimensions: { value: new Float32Array(2), type: 'vec2<f32>' },\n                },\n                uMapTexture: options.lightMap.source,\n                uMapSampler: options.lightMap.source.style,\n            },\n        });\n\n        this.uniforms = this.resources.simpleLightmapUniforms.uniforms;\n        this._color = new Color();\n        this.color = options.color ?? 0x000000;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Override existing apply method in `Filter`\n     * @override\n     * @ignore\n     */\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean,\n    ): void\n    {\n        this.uniforms.uDimensions[0] = input.frame.width;\n        this.uniforms.uDimensions[1] = input.frame.height;\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /** A sprite where your lightmap is rendered */\n    get lightMap(): Texture { return this._lightMap; }\n    set lightMap(value: Texture)\n    {\n        this._lightMap = value;\n        this.resources.uMapTexture = value.source;\n        this.resources.uMapSampler = value.source.style;\n    }\n\n    /**\n     * The color value of the ambient color\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0x000000\n     */\n    get color(): ColorSource { return this._color.value as ColorSource; }\n    set color(value: ColorSource)\n    {\n        this._color.setValue(value);\n        const [r, g, b] = this._color.toArray();\n\n        this.uniforms.uColor[0] = r;\n        this.uniforms.uColor[1] = g;\n        this.uniforms.uColor[2] = b;\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     * @default 1\n     */\n    get alpha(): number { return this.uniforms.uAlpha; }\n    set alpha(value: number) { this.uniforms.uAlpha = value; }\n}\n","import { Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './simplex.frag';\nimport source from './simplex.wgsl';\n\n/** Options for the SimplexNoiseFilter constructor. */\nexport interface SimplexNoiseFilterOptions\n{\n    /**\n     * Noise map strength.\n     * @default 0.5\n     */\n    strength?: number;\n    /**\n     * Noise map scale.\n     * @default 10.0\n     */\n    noiseScale?: number;\n    /**\n     * Horizontal offset for the noise map.\n     * @default 0\n     */\n    offsetX?: number;\n    /**\n     * Vertical offset for the noise map.\n     * @default 0\n     */\n    offsetY?: number;\n    /**\n     * Depth offset for the noise map.\n     * @default 0\n     */\n    offsetZ?: number;\n    /**\n     * The threshold used with the step function to create a blocky effect in the noise pattern.\n     * When this is greater than 0, the step function is used to compare the noise value to this threshold.\n     * @default -1\n     */\n    step?: number;\n}\n\n/**\n * The SimplexNoiseFilter multiplies simplex noise with the current texture data. <br>\n * ![original](../screenshots/original.png)![filter](../screenshots/simplex-noise.png)\n * @class\n * @extends Filter\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nexport class SimplexNoiseFilter extends Filter\n{\n    /** Default constructor options. */\n    public static readonly defaults: SimplexNoiseFilterOptions = {\n        strength: 0.5,\n        noiseScale: 10.0,\n        offsetX: 0,\n        offsetY: 0,\n        offsetZ: 0,\n        step: -1,\n    };\n\n    /**\n     * @param options - Options for the SimplexNoise constructor.\n     */\n    constructor(options?: SimplexNoiseFilterOptions)\n    {\n        options = { ...SimplexNoiseFilter.defaults, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'simplex-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                simplexUniforms: {\n                    uStrength: { value: options?.strength ?? 0, type: 'f32' },\n                    uNoiseScale: { value: options?.noiseScale ?? 0, type: 'f32' },\n                    uOffsetX: { value: options?.offsetX ?? 0, type: 'f32' },\n                    uOffsetY: { value: options?.offsetY ?? 0, type: 'f32' },\n                    uOffsetZ: { value: options?.offsetZ ?? 0, type: 'f32' },\n                    uStep: { value: options?.step ?? 0, type: 'f32' },\n                }\n            }\n        });\n    }\n\n    /**\n     * Strength of the noise (color = (noiseMap + strength) * texture)\n     * @default 0.5\n     */\n    get strength(): number { return this.resources.simplexUniforms.uniforms.uStrength; }\n    set strength(value: number) { this.resources.simplexUniforms.uniforms.uStrength = value; }\n\n    /**\n     * Noise map scale.\n     * @default 10\n     */\n    get noiseScale(): number { return this.resources.simplexUniforms.uniforms.uNoiseScale; }\n    set noiseScale(value: number) { this.resources.simplexUniforms.uniforms.uNoiseScale = value; }\n\n    /**\n     * Horizontal offset for the noise map.\n     * @default 0\n     */\n    get offsetX(): number { return this.resources.simplexUniforms.uniforms.uOffsetX; }\n    set offsetX(value: number) { this.resources.simplexUniforms.uniforms.uOffsetX = value; }\n\n    /**\n     * Vertical offset for the noise map.\n     * @default 0\n     */\n    get offsetY(): number { return this.resources.simplexUniforms.uniforms.uOffsetY; }\n    set offsetY(value: number) { this.resources.simplexUniforms.uniforms.uOffsetY = value; }\n\n    /**\n     * Depth offset for the noise map.\n     * @default 0\n     */\n    get offsetZ(): number { return this.resources.simplexUniforms.uniforms.uOffsetZ; }\n    set offsetZ(value: number) { this.resources.simplexUniforms.uniforms.uOffsetZ = value; }\n\n    /**\n     * The threshold used with the step function to create a blocky effect in the noise pattern.\n     * When this is greater than 0, the step function is used to compare the noise value to this threshold.\n     * @default -1\n     */\n    get step(): number { return this.resources.simplexUniforms.uniforms.uStep; }\n    set step(value: number) { this.resources.simplexUniforms.uniforms.uStep = value; }\n}\n","import { Filter, GlProgram, GpuProgram, PointData, ViewSystem } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './tilt-shift.frag';\nimport source from './tilt-shift.wgsl';\n\n// @author Vico @vicocotea\n// original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js\n// by Evan Wallace : http://madebyevan.com/\n\n/**\n * Options for creating filter.\n */\ninterface TiltShiftAxisFilterOptions\n{\n    /** The strength of the blur. */\n    blur?: number;\n    /** The strength of the blur gradient */\n    gradientBlur?: number;\n    /** The position to start the effect at. */\n    start?: PointData;\n    /** The position to end the effect at. */\n    end?: PointData;\n    /** The axis that the filter is calculating for. */\n    axis?: 'vertical' | 'horizontal';\n}\n\n/**\n * A TiltShiftAxisFilter.\n *\n * @class\n * @extends Filter\n * @private\n */\nexport class TiltShiftAxisFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: TiltShiftAxisFilterOptions = {\n        /** The strength of the blur. */\n        blur: 100,\n        /** The strength of the blur gradient */\n        gradientBlur: 600,\n    };\n\n    public uniforms: {\n        uBlur: Float32Array;\n        uStart: PointData\n        uEnd: PointData;\n        uDelta: Float32Array;\n    };\n\n    private _tiltAxis: TiltShiftAxisFilterOptions['axis'];\n\n    constructor(options?: TiltShiftAxisFilterOptions)\n    {\n        const { width, height } = ViewSystem.defaultOptions as { width: number, height: number };\n\n        options = {\n            ...TiltShiftAxisFilter.DEFAULT_OPTIONS,\n            /** The position to start the effect at. */\n            start: { x: 0, y: height / 2 },\n            /** The position to end the effect at. */\n            end: { x: width, y: height / 2 },\n            ...options,\n        } as TiltShiftAxisFilterOptions;\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'tilt-shift-axis-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                tiltShiftUniforms: {\n                    uBlur: {\n                        value: new Float32Array([\n                            options.blur as number,\n                            options.gradientBlur as number,\n                        ]), type: 'vec2<f32>'\n                    },\n                    uStart: { value: options.start, type: 'vec2<f32>' },\n                    uEnd: { value: options.end, type: 'vec2<f32>' },\n                    uDelta: { value: new Float32Array([0, 0]), type: 'vec2<f32>' },\n                },\n            },\n        });\n\n        this.uniforms = this.resources.tiltShiftUniforms.uniforms;\n        this._tiltAxis = options.axis;\n    }\n\n    /**\n     * Updates the filter delta values.\n     * @ignore\n     */\n    public updateDelta(): void\n    {\n        this.uniforms.uDelta[0] = 0;\n        this.uniforms.uDelta[1] = 0;\n\n        if (this._tiltAxis === undefined) return;\n\n        const end = this.uniforms.uEnd;\n        const start = this.uniforms.uStart;\n\n        const dx = end.x - start.x;\n        const dy = end.y - start.y;\n        const d = Math.sqrt((dx * dx) + (dy * dy));\n\n        const isVert = this._tiltAxis === 'vertical';\n\n        this.uniforms.uDelta[0] = !isVert ? dx / d : -dy / d;\n        this.uniforms.uDelta[1] = !isVert ? dy / d : dx / d;\n    }\n}\n","import { FilterSystem, TexturePool } from 'pixi.js';\nimport { TiltShiftAxisFilter } from './TiltShiftAxisFilter';\n\nimport type { PointData, RenderSurface, Texture } from 'pixi.js';\n\n/** Options for the TiltShiftFilter constructor. */\nexport interface TiltShiftFilterOptions\n{\n    /** The strength of the blur. */\n    blur?: number;\n    /** The strength of the blur gradient */\n    gradientBlur?: number;\n    /** The position to start the effect at. */\n    start?: PointData;\n    /** The position to end the effect at. */\n    end?: PointData;\n}\n\n/**\n * A TiltShift Filter. Manages the pass of both a TiltShiftXFilter and TiltShiftYFilter.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/tilt-shift.png)\n *\n * author Vico @vicocotea\n * {@link https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js original filter }\n * by {@link http://madebyevan.com/ Evan Wallace }\n *\n * @class\n * @extends Filter\n */\nexport class TiltShiftFilter extends TiltShiftAxisFilter\n{\n    private _tiltShiftYFilter: TiltShiftAxisFilter;\n\n    /**\n     * @param options - Options for the TiltShiftFilter constructor.\n     */\n    constructor(options?: TiltShiftFilterOptions)\n    {\n        options = { ...TiltShiftAxisFilter.DEFAULT_OPTIONS, ...options };\n\n        super({ ...options, axis: 'horizontal' });\n        this._tiltShiftYFilter = new TiltShiftAxisFilter({ ...options, axis: 'vertical' });\n\n        this.updateDelta();\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Override existing apply method in `Filter`\n     * @override\n     * @ignore\n     */\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean,\n    ): void\n    {\n        const renderTarget = TexturePool.getSameSizeTexture(input);\n\n        filterManager.applyFilter(this, input, renderTarget, true);\n        filterManager.applyFilter(this._tiltShiftYFilter, renderTarget, output, clearMode);\n\n        TexturePool.returnTexture(renderTarget);\n    }\n\n    /** @ignore */\n    public override updateDelta(): void\n    {\n        super.updateDelta();\n        this._tiltShiftYFilter.updateDelta();\n    }\n\n    /** The strength of the blur. */\n    get blur(): number { return this.uniforms.uBlur[0]; }\n    set blur(value: number) { this.uniforms.uBlur[0] = this._tiltShiftYFilter.uniforms.uBlur[0] = value; }\n\n    /** The strength of the gradient blur. */\n    get gradientBlur(): number { return this.uniforms.uBlur[1]; }\n    set gradientBlur(value: number) { this.uniforms.uBlur[1] = this._tiltShiftYFilter.uniforms.uBlur[1] = value; }\n\n    /** The position to start the effect at. */\n    get start(): PointData { return this.uniforms.uStart; }\n    set start(value: PointData)\n    {\n        this.uniforms.uStart = this._tiltShiftYFilter.uniforms.uStart = value;\n        this.updateDelta();\n    }\n\n    /** The position to start the effect at on the `x` axis. */\n    get startX(): number { return this.start.x; }\n    set startX(value: number)\n    {\n        this.start.x = value;\n        this.updateDelta();\n    }\n\n    /** The position to start the effect at on the `x` axis. */\n    get startY(): number { return this.start.y; }\n    set startY(value: number)\n    {\n        this.start.y = value;\n        this.updateDelta();\n    }\n\n    /** The position to end the effect at. */\n    get end(): PointData { return this.uniforms.uEnd; }\n    set end(value: PointData)\n    {\n        this.uniforms.uEnd = this._tiltShiftYFilter.uniforms.uEnd = value;\n        this.updateDelta();\n    }\n\n    /** The position to end the effect at on the `x` axis. */\n    get endX(): number { return this.end.x; }\n    set endX(value: number)\n    {\n        this.end.x = value;\n        this.updateDelta();\n    }\n\n    /** The position to end the effect at on the `y` axis. */\n    get endY(): number { return this.end.y; }\n    set endY(value: number)\n    {\n        this.end.y = value;\n        this.updateDelta();\n    }\n}\n\n","import { Filter, GlProgram, GpuProgram, PointData } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './twist.frag';\nimport source from './twist.wgsl';\n\n/** Options for the TwistFilter constructor. */\nexport interface TwistFilterOptions\n{\n    /**\n     * Padding for the filter area\n     * @default 20\n     */\n    padding?: number;\n    /**\n     * The radius of the twist\n     * @default 200\n     */\n    radius?: number;\n    /**\n     * The angle of the twist\n     * @default 4\n     */\n    angle?: number;\n    /**\n     * The `x` and `y` offset coordinates to change the position of the center of the circle of effect.\n     * This should be a size 2 array or an object containing `x` and `y` values, you cannot change types\n     * once defined in the constructor\n     * @default {x:0,y:0}\n     */\n    offset?: PointData;\n}\n\n/**\n * This filter applies a twist effect making display objects appear twisted in the given direction.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/twist.png)\n *\n * @class\n * @extends Filter\n */\nexport class TwistFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: TwistFilterOptions = {\n        padding: 20,\n        radius: 200,\n        angle: 4,\n        offset: { x: 0, y: 0 },\n    };\n\n    public uniforms: {\n        uTwist: Float32Array;\n        uOffset: PointData;\n    };\n\n    /**\n     * @param options - Options for the TwistFilter constructor.\n     */\n    constructor(options?: Partial<TwistFilterOptions>)\n    {\n        options = { ...TwistFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'twist-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                twistUniforms: {\n                    uTwist: {\n                        value: [options.radius ?? 0, options.angle ?? 0],\n                        type: 'vec2<f32>'\n                    },\n                    uOffset: {\n                        value: options.offset,\n                        type: 'vec2<f32>'\n                    },\n                }\n            },\n            ...options,\n        });\n\n        this.uniforms = this.resources.twistUniforms.uniforms;\n    }\n\n    /**\n     * The radius of the twist\n     * @default 200\n     */\n    get radius(): number { return this.uniforms.uTwist[0]; }\n    set radius(value: number) { this.uniforms.uTwist[0] = value; }\n\n    /**\n     * The angle of the twist\n     * @default 4\n     */\n    get angle(): number { return this.uniforms.uTwist[1]; }\n    set angle(value: number) { this.uniforms.uTwist[1] = value; }\n\n    /**\n     * The `x` offset coordinate to change the position of the center of the circle of effect\n     * @default 0\n     */\n    get offset(): PointData { return this.uniforms.uOffset; }\n    set offset(value: PointData) { this.uniforms.uOffset = value; }\n\n    /**\n     * The `x` offset coordinate to change the position of the center of the circle of effect\n     * @default 0\n     */\n    get offsetX(): number { return this.offset.x; }\n    set offsetX(value: number) { this.offset.x = value; }\n\n    /**\n     * The `y` offset coordinate to change the position of the center of the circle of effect\n     * @default 0\n     */\n    get offsetY(): number { return this.offset.y; }\n    set offsetY(value: number) { this.offset.y = value; }\n}\n","import { Filter, GlProgram, GpuProgram, PointData } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './zoom-blur.frag';\nimport source from './zoom-blur.wgsl';\n\n/** Options for the ZoomBlurFilter constructor. */\nexport interface ZoomBlurFilterOptions\n{\n    /**\n     * Sets the strength of the zoom blur effect\n     * @default 0.1\n     */\n    strength?: number;\n    /**\n     * The `x` and `y` offset coordinates to change the position of the center of the circle of effect.\n     * This should be a size 2 array or an object containing `x` and `y` values, you cannot change types\n     * once defined in the constructor\n     * @default {x:0,y:0}\n     */\n    center?: PointData | number[];\n    /**\n     * The inner radius of zoom. The part in inner circle won't apply zoom blur effect\n     * @default 0\n     */\n    innerRadius?: number;\n    /**\n     * Outer radius of the effect. less than `0` equates to infinity\n     * @default -1\n     */\n    radius?: number;\n    /**\n     * On older iOS devices, it's better to not go above `13.0`.\n     * Decreasing this value will produce a lower-quality blur effect with more dithering\n     * @default 32\n     */\n    maxKernelSize?: number;\n}\n\n/**\n * The ZoomFilter applies a Zoom blur to an object.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/zoom-blur.png)\n *\n * @class\n * @extends Filter\n */\nexport class ZoomBlurFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: ZoomBlurFilterOptions = {\n        strength: 0.1,\n        center: { x: 0, y: 0 },\n        innerRadius: 0,\n        radius: -1,\n        maxKernelSize: 32,\n    };\n\n    public uniforms: {\n        uStrength: number;\n        uCenter: PointData;\n        uRadii: Float32Array\n    };\n\n    /**\n     * @param options - Options for the ZoomBlurFilter constructor.\n     */\n    constructor(options?: ZoomBlurFilterOptions)\n    {\n        options = { ...ZoomBlurFilter.DEFAULT_OPTIONS, ...options };\n\n        const kernelSize = options.maxKernelSize ?? 32;\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source: source.replace('${MAX_KERNEL_SIZE}', kernelSize.toFixed(1)),\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment: fragment.replace('${MAX_KERNEL_SIZE}', kernelSize.toFixed(1)),\n            name: 'zoom-blur-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                zoomBlurUniforms: {\n                    uStrength: { value: options.strength, type: 'f32' },\n                    uCenter: { value: options.center, type: 'vec2<f32>' },\n                    uRadii: { value: new Float32Array(2), type: 'vec2<f32>' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.zoomBlurUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Sets the strength of the zoom blur effect\n     * @default 0.1\n     */\n    get strength(): number { return this.uniforms.uStrength; }\n    set strength(value: number) { this.uniforms.uStrength = value; }\n\n    /**\n     * The center of the zoom\n     * @default [0,0]\n     */\n    get center(): PointData { return this.uniforms.uCenter; }\n    set center(value: PointData | number[])\n    {\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this.uniforms.uCenter = value;\n    }\n\n    /**\n     * Sets the center of the effect in normalized screen coords on the `x` axis\n     * @default 0\n     */\n    get centerX(): number { return this.uniforms.uCenter.x; }\n    set centerX(value: number) { this.uniforms.uCenter.x = value; }\n\n    /**\n     * Sets the center of the effect in normalized screen coords on the `y` axis\n     * @default 0\n     */\n    get centerY(): number { return this.uniforms.uCenter.y; }\n    set centerY(value: number) { this.uniforms.uCenter.y = value; }\n\n    /**\n     * The inner radius of zoom. The part in inner circle won't apply zoom blur effect\n     * @default 0\n     */\n    get innerRadius(): number { return this.uniforms.uRadii[0]; }\n    set innerRadius(value: number) { this.uniforms.uRadii[0] = value; }\n\n    /**\n     * Outer radius of the effect. less than `0` equates to infinity\n     * @default -1\n     */\n    get radius(): number { return this.uniforms.uRadii[1]; }\n    set radius(value: number) { this.uniforms.uRadii[1] = (value < 0 || value === Infinity) ? -1 : value; }\n}\n"],"names":["b","a","g","f","n","t","r","s","m","_AdjustmentFilter","Filter","options","__spreadValues","gpuProgram","GpuProgram","wgslVertex","source","glProgram","GlProgram","vertex","fragment","__publicField","value","AdjustmentFilter","z","_","d","q","e","c","u","_KawaseBlurFilter","args","_a","_b","_c","deprecation","sourceClamp","fragmentClamp","filterManager","input","output","clearMode","uvX","uvY","offset","renderTarget","TexturePool","target","tmp","last","i","acc","v","blur","quality","kernels","k","step","KawaseBlurFilter","l","o","_ExtractBrightnessFilter","ExtractBrightnessFilter","_AdvancedBloomFilter","h","Texture","brightTarget","bloomTarget","AdvancedBloomFilter","C","_AsciiFilter","replaceColor","Color","AsciiFilter","BackdropBlurFilter","BlurFilter","wgslFragment","backTexture","blurredBackground","_BevelFilter","DEG_TO_RAD","BevelFilter","_BloomFilter","AlphaFilter","strength","BlurFilterPass","__spreadProps","clear","BloomFilter","_BulgePinchFilter","BulgePinchFilter","GradientParser","visitor","node","orientation","result","at","style","resultColor","length","elements","size","element","nodeVisitor","root","tokens","error","msg","err","getAST","ast","matchListDefinitions","matchListing","matchDefinition","matchGradient","matchLinearOrientation","matchListRadialOrientations","gradientType","pattern","orientationMatcher","matchCall","captures","scan","matchColorStop","callback","matchSideOrCorner","matchAngle","match","radialOrientations","radialOrientation","matchRadialOrientation","lookaheadCache","radialType","matchCircle","matchEllipse","matchAtPosition","extent","matchExtentKeyword","positionAt","defaultPosition","matchPositioning","circle","matchLength","ellipse","matchDistance","positioning","location","matchCoordinates","matcher","color","matchColor","matchHexColor","matchRGBAColor","matchRGBColor","matchLiteralColor","matchNumber","matchPositionKeyword","type","captureIndex","regexp","blankCaptures","consume","code","parse","stringify","parseCssGradient","cssGradient","cssGradientNodes","trimCssGradient","cssGradientNode","typeFromCssType","stops","stopsFromCssStops","angle","angleFromCssOrientation","supportedTypes","offsets","offsetsFromCssColorStops","colorString","colorAsStringFromCssStop","rgbaColor","stop","cssStop","stopOffset","findNextFixedStop","fromIndex","prevFixedOffset","nextFixed","stepSize","fixFloatRounding","angleFromDirectionalValue","supportedValues","value_","U","y","S","x","O","ANGLE_OFFSET","sortColorStops","_ColorGradientFilter","maxStops","sortedStops","indexStart","ColorGradientFilter","_ColorMapFilter","TextureSource","nearest","texture","ColorMapFilter","_ColorOverlayFilter","ColorOverlayFilter","F","_ColorReplaceFilter","ColorReplaceFilter","_ConvolutionFilter","width","height","matrix","ConvolutionFilter","CrossHatchFilter","_CRTFilter","CRTFilter","_DotFilter","dotUniforms","DotFilter","_DropShadowFilter","offsetPadding","DropShadowFilter","EmbossFilter","FILL_MODES","_GlitchFilter","_d","_e","canvas","ImageSource","arr","min","count","rest","averageWidth","w","ratio","rand","temp","ctx","red","green","sizes","len","GlitchFilter","_GlowFilter","distance","GlowFilter","_GodrayFilter","sourcePerlin","perlin","radians","GodrayFilter","GrayscaleFilter","_HslAdjustmentFilter","HslAdjustmentFilter","p","_MotionBlurFilter","ObservablePoint","MotionBlurFilter","_MultiColorReplaceFilter","maxColors","replacements","originals","targets","colorCount","pair","MultiColorReplaceFilter","_OldFilmFilter","OldFilmFilter","_OutlineFilter","OutlineFilter","PixelateFilter","Point","_RadialBlurFilter","RadialBlurFilter","_ReflectionFilter","ReflectionFilter","_RGBSplitFilter","RGBSplitFilter","_ShockwaveFilter","ShockwaveFilter","_SimpleLightmapFilter","SimpleLightmapFilter","_SimplexNoiseFilter","_f","SimplexNoiseFilter","_TiltShiftAxisFilter","ViewSystem","end","start","dx","dy","isVert","TiltShiftAxisFilter","D","TiltShiftFilter","_TwistFilter","TwistFilter","_ZoomBlurFilter","kernelSize","ZoomBlurFilter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAAA,GAAA,OAAA,eAAAC,GAAA,OAAA,sBAAAC,GAAA,OAAA,UAAA,eAAAC,GAAA,OAAA,UAAA,qBAAAC,EAAA,CAAAC,EAAA,EAAAC,IAAA,KAAAD,EAAAL,GAAAK,EAAA,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAC,CAAA,CAAA,EAAAD,EAAA,CAAA,EAAAC,EAAAC,GAAA,CAAAF,EAAA,IAAA,CAAA,QAAAC,KAAA,IAAA,EAAA,CAAA,GAAAJ,GAAA,KAAA,EAAAI,CAAA,GAAAF,EAAAC,EAAAC,EAAA,EAAAA,CAAA,CAAA,EAAA,GAAAL,GAAA,QAAAK,KAAAL,GAAA,CAAA,EAAAE,GAAA,KAAA,EAAAG,CAAA,GAAAF,EAAAC,EAAAC,EAAA,EAAAA,CAAA,CAAA,EAAA,OAAAD,CAAA,EAAAG,GAAA,CAAAH,EAAA,EAAAC,KAAAF,EAAAC,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAAC,CAAA,EAAAA,GA4DO,MAAMG,GAAN,MAAMA,WAAyBC,EACtC,MAAA,CAwBI,YAAYC,EACZ,CACIA,EAAUC,MAAA,CAAKH,EAAAA,GAAiB,eAAoBE,EAAAA,CAAAA,EAEpD,MAAME,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,mBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,mBAAoB,CAChB,OAAQ,CAAE,MAAON,EAAQ,MAAO,KAAM,KAAM,EAC5C,UAAW,CAAE,MAAOA,EAAQ,SAAU,KAAM,KAAM,EAClD,YAAa,CAAE,MAAOA,EAAQ,WAAY,KAAM,KAAM,EACtD,YAAa,CAAE,MAAOA,EAAQ,WAAY,KAAM,KAAM,EACtD,OAAQ,CACJ,MAAO,CACHA,EAAQ,IACRA,EAAQ,MACRA,EAAQ,KACRA,EAAQ,KACZ,EACA,KAAM,WACV,CACJ,CACJ,CACJ,CAAC,EApDLU,GAAA,KAAO,UAAA,EAsDH,KAAK,SAAW,KAAK,UAAU,mBAAmB,QACtD,CAMA,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,MAAQ,CACnD,IAAI,MAAMC,EAAe,CAAE,KAAK,SAAS,OAASA,CAAO,CAMzD,IAAI,UAAmB,CAAE,OAAO,KAAK,SAAS,SAAW,CACzD,IAAI,SAASA,EAAe,CAAE,KAAK,SAAS,UAAYA,CAAO,CAM/D,IAAI,YAAqB,CAAE,OAAO,KAAK,SAAS,WAAa,CAC7D,IAAI,WAAWA,EAAe,CAAE,KAAK,SAAS,YAAcA,CAAO,CAMnE,IAAI,YAAqB,CAAE,OAAO,KAAK,SAAS,WAAa,CAC7D,IAAI,WAAWA,EAAe,CAAE,KAAK,SAAS,YAAcA,CAAO,CAMnE,IAAI,KAAc,CAAE,OAAO,KAAK,SAAS,OAAO,CAAC,CAAG,CACpD,IAAI,IAAIA,EAAe,CAAE,KAAK,SAAS,OAAO,CAAC,EAAIA,CAAO,CAM1D,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,OAAO,CAAC,CAAG,CACtD,IAAI,MAAMA,EAAe,CAAE,KAAK,SAAS,OAAO,CAAC,EAAIA,CAAO,CAM5D,IAAI,MAAe,CAAE,OAAO,KAAK,SAAS,OAAO,CAAC,CAAG,CACrD,IAAI,KAAKA,EAAe,CAAE,KAAK,SAAS,OAAO,CAAC,EAAIA,CAAO,CAM3D,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,OAAO,CAAC,CAAG,CACtD,IAAI,MAAMA,EAAe,CAAE,KAAK,SAAS,OAAO,CAAC,EAAIA,CAAO,CAChE,EA3HID,GAHSZ,GAGc,kBAA2C,CAC9D,MAAO,EACP,SAAU,EACV,WAAY,EACZ,WAAY,EACZ,IAAK,EACL,MAAO,EACP,KAAM,EACN,MAAO,CACX,CAAA,MAZSc,GAANd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GC5DPe,GAAA,OAAA,eAAAC,GAAA,OAAA,sBAAAC,GAAA,OAAA,UAAA,eAAAC,GAAA,OAAA,UAAA,qBAAA3B,EAAA,CAAAO,EAAAD,EAAAsB,IAAAtB,KAAAC,EAAAiB,GAAAjB,EAAAD,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAsB,CAAA,CAAA,EAAArB,EAAAD,CAAA,EAAAsB,EAAAC,GAAA,CAAAtB,EAAAD,IAAA,CAAA,QAAAsB,KAAAtB,IAAAA,EAAA,CAAA,GAAAoB,GAAA,KAAApB,EAAAsB,CAAA,GAAA5B,EAAAO,EAAAqB,EAAAtB,EAAAsB,CAAA,CAAA,EAAA,GAAAH,GAAA,QAAAG,KAAAH,GAAAnB,CAAA,EAAAqB,GAAA,KAAArB,EAAAsB,CAAA,GAAA5B,EAAAO,EAAAqB,EAAAtB,EAAAsB,CAAA,CAAA,EAAA,OAAArB,CAAA,EAAAuB,EAAA,CAAAvB,EAAAD,EAAAsB,KAAA5B,EAAAO,EAAA,OAAAD,GAAA,SAAAA,EAAA,GAAAA,EAAAsB,CAAA,EAAAA,GA2CO,MAAMG,GAAN,MAAMA,WAAyBrB,EAAAA,MACtC,CAkCI,eAAesB,EACf,CA/EJ,IAAAC,EAAAC,EAAAC,EAgFQ,IAAIxB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,IAErB,OAAOtB,GAAY,UAAY,MAAM,QAAQA,CAAO,KAGpDyB,cAAY,QAAS,iHAAiH,EAEtIzB,EAAU,CAAE,SAAUA,CAAqC,EAEvDqB,EAAK,CAAC,IAAM,SAAWrB,EAAQ,QAAUqB,EAAK,CAAC,GAC/CA,EAAK,CAAC,IAAM,SAAWrB,EAAQ,MAAQqB,EAAK,CAAC,IAGrDrB,EAAUC,GAAAiB,GAAA,GAAKE,GAAiB,eAAoBpB,EAAAA,CAAAA,EAEpD,MAAME,EAAaC,aAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAQJ,GAAA,MAAAA,EAAS,MAAQ0B,GAAcrB,GACvC,WAAY,cAChB,CACJ,CAAC,EACKC,EAAYC,YAAU,KAAK,CAC7B,OAAAC,EACA,SAAUR,GAAA,MAAAA,EAAS,MAAQ2B,GAAgBlB,GAC3C,KAAM,oBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,mBAAoB,CAChB,QAAS,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,CAC7D,CACJ,CACJ,CAAC,EAlELI,EAAA,KAAO,UAAA,EAIPA,EAAA,KAAQ,aAAa,CAAE,EAAG,EAAG,EAAG,CAAE,CAClCA,EAAAA,EAAA,KAAQ,QAAA,EACRA,EAAA,KAAQ,WAAqB,CAAC,CAAA,EAC9BA,EAAA,KAAQ,OAAA,EACRA,EAAA,KAAQ,YA4DJ,KAAK,SAAW,KAAK,UAAU,mBAAmB,SAElD,KAAK,WAAYa,EAAAvB,EAAQ,YAAR,KAAAuB,EAAqB,CAAE,EAAG,EAAG,EAAG,CAAE,EAE/C,MAAM,QAAQvB,EAAQ,QAAQ,EAE9B,KAAK,QAAUA,EAAQ,SAElB,OAAOA,EAAQ,UAAa,WAEjC,KAAK,MAAQA,EAAQ,SACrB,KAAK,SAAUwB,EAAAxB,EAAQ,UAAR,KAAAwB,EAAmB,GAGtC,KAAK,OAAS,CAAC,CAACxB,EAAQ,KAC5B,CAOgB,MACZ4B,EACAC,EACAC,EACAC,EAEJ,CACI,MAAMC,EAAM,KAAK,WAAaH,EAAM,OAAO,MACrCI,EAAM,KAAK,WAAaJ,EAAM,OAAO,OAC3C,IAAIK,EAEJ,GAAI,KAAK,WAAa,GAAK,KAAK,QAAU,EAEtCA,EAAS,KAAK,SAAS,CAAC,EAAI,GAC5B,KAAK,SAAS,QAAQ,CAAC,EAAIA,EAASF,EACpC,KAAK,SAAS,QAAQ,CAAC,EAAIE,EAASD,EACpCL,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAS,MAG5D,CACI,MAAMI,EAAeC,cAAY,mBAAmBP,CAAK,EAEzD,IAAIxB,EAASwB,EACTQ,EAASF,EACTG,EAEJ,MAAMC,EAAO,KAAK,SAAW,EAE7B,QAASC,EAAI,EAAGA,EAAID,EAAMC,IAEtBN,EAAS,KAAK,SAASM,CAAC,EAAI,GAC5B,KAAK,SAAS,QAAQ,CAAC,EAAIN,EAASF,EACpC,KAAK,SAAS,QAAQ,CAAC,EAAIE,EAASD,EACpCL,EAAc,YAAY,KAAMvB,EAAQgC,EAAQ,EAAI,EAEpDC,EAAMjC,EACNA,EAASgC,EACTA,EAASC,EAGbJ,EAAS,KAAK,SAASK,CAAI,EAAI,GAC/B,KAAK,SAAS,QAAQ,CAAC,EAAIL,EAASF,EACpC,KAAK,SAAS,QAAQ,CAAC,EAAIE,EAASD,EAEpCL,EAAc,YAAY,KAAMvB,EAAQyB,EAAQC,CAAS,EACzDK,EAAAA,YAAY,cAAcD,CAAY,CAC1C,CACJ,CAMA,IAAI,UAAmB,CAAE,OAAO,KAAK,KAAO,CAC5C,IAAI,SAASxB,EACb,CACI,KAAK,MAAQA,EACb,KAAK,kBACT,CAMA,IAAI,SAAkB,CAAE,OAAO,KAAK,QAAU,CAC9C,IAAI,QAAQA,EACZ,CACI,KAAK,SAAW,KAAK,IAAI,EAAG,KAAK,MAAMA,CAAK,CAAC,EAC7C,KAAK,iBAAiB,CAC1B,CAMA,IAAI,SAAoB,CAAE,OAAO,KAAK,QAAU,CAChD,IAAI,QAAQA,EACZ,CACQ,MAAM,QAAQA,CAAK,GAAKA,EAAM,OAAS,GAEvC,KAAK,SAAWA,EAChB,KAAK,SAAWA,EAAM,OACtB,KAAK,MAAQ,KAAK,IAAI,GAAGA,CAAK,IAK9B,KAAK,SAAW,CAAC,CAAC,EAClB,KAAK,SAAW,EAExB,CAMA,IAAI,WAAuB,CAAE,OAAO,KAAK,UAAY,CACrD,IAAI,UAAUA,EACd,CACI,GAAI,OAAOA,GAAU,SACrB,CACI,KAAK,WAAa,KAAK,WAAaA,EAEpC,MACJ,CAEA,GAAI,MAAM,QAAQA,CAAK,EACvB,CACI,KAAK,WAAaA,EAAM,CAAC,EACzB,KAAK,WAAaA,EAAM,CAAC,EAEzB,MACJ,CAEA,KAAK,WAAaA,CACtB,CAMA,IAAI,YAAqB,CAAE,OAAO,KAAK,UAAU,CAAG,CACpD,IAAI,WAAWA,EAAe,CAAE,KAAK,UAAU,EAAIA,CAAO,CAM1D,IAAI,YAAqB,CAAE,OAAO,KAAK,UAAU,CAAG,CACpD,IAAI,WAAWA,EAAe,CAAE,KAAK,UAAU,EAAIA,CAAO,CAM1D,IAAI,OAAiB,CAAE,OAAO,KAAK,MAAQ,CAGnC,gBACR,CACI,KAAK,QAAU,KAAK,KAAK,KAAK,SAAS,OAAO,CAAC8B,EAAKC,IAAMD,EAAMC,EAAI,GAAK,CAAC,CAAC,CAC/E,CAGQ,kBACR,CACI,MAAMC,EAAO,KAAK,MACZC,EAAU,KAAK,SACfC,EAAoB,CAACF,CAAI,EAE/B,GAAIA,EAAO,EACX,CACI,IAAIG,EAAIH,EACR,MAAMI,EAAOJ,EAAOC,EAEpB,QAASJ,EAAI,EAAGA,EAAII,EAASJ,IAEzBM,GAAKC,EACLF,EAAQ,KAAKC,CAAC,CAEtB,CAEA,KAAK,SAAWD,EAChB,KAAK,gBACT,CACJ,EAtQInC,EAHSU,GAGc,kBAA2C,CAC9D,SAAU,EACV,QAAS,EACT,MAAO,GACP,UAAW,CAAE,EAAG,EAAG,EAAG,CAAE,CAC5B,CAAA,MARS4B,EAAN5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC3CP6B,GAAA,OAAA,eAAApD,GAAA,OAAA,sBAAAP,GAAA,OAAA,UAAA,eAAAE,GAAA,OAAA,UAAA,qBAAA0D,EAAA,CAAAxD,EAAA,EAAAC,IAAA,KAAAD,EAAAuD,GAAAvD,EAAA,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAC,CAAA,CAAA,EAAAD,EAAA,CAAA,EAAAC,EAAAF,GAAA,CAAAC,EAAA,IAAA,CAAA,QAAAC,KAAA,IAAA,EAAA,CAAA,GAAAL,GAAA,KAAA,EAAAK,CAAA,GAAAuD,EAAAxD,EAAAC,EAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,GAAA,QAAAF,KAAAE,GAAA,CAAA,EAAAL,GAAA,KAAA,EAAAG,CAAA,GAAAuD,EAAAxD,EAAAC,EAAA,EAAAA,CAAA,CAAA,EAAA,OAAAD,CAAA,EAAA8C,GAAA,CAAA9C,EAAA,EAAAC,KAAAuD,EAAAxD,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAAC,CAAA,EAAAA,GAkBO,MAAMwD,GAAN,MAAMA,WAAgCpD,EAC7C,MAAA,CAUI,YAAYC,EACZ,CACIA,EAAUC,GAAAA,GAAA,CAAA,EAAKkD,GAAwB,eAAoBnD,EAAAA,CAAAA,EAE3D,MAAME,EAAaC,EAAW,WAAA,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,2BACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,0BAA2B,CACvB,WAAY,CAAE,MAAON,EAAQ,UAAW,KAAM,KAAM,CACxD,CACJ,CACJ,CAAC,EAjCLU,GAAA,KAAO,UAAA,EAmCH,KAAK,SAAW,KAAK,UAAU,0BAA0B,QAC7D,CAMA,IAAI,WAAoB,CAAE,OAAO,KAAK,SAAS,UAAY,CAC3D,IAAI,UAAUC,EAAe,CAAE,KAAK,SAAS,WAAaA,CAAO,CACrE,EAhDID,GAHSyC,GAGc,kBAAkD,CACrE,UAAW,EACf,CAAA,MALSC,GAAND,0YCwCA,MAAME,GAAN,MAAMA,WAA4BtD,QACzC,CA4BI,YAAYC,EACZ,CAxFJ,IAAAsB,EAyFQtB,EAAUC,GAAAqD,GAAA,GAAKD,GAAoB,eAAA,EAAoBrD,CAEvD,EAAA,MAAME,EAAaC,aAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,uBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,sBAAuB,CACnB,YAAa,CAAE,MAAON,EAAQ,WAAY,KAAM,KAAM,EACtD,YAAa,CAAE,MAAOA,EAAQ,WAAY,KAAM,KAAM,CAC1D,EACA,YAAauD,EAAAA,QAAQ,KACzB,CACJ,CAAC,EAhDL7C,EAAA,KAAO,UAMPA,EAAAA,EAAA,KAAO,aAAa,CAAA,EAGpBA,EAAA,KAAO,aAAa,CAAA,EAEpBA,EAAA,KAAQ,gBAAA,EACRA,EAAA,KAAQ,aAAA,EAsCJ,KAAK,SAAW,KAAK,UAAU,sBAAsB,SAErD,KAAK,eAAiB,IAAI0C,GAAwB,CAC9C,UAAWpD,EAAQ,SACvB,CAAC,EAED,KAAK,YAAc,IAAIgD,EAAiB,CACpC,UAAU1B,EAAAtB,EAAQ,UAAR,KAAAsB,EAAuCtB,EAAQ,KACzD,QAASA,EAAQ,QAAU,OAAYA,EAAQ,OACnD,CAAC,EAED,OAAO,OAAO,KAAMA,CAAO,CAC/B,CAOgB,MACZ4B,EACAC,EACAC,EACAC,EAEJ,CACI,MAAMyB,EAAepB,cAAY,mBAAmBP,CAAK,EAEzD,KAAK,eAAe,MAAMD,EAAeC,EAAO2B,EAAc,EAAI,EAElE,MAAMC,EAAcrB,cAAY,mBAAmBP,CAAK,EAExD,KAAK,YAAY,MAAMD,EAAe4B,EAAcC,EAAa,EAAI,EAErE,KAAK,SAAS,YAAc,KAAK,WACjC,KAAK,SAAS,YAAc,KAAK,WAEjC,KAAK,UAAU,YAAcA,EAAY,OAEzC7B,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAS,EAExDK,EAAAA,YAAY,cAAcqB,CAAW,EACrCrB,cAAY,cAAcoB,CAAY,CAC1C,CAMA,IAAI,WAAoB,CAAE,OAAO,KAAK,eAAe,SAAW,CAChE,IAAI,UAAU7C,EAAe,CAAE,KAAK,eAAe,UAAYA,CAAO,CAGtE,IAAI,SAAoB,CAAE,OAAO,KAAK,YAAY,OAAS,CAC3D,IAAI,QAAQA,EAAiB,CAAE,KAAK,YAAY,QAAUA,CAAO,CAMjE,IAAI,MAAe,CAAE,OAAO,KAAK,YAAY,QAAU,CACvD,IAAI,KAAKA,EAAe,CAAE,KAAK,YAAY,SAAWA,CAAO,CAM7D,IAAI,SAAkB,CAAE,OAAO,KAAK,YAAY,OAAS,CACzD,IAAI,QAAQA,EAAe,CAAE,KAAK,YAAY,QAAUA,CAAO,CAM/D,IAAI,WAAuB,CAAE,OAAO,KAAK,YAAY,SAAW,CAChE,IAAI,UAAUA,EACd,CACQ,OAAOA,GAAU,WAEjBA,EAAQ,CAAE,EAAGA,EAAO,EAAGA,CAAM,GAG7B,MAAM,QAAQA,CAAK,IAEnBA,EAAQ,CAAE,EAAGA,EAAM,CAAC,EAAG,EAAGA,EAAM,CAAC,CAAE,GAGvC,KAAK,YAAY,UAAYA,CACjC,CAMA,IAAI,YAAqB,CAAE,OAAO,KAAK,YAAY,UAAY,CAC/D,IAAI,WAAWA,EAAe,CAAE,KAAK,YAAY,WAAaA,CAAO,CAMrE,IAAI,YAAqB,CAAE,OAAO,KAAK,YAAY,UAAY,CAC/D,IAAI,WAAWA,EAAe,CAAE,KAAK,YAAY,WAAaA,CAAO,CACzE,EAlKID,EAHS2C,GAGc,kBAA8C,CACjE,UAAW,GACX,WAAY,EACZ,WAAY,EACZ,KAAM,EACN,QAAS,EACT,UAAW,CAAE,EAAG,EAAG,EAAG,CAAE,CAC5B,CAVG,EAAA,IAAMK,GAANL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GC1DPM,GAAA,OAAA,eAAAnE,GAAA,OAAA,sBAAAH,GAAA,OAAA,UAAA,eAAAE,GAAA,OAAA,UAAA,qBAAA4B,GAAA,CAAAzB,EAAAC,EAAAuD,IAAAvD,KAAAD,EAAAiE,GAAAjE,EAAAC,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAuD,CAAA,CAAA,EAAAxD,EAAAC,CAAA,EAAAuD,EAAAzD,GAAA,CAAAC,EAAAC,IAAA,CAAA,QAAAuD,KAAAvD,IAAAA,EAAA,CAAA,GAAAN,GAAA,KAAAM,EAAAuD,CAAA,GAAA/B,GAAAzB,EAAAwD,EAAAvD,EAAAuD,CAAA,CAAA,EAAA,GAAA1D,GAAA,QAAA0D,KAAA1D,GAAAG,CAAA,EAAAJ,GAAA,KAAAI,EAAAuD,CAAA,GAAA/B,GAAAzB,EAAAwD,EAAAvD,EAAAuD,CAAA,CAAA,EAAA,OAAAxD,CAAA,EAAA8C,GAAA,CAAA9C,EAAAC,EAAAuD,KAAA/B,GAAAzB,EAAA,OAAAC,GAAA,SAAAA,EAAA,GAAAA,EAAAuD,CAAA,EAAAA,GAsCO,MAAMU,GAAN,MAAMA,WAAoB7D,EACjC,MAAA,CA4BI,eAAesB,EACf,CApEJ,IAAAC,EAAAC,EAqEQ,IAAIvB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,CAAC,EAEtB,OAAOtB,GAAY,WAGnByB,EAAY,YAAA,QAAS,kGAAkG,EAEvHzB,EAAU,CAAE,KAAMA,CAAQ,GAG9B,MAAM6D,GAAe7D,GAAA,KAAAA,OAAAA,EAAS,QAASA,EAAQ,eAAiB,GAEhEA,EAAUC,GAAAR,GAAA,GAAKmE,GAAY,eAAA,EAAoB5D,CAE/C,EAAA,MAAME,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,cACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,cAAe,CACX,MAAO,CAAE,MAAON,EAAQ,KAAM,KAAM,KAAM,EAC1C,OAAQ,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EACxD,cAAe,CAAE,MAAO,OAAO6D,CAAY,EAAG,KAAM,KAAM,CAC9D,CACJ,CACJ,CAAC,EA/DLnD,GAAA,KAAO,UAMPA,EAAAA,GAAA,KAAQ,QAAA,EA2DJ,KAAK,SAAW,KAAK,UAAU,cAAc,SAC7C,KAAK,OAAS,IAAIoD,EAAAA,MAClB,KAAK,OAAQvC,EAAAvB,EAAQ,QAAR,KAAAuB,EAAiB,QAClC,CAMA,IAAI,MAAe,CAAE,OAAO,KAAK,SAAS,KAAO,CACjD,IAAI,KAAKZ,EAAe,CAAE,KAAK,SAAS,MAAQA,CAAO,CAOvD,IAAI,OAAqB,CAAE,OAAO,KAAK,OAAO,KAAsB,CACpE,IAAI,MAAMA,EACV,CACI,KAAK,OAAO,SAASA,CAAK,EAC1B,KAAM,CAAChB,EAAGJ,EAAGF,CAAC,EAAI,KAAK,OAAO,QAAQ,EAEtC,KAAK,SAAS,OAAO,CAAC,EAAIM,EAC1B,KAAK,SAAS,OAAO,CAAC,EAAIJ,EAC1B,KAAK,SAAS,OAAO,CAAC,EAAIF,CAC9B,CAKA,IAAI,cAAwB,CAAE,OAAO,KAAK,SAAS,cAAgB,EAAK,CACxE,IAAI,aAAasB,EAAgB,CAAE,KAAK,SAAS,cAAgBA,EAAQ,EAAI,CAAG,CACpF,EAxGID,GAHSkD,GAGc,kBAAsC,CACzD,KAAM,EACN,MAAO,SACP,aAAc,EAClB,CAAA,MAPSG,GAANH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GCtCP7C,GAAA,OAAA,eAAAlB,GAAA,CAAAH,EAAAC,EAAAsB,IAAAtB,KAAAD,EAAAqB,GAAArB,EAAAC,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAsB,CAAA,CAAA,EAAAvB,EAAAC,CAAA,EAAAsB,EAAA3B,GAAA,CAAAI,EAAAC,EAAAsB,KAAApB,GAAAH,EAAA,OAAAC,GAAA,SAAAA,EAAA,GAAAA,EAAAsB,CAAA,EAAAA,GAsBO,MAAM+C,WAA2BC,EAAAA,UACxC,CAMI,YAAYjE,EACZ,CACI,MAAMA,CAAO,EAPjBU,GAAA,KAAQ,YASJ,EAAA,KAAK,cAAgB,GACrB,KAAK,QAAU,EAEf,KAAK,WAAa,IAAIX,SAAO,CACzB,WAAYI,EAAW,WAAA,KAAK,CACxB,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAQ8D,GACR,WAAY,cAChB,CACJ,CAAC,EACD,UAAW3D,EAAU,UAAA,KAAK,CACtB,OAAAC,EACA,SAAAC,GACA,KAAM,oBACV,CAAC,EACD,UAAW,CACP,YAAa8C,EAAAA,QAAQ,KACzB,CACJ,CAAC,CACL,CAOO,MACH3B,EACAC,EACAC,EACAC,EAEJ,CAEI,MAAMoC,EAAcvC,EAAc,kBAAkB,YAE9CwC,EAAoBhC,EAAAA,YAAY,mBAAmBP,CAAK,EAE9D,MAAM,MAAMD,EAAeuC,EAAaC,EAAmB,EAAI,EAE/D,KAAK,WAAW,UAAU,YAAcA,EAAkB,OAC1D,KAAK,WAAW,MAAMxC,EAAeC,EAAOC,EAAQC,CAAS,EAE7DK,EAAAA,YAAY,cAAcgC,CAAiB,CAC/C,CAEU,eACV,CACI,KAAK,QAAU,CACnB,CACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0YCtCO,MAAMC,GAAN,MAAMA,WAAoBtE,EAAAA,MACjC,CA2BI,YAAYC,EACZ,CA9EJ,IAAAsB,EAAAC,EA+EQvB,EAAUC,GAAAkB,GAAA,CAAA,EAAKkD,GAAY,eAAoBrE,EAAAA,CAAAA,EAE/C,MAAME,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,cACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,cAAe,CACX,YAAa,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EAC7D,YAAa,CAAE,MAAON,EAAQ,WAAY,KAAM,KAAM,EACtD,aAAc,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EAC9D,aAAc,CAAE,MAAOA,EAAQ,YAAa,KAAM,KAAM,EACxD,WAAY,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,CAChE,CACJ,EAIA,QAAS,CACb,CAAC,EArDLU,EAAA,KAAO,YAQPA,EAAA,KAAQ,cACRA,EAAA,KAAQ,WACRA,EAAAA,EAAA,KAAQ,aAAA,EACRA,EAAA,KAAQ,cAAA,EA4CJ,KAAK,SAAW,KAAK,UAAU,cAAc,SAC7C,KAAK,YAAc,IAAIoD,QACvB,KAAK,aAAe,IAAIA,EACxB,MAAA,KAAK,YAAaxC,EAAAtB,EAAQ,aAAR,KAAAsB,EAAsB,SACxC,KAAK,aAAcC,EAAAvB,EAAQ,cAAR,KAAAuB,EAAuB,EAE1C,OAAO,OAAO,KAAMvB,CAAO,CAC/B,CAMA,IAAI,UAAmB,CAAE,OAAO,KAAK,UAAYsE,YAAY,CAC7D,IAAI,SAAS3D,EACb,CACI,KAAK,UAAYA,EAAQ2D,EACzB,WAAA,KAAK,iBACT,CAAA,CAMA,IAAI,WAAoB,CAAE,OAAO,KAAK,UAAY,CAClD,IAAI,UAAU3D,EACd,CACI,KAAK,WAAaA,EAClB,KAAK,iBAAA,CACT,CAOA,IAAI,YAA0B,CAAE,OAAO,KAAK,YAAY,KAAsB,CAC9E,IAAI,WAAWA,EACf,CACI,KAAK,YAAY,SAASA,CAAK,EAC/B,KAAM,CAAChB,EAAGJ,EAAGF,CAAC,EAAI,KAAK,YAAY,UAEnC,KAAK,SAAS,YAAY,CAAC,EAAIM,EAC/B,KAAK,SAAS,YAAY,CAAC,EAAIJ,EAC/B,KAAK,SAAS,YAAY,CAAC,EAAIF,CACnC,CAMA,IAAI,YAAqB,CAAE,OAAO,KAAK,SAAS,WAAa,CAC7D,IAAI,WAAWsB,EAAe,CAAE,KAAK,SAAS,YAAcA,CAAO,CAMnE,IAAI,aAA2B,CAAE,OAAO,KAAK,aAAa,KAAsB,CAChF,IAAI,YAAYA,EAChB,CACI,KAAK,aAAa,SAASA,CAAK,EAChC,KAAM,CAAChB,EAAGJ,EAAGF,CAAC,EAAI,KAAK,aAAa,UAEpC,KAAK,SAAS,aAAa,CAAC,EAAIM,EAChC,KAAK,SAAS,aAAa,CAAC,EAAIJ,EAChC,KAAK,SAAS,aAAa,CAAC,EAAIF,CACpC,CAMA,IAAI,aAAsB,CAAE,OAAO,KAAK,SAAS,YAAc,CAC/D,IAAI,YAAYsB,EAAe,CAAE,KAAK,SAAS,aAAeA,CAAO,CAM7D,kBACR,CACI,KAAK,SAAS,WAAW,CAAC,EAAI,KAAK,UAAY,KAAK,IAAI,KAAK,SAAS,EACtE,KAAK,SAAS,WAAW,CAAC,EAAI,KAAK,UAAY,KAAK,IAAI,KAAK,SAAS,CAC1E,CACJ,EArJID,EAHS2D,GAGc,kBAAsC,CACzD,SAAU,GACV,UAAW,EACX,WAAY,SACZ,WAAY,GACZ,YAAa,EACb,YAAa,EACjB,CAVG,EAAA,IAAME,GAANF,keCFA,MAAMG,GAAN,MAAMA,WAAoBC,EAAAA,WACjC,CA2BI,eAAepD,EACf,CA5EJ,IAAAC,EA6EQ,IAAItB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,CAAA,EAEzB,GAAI,OAAOtB,GAAY,UAAY,MAAM,QAAQA,CAAO,GAAM,MAAOA,GAAW,MAAOA,EACvF,CAEIyB,cAAY,QAAS,kHAAkH,EAEvI,IAAIiD,EAAW1E,EAEX,MAAM,QAAQ0E,CAAQ,IAAGA,EAAW,CAAE,EAAGA,EAAS,CAAC,EAAG,EAAGA,EAAS,CAAC,CAAE,GAEzE1E,EAAU,CAAE,SAAA0E,CAAS,EAEjBrD,EAAK,CAAC,IAAM,SAAWrB,EAAQ,QAAUqB,EAAK,CAAC,GAC/CA,EAAK,CAAC,IAAM,SAAWrB,EAAQ,WAAaqB,EAAK,CAAC,GAClDA,EAAK,CAAC,IAAM,SAAWrB,EAAQ,WAAaqB,EAAK,CAAC,EAC1D,CAEArB,EAAUC,IAAA,GAAKuE,GAAY,iBAAoBxE,CAE/C,EAAA,QAxCJU,EAAA,KAAQ,gBACRA,EAAA,KAAQ,gBACRA,EAAA,KAAQ,aAwCJ,KAAK,UAAY,CAAE,EAAG,EAAG,EAAG,CAAE,EAE1BV,EAAQ,WAEJ,OAAOA,EAAQ,UAAa,UAE5B,KAAK,UAAU,EAAIA,EAAQ,SAC3B,KAAK,UAAU,EAAIA,EAAQ,WAI3B,KAAK,UAAU,EAAIA,EAAQ,SAAS,EACpC,KAAK,UAAU,EAAIA,EAAQ,SAAS,IAI5C,KAAK,aAAe,IAAI2E,EAAeC,eAAAA,GAAA3E,EAAA,CAAA,EAChCD,CAAAA,EADgC,CAEnC,WAAY,GACZ,SAAU,KAAK,SACnB,EAAC,EAED,KAAK,aAAe,IAAI2E,EAAAA,eAAeC,GAAA3E,EAAA,CAChCD,EAAAA,CAAAA,EADgC,CAEnC,WAAY,GACZ,SAAU,KAAK,SACnB,EAAC,EAED,KAAK,aAAa,UAAY,SAE9B,OAAO,OAAO,KAAMA,CAAO,CAC/B,CAOgB,MACZ4B,EACAC,EACAC,EACA+C,EAEJ,CACI,MAAM1C,EAAeC,EAAAA,YAAY,mBAAmBP,CAAK,EAEzDD,EAAc,YAAY,KAAMC,EAAOC,EAAQ+C,CAAK,EACpD,KAAK,aAAa,MAAMjD,EAAeC,EAAOM,EAAc,EAAI,EAChE,KAAK,aAAa,MAAMP,EAAeO,EAAcL,EAAQ,EAAK,EAElEM,EAAAA,YAAY,cAAcD,CAAY,CAC1C,CAMA,IAAI,UAAsB,CAAE,OAAO,KAAK,SAAW,CACnD,IAAI,SAASxB,EACb,CACI,KAAK,UAAY,OAAOA,GAAU,SAAW,CAAE,EAAGA,EAAO,EAAGA,CAAM,EAAIA,EACtE,KAAK,gBACT,CAAA,CAMA,IAAI,WAAoB,CAAE,OAAO,KAAK,SAAS,CAAG,CAClD,IAAI,UAAUA,EACd,CACI,KAAK,SAAS,EAAIA,EAClB,KAAK,iBACT,CAMA,IAAI,WAAoB,CAAE,OAAO,KAAK,SAAS,CAAG,CAClD,IAAI,UAAUA,EACd,CACI,KAAK,SAAS,EAAIA,EAClB,KAAK,gBAAA,CACT,CAEQ,iBACR,CACI,KAAK,aAAa,KAAO,KAAK,UAC9B,KAAK,aAAa,KAAO,KAAK,SAClC,CASA,IAAI,MACJ,CACI,OAAAc,EAAAA,YAAY,QAAS,yEAAyE,EAEvF,KAAK,SAChB,CACA,IAAI,KAAKd,EACT,CACIc,EAAY,YAAA,QAAS,yEAAyE,EAE9F,KAAK,SAAWd,CACpB,CASA,IAAI,OACJ,CACI,OAAAc,cAAY,QAAS,2EAA2E,EAEzF,KAAK,SAChB,CACA,IAAI,MAAMd,EACV,CACIc,EAAAA,YAAY,QAAS,2EAA2E,EAEhG,KAAK,UAAYd,CACrB,CASA,IAAI,OACJ,CACI,OAAAc,EAAY,YAAA,QAAS,2EAA2E,EAEzF,KAAK,SAChB,CACA,IAAI,MAAMd,EACV,CACIc,EAAY,YAAA,QAAS,2EAA2E,EAEhG,KAAK,UAAYd,CACrB,CACJ,EAzMID,EAHS8D,GAGc,kBAAsC,CACzD,SAAU,CAAE,EAAG,EAAG,EAAG,CAAE,EACvB,QAAS,EACT,WAAY,EACZ,WAAY,CAChB,CARG,EAAA,IAAMM,GAANN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GC/CPtD,GAAA,OAAA,eAAA5B,GAAA,OAAA,sBAAAgE,GAAA,OAAA,UAAA,eAAA/D,GAAA,OAAA,UAAA,qBAAA4B,GAAA,CAAAzB,EAAAC,EAAAsB,IAAAtB,KAAAD,EAAAwB,GAAAxB,EAAAC,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAsB,CAAA,CAAA,EAAAvB,EAAAC,CAAA,EAAAsB,EAAApB,GAAA,CAAAH,EAAAC,IAAA,CAAA,QAAAsB,KAAAtB,IAAAA,EAAA,IAAA2D,GAAA,KAAA3D,EAAAsB,CAAA,GAAAE,GAAAzB,EAAAuB,EAAAtB,EAAAsB,CAAA,CAAA,EAAA,GAAA3B,GAAA,QAAA2B,KAAA3B,GAAAK,CAAA,EAAAJ,GAAA,KAAAI,EAAAsB,CAAA,GAAAE,GAAAzB,EAAAuB,EAAAtB,EAAAsB,CAAA,CAAA,EAAA,OAAAvB,CAAA,EAAAwD,GAAA,CAAAxD,EAAAC,EAAAsB,KAAAE,GAAAzB,EAAA,OAAAC,GAAA,SAAAA,EAAA,GAAAA,EAAAsB,CAAA,EAAAA,GAoCO,MAAM8D,GAAN,MAAMA,WAAyBhF,EAAAA,MACtC,CAkBI,YAAYC,EACZ,CACIA,EAAUC,GAAAA,GAAA,GAAK8E,GAAiB,iBAAoB/E,CAEpD,EAAA,MAAME,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EACKC,EAAYC,YAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,oBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,mBAAoB,CAChB,YAAa,CAAE,MAAO,CAAC,EAAG,CAAC,EAAG,KAAM,WAAY,EAChD,QAAS,CAAE,MAAON,EAAQ,OAAQ,KAAM,WAAY,EACpD,QAAS,CAAE,MAAOA,EAAQ,OAAQ,KAAM,KAAM,EAC9C,UAAW,CAAE,MAAOA,EAAQ,SAAU,KAAM,KAAM,CACtD,CACJ,CACJ,CAAC,EAzCLU,GAAA,KAAO,UAAA,EA2CH,KAAK,SAAW,KAAK,UAAU,mBAAmB,SAElD,OAAO,OAAO,KAAMV,CAAO,CAC/B,CAOO,MACH4B,EACAC,EACAC,EACAC,EAEJ,CACI,KAAK,SAAS,YAAY,CAAC,EAAIF,EAAM,MAAM,MAC3C,KAAK,SAAS,YAAY,CAAC,EAAIA,EAAM,MAAM,OAE3CD,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAS,CAC5D,CAOA,IAAI,QAAoB,CAAE,OAAO,KAAK,SAAS,OAAS,CACxD,IAAI,OAAOpB,EACX,CACQ,OAAOA,GAAU,WAEjBA,EAAQ,CAAE,EAAGA,EAAO,EAAGA,CAAM,GAG7B,MAAM,QAAQA,CAAK,IAEnBA,EAAQ,CAAE,EAAGA,EAAM,CAAC,EAAG,EAAGA,EAAM,CAAC,CAAE,GAGvC,KAAK,SAAS,QAAUA,CAC5B,CAMA,IAAI,SAAkB,CAAE,OAAO,KAAK,SAAS,QAAQ,CAAG,CACxD,IAAI,QAAQA,EAAe,CAAE,KAAK,SAAS,QAAQ,EAAIA,CAAO,CAM9D,IAAI,SAAkB,CAAE,OAAO,KAAK,SAAS,QAAQ,CAAG,CACxD,IAAI,QAAQA,EAAe,CAAE,KAAK,SAAS,QAAQ,EAAIA,CAAO,CAM9D,IAAI,QAAiB,CAAE,OAAO,KAAK,SAAS,OAAS,CACrD,IAAI,OAAOA,EAAe,CAAE,KAAK,SAAS,QAAUA,CAAO,CAM3D,IAAI,UAAmB,CAAE,OAAO,KAAK,SAAS,SAAW,CACzD,IAAI,SAASA,EAAe,CAAE,KAAK,SAAS,UAAYA,CAAO,CACnE,EAxHID,GAHSqE,GAGc,kBAA2C,CAC9D,OAAQ,CAAE,EAAG,GAAK,EAAG,EAAI,EACzB,OAAQ,IACR,SAAU,CACd,CAAA,MAPSC,GAAND;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;88BChCHE,EAAkBA,GAAkB,CAAA,EAExCA,EAAe,UAAa,UAAW,CAErC,IAAIC,EAAU,CAEZ,wBAAyB,SAASC,EAAM,CACtC,OAAOD,EAAQ,eAAeC,CAAI,CACnC,EAED,kCAAmC,SAASA,EAAM,CAChD,OAAOD,EAAQ,eAAeC,CAAI,CACnC,EAED,wBAAyB,SAASA,EAAM,CACtC,OAAOD,EAAQ,eAAeC,CAAI,CACnC,EAED,kCAAmC,SAASA,EAAM,CAChD,OAAOD,EAAQ,eAAeC,CAAI,CACnC,EAED,eAAkB,SAASA,EAAM,CAC/B,IAAIC,EAAcF,EAAQ,MAAMC,EAAK,WAAW,EAChD,OAAIC,IACFA,GAAe,MAGVD,EAAK,KAAO,IAAMC,EAAcF,EAAQ,MAAMC,EAAK,UAAU,EAAI,GACzE,EAED,YAAe,SAASA,EAAM,CAC5B,IAAIE,EAASF,EAAK,MACdG,EAAKJ,EAAQ,MAAMC,EAAK,EAAE,EAC1BI,EAAQL,EAAQ,MAAMC,EAAK,KAAK,EAEpC,OAAII,IACFF,GAAU,IAAME,GAGdD,IACFD,GAAU,OAASC,GAGdD,CACR,EAED,uBAAwB,SAASF,EAAM,CACrC,IAAIE,EAAS,GACTC,EAAKJ,EAAQ,MAAMC,EAAK,EAAE,EAE9B,OAAIG,IACFD,GAAUC,GAELD,CACR,EAED,uBAAwB,SAASF,EAAM,CACrC,IAAIE,EAASF,EAAK,MACdG,EAAKJ,EAAQ,MAAMC,EAAK,EAAE,EAE9B,OAAIG,IACFD,GAAU,OAASC,GAGdD,CACR,EAED,yBAA0B,SAASF,EAAM,CACvC,OAAOA,EAAK,KACb,EAED,eAAkB,SAASA,EAAM,CAC/B,OAAOD,EAAQ,MAAMC,EAAK,MAAM,CAAC,EAAI,IAAMD,EAAQ,MAAMC,EAAK,MAAM,CAAC,CACtE,EAED,UAAW,SAASA,EAAM,CACxB,OAAOA,EAAK,MAAQ,GACrB,EAED,SAAY,SAASA,EAAM,CACzB,OAAOA,EAAK,MAAQ,IACrB,EAED,SAAY,SAASA,EAAM,CACzB,OAAOA,EAAK,MAAQ,IACrB,EAED,cAAiB,SAASA,EAAM,CAC9B,OAAOD,EAAQ,YAAYC,EAAK,MAAOA,CAAI,CAC5C,EAED,UAAa,SAASA,EAAM,CAC1B,OAAOD,EAAQ,YAAY,IAAMC,EAAK,MAAOA,CAAI,CAClD,EAED,UAAa,SAASA,EAAM,CAC1B,OAAOD,EAAQ,YAAY,OAASC,EAAK,MAAM,KAAK,IAAI,EAAI,IAAKA,CAAI,CACtE,EAED,WAAc,SAASA,EAAM,CAC3B,OAAOD,EAAQ,YAAY,QAAUC,EAAK,MAAM,KAAK,IAAI,EAAI,IAAKA,CAAI,CACvE,EAED,YAAe,SAASK,EAAaL,EAAM,CACzC,IAAIE,EAASG,EACTC,EAASP,EAAQ,MAAMC,EAAK,MAAM,EAEtC,OAAIM,IACFJ,GAAU,IAAMI,GAEXJ,CACR,EAED,cAAiB,SAASF,EAAM,CAC9B,OAAOA,EAAK,MAAQ,KACrB,EAED,kBAAqB,SAASA,EAAM,CAClC,MAAO,MAAQA,EAAK,KACrB,EAED,YAAe,SAASO,EAAU,CAChC,IAAIL,EAAS,GACTM,EAAOD,EAAS,OAEpB,OAAAA,EAAS,QAAQ,SAASE,EAASpD,EAAG,CACpC6C,GAAUH,EAAQ,MAAMU,CAAO,EAC3BpD,EAAImD,EAAO,IACbN,GAAU,KAEpB,CAAO,EAEMA,CACR,EAED,MAAS,SAASO,EAAS,CACzB,GAAI,CAACA,EACH,MAAO,GAET,IAAIP,EAAS,GAEb,GAAIO,aAAmB,MACrB,OAAOV,EAAQ,YAAYU,EAASP,CAAM,EACrC,GAAIO,EAAQ,KAAM,CACvB,IAAIC,EAAcX,EAAQ,SAAWU,EAAQ,IAAI,EACjD,GAAIC,EACF,OAAOA,EAAYD,CAAO,EAE1B,MAAM,MAAM,yBAA2BA,EAAQ,IAAI,CAE7D,KACQ,OAAM,MAAM,eAAe,CAE9B,CAEL,EAEE,OAAO,SAASE,EAAM,CACpB,OAAOZ,EAAQ,MAAMY,CAAI,CAC7B,CACA,IAMA,IAAIb,EAAkBA,GAAkB,CAAA,EAExCA,EAAe,MAAS,UAAW,CAEjC,IAAIc,EAAS,CACX,eAAgB,+CAChB,wBAAyB,0DACzB,eAAgB,+CAChB,wBAAyB,0DACzB,aAAc,oEACd,eAAgB,iFAChB,iBAAkB,mCAClB,WAAY,wCACZ,gBAAiB,wCACjB,QAAS,wCACT,WAAY,yCACZ,UAAW,MACX,QAAS,MACT,MAAO,KACP,SAAU,oBACV,aAAc,eACd,SAAU,QACV,UAAW,SACX,OAAQ,iCACZ,EAEMlE,EAAQ,GAEZ,SAASmE,EAAMC,EAAK,CAClB,IAAIC,EAAM,IAAI,MAAMrE,EAAQ,KAAOoE,CAAG,EACtC,MAAAC,EAAI,OAASrE,EACPqE,CACP,CAED,SAASC,GAAS,CAChB,IAAIC,EAAMC,IAEV,OAAIxE,EAAM,OAAS,GACjBmE,EAAM,uBAAuB,EAGxBI,CACR,CAED,SAASC,GAAuB,CAC9B,OAAOC,EAAaC,CAAe,CACpC,CAED,SAASA,GAAkB,CACzB,OAAOC,EACC,kBACAT,EAAO,eACPU,CAAsB,GAExBD,EACE,4BACAT,EAAO,wBACPU,CAAsB,GAExBD,EACE,kBACAT,EAAO,eACPW,CAA2B,GAE7BF,EACE,4BACAT,EAAO,wBACPW,CAA2B,CACpC,CAED,SAASF,EAAcG,EAAcC,EAASC,EAAoB,CAChE,OAAOC,EAAUF,EAAS,SAASG,EAAU,CAE3C,IAAI3B,GAAcyB,IAClB,OAAIzB,KACG4B,EAAKjB,EAAO,KAAK,GACpBC,EAAM,kCAAkC,GAIrC,CACL,KAAMW,EACN,YAAavB,GACb,WAAYkB,EAAaW,EAAc,CAC/C,CACA,CAAK,CACF,CAED,SAASH,EAAUF,EAASM,EAAU,CACpC,IAAIH,EAAWC,EAAKJ,CAAO,EAE3B,GAAIG,EAAU,CACPC,EAAKjB,EAAO,SAAS,GACxBC,EAAM,WAAW,EAGnB,IAAIX,EAAS6B,EAASH,CAAQ,EAE9B,OAAKC,EAAKjB,EAAO,OAAO,GACtBC,EAAM,WAAW,EAGZX,CACR,CACF,CAED,SAASoB,GAAyB,CAChC,OAAOU,EAAmB,GACxBC,GACH,CAED,SAASD,GAAoB,CAC3B,OAAOE,EAAM,cAAetB,EAAO,aAAc,CAAC,CACnD,CAED,SAASqB,GAAa,CACpB,OAAOC,EAAM,UAAWtB,EAAO,WAAY,CAAC,CAC7C,CAED,SAASW,GAA8B,CACrC,IAAIY,EACAC,EAAoBC,EAAwB,EAC5CC,EAEJ,OAAIF,IACFD,EAAqB,CAAA,EACrBA,EAAmB,KAAKC,CAAiB,EAEzCE,EAAiB5F,EACbmF,EAAKjB,EAAO,KAAK,IACnBwB,EAAoBC,EAAsB,EACtCD,EACFD,EAAmB,KAAKC,CAAiB,EAEzC1F,EAAQ4F,IAKPH,CACR,CAED,SAASE,GAAyB,CAChC,IAAIE,EAAaC,EAAa,GAC5BC,KAEF,GAAIF,EACFA,EAAW,GAAKG,SACX,CACL,IAAIC,EAASC,KACb,GAAID,EAAQ,CACVJ,EAAaI,EACb,IAAIE,EAAaH,KACbG,IACFN,EAAW,GAAKM,EAE1B,KAAa,CACL,IAAIC,EAAkBC,KAClBD,IACFP,EAAa,CACX,KAAM,iBACN,GAAIO,CAChB,EAEO,CACF,CAED,OAAOP,CACR,CAED,SAASC,GAAc,CACrB,IAAIQ,EAASd,EAAM,QAAS,aAAc,CAAC,EAE3C,OAAIc,IACFA,EAAO,MAAQC,GAAa,GAAIL,GAAkB,GAG7CI,CACR,CAED,SAASP,IAAe,CACtB,IAAIS,EAAUhB,EAAM,QAAS,cAAe,CAAC,EAE7C,OAAIgB,IACFA,EAAQ,MAASC,EAAe,GAAIP,GAAkB,GAGjDM,CACR,CAED,SAASN,IAAqB,CAC5B,OAAOV,EAAM,iBAAkBtB,EAAO,eAAgB,CAAC,CACxD,CAED,SAAS8B,IAAkB,CACzB,GAAIR,EAAM,WAAY,MAAO,CAAC,EAAG,CAC/B,IAAIkB,EAAcL,KAElB,OAAKK,GACHvC,EAAM,2BAA2B,EAG5BuC,CACR,CACF,CAED,SAASL,IAAmB,CAC1B,IAAIM,EAAWC,KAEf,GAAID,EAAS,GAAKA,EAAS,EACzB,MAAO,CACL,KAAM,WACN,MAAOA,CACf,CAEG,CAED,SAASC,IAAmB,CAC1B,MAAO,CACL,EAAGH,EAAe,EAClB,EAAGA,EAAe,CACxB,CACG,CAED,SAAShC,EAAaoC,EAAS,CAC7B,IAAI3B,EAAW2B,EAAS,EACtBrD,EAAS,CAAA,EAEX,GAAI0B,EAEF,IADA1B,EAAO,KAAK0B,CAAQ,EACbC,EAAKjB,EAAO,KAAK,GACtBgB,EAAW2B,EAAO,EACd3B,EACF1B,EAAO,KAAK0B,CAAQ,EAEpBf,EAAM,iBAAiB,EAK7B,OAAOX,CACR,CAED,SAAS4B,IAAiB,CACxB,IAAI0B,EAAQC,KAEZ,OAAKD,GACH3C,EAAM,2BAA2B,EAGnC2C,EAAM,OAASL,IACRK,CACR,CAED,SAASC,IAAa,CACpB,OAAOC,GAAe,GACpBC,GAAgB,GAChBC,GAAe,GACfC,IACH,CAED,SAASA,IAAoB,CAC3B,OAAO3B,EAAM,UAAWtB,EAAO,aAAc,CAAC,CAC/C,CAED,SAAS8C,IAAgB,CACvB,OAAOxB,EAAM,MAAOtB,EAAO,SAAU,CAAC,CACvC,CAED,SAASgD,IAAgB,CACvB,OAAOjC,EAAUf,EAAO,SAAU,UAAW,CAC3C,MAAQ,CACN,KAAM,MACN,MAAOO,EAAa2C,EAAW,CACvC,CACA,CAAK,CACF,CAED,SAASH,IAAiB,CACxB,OAAOhC,EAAUf,EAAO,UAAW,UAAW,CAC5C,MAAQ,CACN,KAAM,OACN,MAAOO,EAAa2C,EAAW,CACvC,CACA,CAAK,CACF,CAED,SAASA,IAAc,CACrB,OAAOjC,EAAKjB,EAAO,MAAM,EAAE,CAAC,CAC7B,CAED,SAASuC,GAAgB,CACvB,OAAOjB,EAAM,IAAKtB,EAAO,gBAAiB,CAAC,GACzCmD,GAAsB,GACtBd,IACH,CAED,SAASc,IAAuB,CAC9B,OAAO7B,EAAM,mBAAoBtB,EAAO,iBAAkB,CAAC,CAC5D,CAED,SAASqC,IAAc,CACrB,OAAOf,EAAM,KAAMtB,EAAO,WAAY,CAAC,GACrCsB,EAAM,KAAMtB,EAAO,QAAS,CAAC,CAChC,CAED,SAASsB,EAAM8B,EAAMvC,EAASwC,EAAc,CAC1C,IAAIrC,EAAWC,EAAKJ,CAAO,EAC3B,GAAIG,EACF,MAAO,CACL,KAAMoC,EACN,MAAOpC,EAASqC,CAAY,CACpC,CAEG,CAED,SAASpC,EAAKqC,EAAQ,CACpB,IAAItC,EACAuC,EAEJ,OAAAA,EAAgB,eAAe,KAAKzH,CAAK,EACrCyH,GACAC,GAAQD,EAAc,CAAC,EAAE,MAAM,EAGnCvC,EAAWsC,EAAO,KAAKxH,CAAK,EACxBkF,GACAwC,GAAQxC,EAAS,CAAC,EAAE,MAAM,EAGvBA,CACR,CAED,SAASwC,GAAQ5D,EAAM,CACrB9D,EAAQA,EAAM,OAAO8D,CAAI,CAC1B,CAED,OAAO,SAAS6D,EAAM,CACpB,OAAA3H,EAAQ2H,EAAK,WACNrD,EAAM,CACjB,CACA,IAEA,IAAAsD,GAAAtE,GAAA,MAAgBF,EAAe,MACdyE,GAAAvE,GAAA,UAAGF,EAAe,UChfnB,SAAA0E,GAAiBC,EACjC,CACI,MAAMC,EAAmCJ,GAAMK,GAAgBF,CAAW,CAAC,EAE3E,GAAIC,EAAiB,SAAW,EAE5B,MAAM,IAAI,MAAM,uBAAuB,EAEtC,GAAIA,EAAiB,SAAW,EAEjC,MAAM,IAAI,MAAM,iEAAiE,EAGrF,MAAME,EAAkBF,EAAiB,CAAC,EAEpCV,EAAOa,GAAgBD,EAAgB,IAAI,EAC3CE,EAAQC,GAAkBH,EAAgB,UAAU,EACpDI,EAAQC,GAAwBL,EAAgB,WAAW,EAEjE,MAAO,CACH,KAAAZ,EACA,MAAAc,EACA,MAAAE,CACJ,CACJ,CAEO,SAASH,GAAgBb,EAChC,CACI,MAAMkB,EAA4C,CAC9C,kBAAmB,EACnB,kBAAmB,CACvB,EAEA,GAAI,EAAElB,KAAQkB,GAEV,MAAM,IAAI,MAAM,8BAA8BlB,CAAI,GAAG,EAGzD,OAAOkB,EAAelB,CAAI,CAC9B,CAEO,SAASe,GAAkBD,EAClC,CACI,MAAMK,EAAoBC,GAAyBN,CAAK,EAClD5E,EAAsB,CACtBsD,EAAAA,EAAQ,IAAI7E,QAElB,QAAStB,EAAI,EAAGA,EAAIyH,EAAM,OAAQzH,IAClC,CACI,MAAMgI,EAAcC,GAAyBR,EAAMzH,CAAC,CAAC,EAC/CkI,EAAY/B,EAAM,SAAS6B,CAAW,EAAE,QAAA,EAE9CnF,EAAO,KAAK,CACR,OAAQiF,EAAQ9H,CAAC,EACjB,MAAOkI,EAAU,MAAM,EAAG,CAAC,EAC3B,MAAOA,EAAU,CAAC,CACtB,CAAC,CACL,CAEA,OAAOrF,CACX,CAEgB,SAAAoF,GAAyBE,EACzC,CACI,OAAQA,EAAK,MAET,IAAK,MACD,MAAO,IAAIA,EAAK,KAAK,GACzB,IAAK,UACD,OAAOA,EAAK,MAChB,QACI,MAAO,GAAGA,EAAK,IAAI,IAAIA,EAAK,MAAM,KAAK,GAAG,CAAC,GACnD,CACJ,CAEO,SAASJ,GAAyBN,EACzC,CACI,MAAMK,EAAoB,CAAA,EAG1B,QAAS9H,EAAI,EAAGA,EAAIyH,EAAM,OAAQzH,IAClC,CACI,MAAMoI,EAAUX,EAAMzH,CAAC,EACvB,IAAIqI,EAAa,GAEbD,EAAQ,OAAS,WAEbA,EAAQ,QAAU,SAAUA,EAAQ,QAAUA,EAAQ,OAAO,OAAS,KAAO,UAAWA,EAAQ,SAEhGC,EAAa,WAAWD,EAAQ,OAAO,KAAK,EAAI,KAIxDN,EAAQ,KAAKO,CAAU,CAC3B,CAEA,MAAMC,EAAqBC,GAC3B,CACI,QAASjI,EAAIiI,EAAWjI,EAAIwH,EAAQ,OAAQxH,IAExC,GAAIwH,EAAQxH,CAAC,IAAM,GAEf,MAAO,CACH,WAAYA,EAAIiI,EAChB,OAAQT,EAAQxH,CAAC,CACrB,EAIR,MAAO,CACH,WAAawH,EAAQ,OAAS,EAAKS,EACnC,OAAQ,CACZ,CACJ,EAEA,IAAIC,EAAkB,EAEtB,QAASxI,EAAI,EAAGA,EAAI8H,EAAQ,OAAQ9H,IACpC,CACI,MAAMN,EAASoI,EAAQ9H,CAAC,EAExB,GAAIN,IAAW,GAEX8I,EAAkB9I,UAEbM,IAAM,EAEX8H,EAAQ9H,CAAC,EAAI,UAERA,EAAI,IAAM8H,EAAQ,OAEvBA,EAAQ9H,CAAC,EAAI,MAGjB,CACI,MAAMyI,EAAYH,EAAkBtI,CAAC,EAE/B0I,GADcD,EAAU,OAASD,IACP,EAAIC,EAAU,YAE9C,QAASrL,EAAI,EAAGA,GAAKqL,EAAU,WAAYrL,IAEvC0K,EAAQ9H,EAAI5C,CAAC,EAAIoL,GAAoBpL,EAAI,GAAKsL,EAGlD1I,GAAKyI,EAAU,WACfD,EAAkBV,EAAQ9H,CAAC,CAC/B,CACJ,CAEA,OAAO8H,EAAQ,IAAIa,EAAgB,CACvC,CAGA,SAASA,GAAiBxK,EAC1B,CAGI,OAAIA,EAAM,SAAS,EAAE,OAAS,EAEnB,WAAWA,EAAM,SAAS,EAAE,UAAU,EAAG,CAAS,CAAC,EAGvDA,CACX,CAIgB,SAAAyJ,GAAwBhF,EACxC,CACI,GAAI,OAAOA,GAAgB,YAEvB,MAAO,GAGX,GAAI,SAAUA,GAAe,UAAWA,EAEpC,OAAQA,EAAY,KAAA,CAEhB,IAAK,UACD,OAAO,WAAWA,EAAY,KAAK,EACvC,IAAK,cACD,OAAOgG,GAA0BhG,EAAY,KAAK,CAC1D,CAGJ,MAAO,EACX,CAEO,SAASgG,GAA0BzK,EAC1C,CACI,MAAM0K,EAA6C,CAC/C,KAAM,IACN,IAAK,EACL,OAAQ,IACR,MAAO,GACP,WAAY,IACZ,WAAY,IACZ,cAAe,IACf,cAAe,IACf,YAAa,GACb,YAAa,GACb,eAAgB,IAChB,eAAgB,GACpB,EAEA,GAAI,EAAE1K,KAAS0K,GAEX,MAAM,IAAI,MAAM,kCAAkC1K,CAAK,GAAG,EAG9D,OAAO0K,EAAgB1K,CAAK,CAChC,CAEgB,SAAAmJ,GAAgBnJ,EAChC,CACI,IAAI2K,EAAS3K,EAAM,QAAQ,WAAY,GAAG,EAE1C,OAAA2K,EAASA,EAAO,QAAQ,KAAM,EAAE,EAChCA,EAASA,EAAO,QAAQ,MAAO,GAAG,EAClCA,EAASA,EAAO,QAAQ,OAAQ,GAAG,EACnCA,EAASA,EAAO,QAAQ,OAAQ,GAAG,EAE5BA,EAAO,KAClB,CAAA,CClPA,IAAAC,GAAA,OAAA,eAAAC,GAAA,OAAA,iBAAAC,GAAA,OAAA,0BAAApM,GAAA,OAAA,sBAAAqM,GAAA,OAAA,UAAA,eAAAC,GAAA,OAAA,UAAA,qBAAAzK,GAAA,CAAA,EAAAgC,EAAAtD,IAAAsD,KAAA,EAAAqI,GAAA,EAAArI,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAtD,CAAA,CAAA,EAAA,EAAAsD,CAAA,EAAAtD,EAAAC,GAAA,CAAA,EAAAqD,IAAA,CAAA,QAAAtD,KAAAsD,IAAAA,EAAA,CAAA,GAAAwI,GAAA,KAAAxI,EAAAtD,CAAA,GAAAsB,GAAA,EAAAtB,EAAAsD,EAAAtD,CAAA,CAAA,EAAA,GAAAP,GAAA,QAAAO,KAAAP,GAAA6D,CAAA,EAAAyI,GAAA,KAAAzI,EAAAtD,CAAA,GAAAsB,GAAA,EAAAtB,EAAAsD,EAAAtD,CAAA,CAAA,EAAA,OAAA,CAAA,EAAA+D,GAAA,CAAA,EAAAT,IAAAsI,GAAA,EAAAC,GAAAvI,CAAA,CAAA,EAAAzD,EAAA,CAAA,EAAAyD,EAAAtD,KAAAsB,GAAA,EAAA,OAAAgC,GAAA,SAAAA,EAAA,GAAAA,EAAAtD,CAAA,EAAAA,GA+DA,MAAMgM,GAAe,GAErB,SAASC,GAAe5B,EACxB,CACI,MAAO,CAAC,GAAGA,CAAK,EAAE,KAAK,CAAC3K,EAAGD,IAAMC,EAAE,OAASD,EAAE,MAAM,CACxD,CASO,MAAMyM,EAAN,MAAMA,UAA4B/L,EACzC,MAAA,CAkCI,YAAYC,EACZ,CAjHJ,IAAAsB,EAAAC,EAAAC,EA+HQ,GAbIxB,GAAW,QAASA,EAEpBA,EAAU4E,GAAA3E,GAAA,CACH0J,EAAAA,GAAiB3J,EAAQ,KAAO,EAAE,CAAA,EAD/B,CAEN,OAAOsB,EAAAtB,EAAQ,QAAR,KAAAsB,EAAiBwK,EAAoB,SAAS,MACrD,WAAWvK,EAAAvB,EAAQ,YAAR,KAAAuB,EAAqBuK,EAAoB,SAAS,SACjE,CAAA,EAIA9L,EAAUC,GAAAA,GAAA,CAAA,EAAK6L,EAAoB,QAAa9L,EAAAA,CAAAA,EAGhD,CAACA,EAAQ,OAASA,EAAQ,MAAM,OAAS,EAEzC,MAAM,IAAI,MAAM,sDAAsD,EAG1E,MAAME,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAAE,GACA,WAAY,YAChB,EACA,SAAU,CACN,OAAAA,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,GACA,SAAAC,GACA,KAAM,uBACV,CAAC,EAEKsL,EAAW,GAEjB,MAAM,CACF,WAAA7L,EACA,UAAAI,EACA,UAAW,CACP,aAAc,CACV,SAAU,CACN,MAAO,CAEHN,EAAQ,MAERwB,EAAAxB,EAAQ,QAAR,KAAAwB,EAAiBoK,GAEjB5L,EAAQ,MAERA,EAAQ,QAAU,EAAI,CAC1B,EACA,KAAM,WACV,EACA,QAAS,CACL,MAAO,CAEHA,EAAQ,MAAM,OAEdA,EAAQ,SACZ,EACA,KAAM,WACV,CACJ,EACA,cAAe,CACX,QAAS,CAAE,MAAO,IAAI,aAAa+L,EAAW,CAAC,EAAG,KAAM,YAAa,KAAMA,CAAS,EAGpF,OAAQ,CAAE,MAAO,IAAI,aAAaA,EAAW,CAAC,EAAG,KAAM,YAAa,KAAMA,CAAS,CACvF,CACJ,CACJ,CAAC,EAzFLrL,EAAA,KAAO,cAKPA,EAAAA,EAAA,KAAO,eAAA,EAKPA,EAAA,KAAQ,SAAsB,CAiF1B,CAAA,EAAA,KAAK,aAAe,KAAK,UAAU,aAAa,SAChD,KAAK,cAAgB,KAAK,UAAU,cAAc,SAElD,OAAO,OAAO,KAAMV,CAAO,CAC/B,CAEA,IAAI,OACJ,CACI,OAAO,KAAK,MAChB,CAEA,IAAI,MAAMiK,EACV,CACI,MAAM+B,EAAcH,GAAe5B,CAAK,EAClCtB,EAAQ,IAAI7E,EAClB,MAAA,IAAInE,EACAJ,EACAF,EAEJ,QAASmD,EAAI,EAAGA,EAAIwJ,EAAY,OAAQxJ,IACxC,CACImG,EAAM,SAASqD,EAAYxJ,CAAC,EAAE,KAAK,EACnC,MAAMyJ,EAAazJ,EAAI,EAEvB,CAAC7C,EAAGJ,EAAGF,CAAC,EAAIsJ,EAAM,QAAQ,EAC1B,KAAK,cAAc,QAAQsD,CAAU,EAAItM,EACzC,KAAK,cAAc,QAAQsM,EAAa,CAAC,EAAI1M,EAC7C,KAAK,cAAc,QAAQ0M,EAAa,CAAC,EAAI5M,EAE7C,KAAK,cAAc,OAAOmD,EAAI,CAAC,EAAIwJ,EAAYxJ,CAAC,EAAE,OAClD,KAAK,cAAc,OAAQA,EAAI,EAAK,CAAC,EAAIwJ,EAAYxJ,CAAC,EAAE,KAC5D,CAEA,KAAK,aAAa,QAAQ,CAAC,EAAIwJ,EAAY,OAC3C,KAAK,OAASA,CAClB,CAMA,IAAI,MAAe,CAAE,OAAO,KAAK,aAAa,SAAS,CAAC,CAAG,CAC3D,IAAI,KAAKrL,EAAe,CAAE,KAAK,aAAa,SAAS,CAAC,EAAIA,CAAO,CAMjE,IAAI,OAAgB,CAAE,OAAO,KAAK,aAAa,SAAS,CAAC,EAAIiL,EAAc,CAC3E,IAAI,MAAMjL,EAAe,CAAE,KAAK,aAAa,SAAS,CAAC,EAAIA,EAAQiL,EAAc,CAMjF,IAAI,OAAgB,CAAE,OAAO,KAAK,aAAa,SAAS,CAAC,CAAG,CAC5D,IAAI,MAAMjL,EAAe,CAAE,KAAK,aAAa,SAAS,CAAC,EAAIA,CAAO,CAMlE,IAAI,WAAoB,CAAE,OAAO,KAAK,aAAa,QAAQ,CAAC,CAAG,CAC/D,IAAI,UAAUA,EAAe,CAAE,KAAK,aAAa,QAAQ,CAAC,EAAIA,CAAO,CAOrE,IAAI,SAAmB,CAAE,OAAO,KAAK,aAAa,SAAS,CAAC,EAAI,EAAK,CACrE,IAAI,QAAQA,EAAgB,CAAE,KAAK,aAAa,SAAS,CAAC,EAAIA,EAAQ,EAAI,CAAG,CACjF,EApLID,EAHSoL,EAGO,SAAS,CACzBpL,EAAAA,EAJSoL,EAIO,SAAS,CACzBpL,EAAAA,EALSoL,EAKO,QAAQ,CAGxBpL,EAAAA,EARSoL,EAQc,WAAuC,CAC1D,KAAMA,EAAoB,OAC1B,MAAO,CACH,CAAE,OAAQ,EAAK,MAAO,SAAU,MAAO,CAAI,EAC3C,CAAE,OAAQ,EAAK,MAAO,IAAU,MAAO,CAAI,CAC/C,EACA,MAAO,EACP,MAAO,GACP,UAAW,EACX,QAAS,EACb,CAAA,MAlBSI,GAANJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0YC9CA,MAAMK,GAAN,MAAMA,WAAuBpM,EACpC,MAAA,CAsCI,eAAesB,EACf,CAvEJ,IAAAC,EAwEQ,IAAItB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,CAAA,EAezB,IAbItB,aAAmBuD,EAAAA,SAAWvD,aAAmBoM,EAAAA,iBAGjD3K,cAAY,QAAS,kGAAkG,EAEvHzB,EAAU,CAAE,SAAUA,CAAQ,EAE1BqB,EAAK,CAAC,IAAM,SAAWrB,EAAQ,QAAUqB,EAAK,CAAC,GAC/CA,EAAK,CAAC,IAAM,SAAWrB,EAAQ,IAAMqB,EAAK,CAAC,IAGnDrB,EAAUC,GAAAA,GAAA,CAAA,EAAKkM,GAAe,eAAA,EAAoBnM,GAE9C,CAACA,EAAQ,SAAU,MAAM,MAAM,4DAA4D,EAE/F,MAAME,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,kBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,iBAAkB,CACd,KAAM,CAAE,MAAON,EAAQ,IAAK,KAAM,KAAM,EACxC,MAAO,CAAE,MAAO,EAAG,KAAM,KAAM,EAC/B,WAAY,CAAE,MAAO,EAAG,KAAM,KAAM,EACpC,gBAAiB,CAAE,MAAO,EAAG,KAAM,KAAM,EACzC,gBAAiB,CAAE,MAAO,EAAG,KAAM,KAAM,CAC7C,EACA,YAAaA,EAAQ,SAAS,OAC9B,YAAaA,EAAQ,SAAS,OAAO,KACzC,CACJ,CAAC,EAhFLU,EAAA,KAAO,UAQPA,EAAAA,EAAA,KAAQ,QAAQ,CAAA,EAChBA,EAAA,KAAQ,aAAa,CACrBA,EAAAA,EAAA,KAAQ,kBAAkB,GAC1BA,EAAA,KAAQ,kBAAkB,CAAA,EAC1BA,EAAA,KAAQ,WAAW,EACnBA,EAAAA,EAAA,KAAQ,aAAyB,QACjCA,EAAAA,EAAA,KAAQ,WAoEJ,EAAA,KAAK,SAAW,KAAK,UAAU,iBAAiB,SAEhD,OAAO,OAAO,KAAMV,CAAO,CAC/B,CAGA,IAAI,KAAc,CAAE,OAAO,KAAK,SAAS,IAAM,CAC/C,IAAI,IAAIW,EAAe,CAAE,KAAK,SAAS,KAAOA,CAAO,CAMrD,IAAI,WAAoB,CAAE,OAAO,KAAK,KAAO,CAG7C,IAAI,UAA4B,CAAE,OAAO,KAAK,SAAW,CACzD,IAAI,SAASA,EACb,CACI,GAAI,CAACA,GAASA,IAAU,KAAK,SAAU,OAEvC,MAAMN,EAASM,aAAiB4C,EAAAA,QAAU5C,EAAM,OAASA,EAEzDN,EAAO,MAAM,UAAY,KAAK,WAC9BA,EAAO,oBAAsB,GAE7B,KAAK,MAAQA,EAAO,OACpB,KAAK,WAAa,EAAI,KAAK,MAC3B,KAAK,gBAAkB,KAAK,WAAa,KAAK,MAC9C,KAAK,gBAAkB,KAAK,iBAAmB,KAAK,MAAQ,GAE5D,KAAK,SAAS,MAAQ,KAAK,MAC3B,KAAK,SAAS,WAAa,KAAK,WAChC,KAAK,SAAS,gBAAkB,KAAK,gBACrC,KAAK,SAAS,gBAAkB,KAAK,gBAErC,KAAK,UAAU,YAAcA,EAC7B,KAAK,UAAYM,CACrB,CAGA,IAAI,SAAmB,CAAE,OAAO,KAAK,QAAU,CAC/C,IAAI,QAAQ0L,EACZ,CACI,KAAK,SAAWA,EAChB,KAAK,WAAaA,EAAU,UAAY,SAExC,MAAMC,EAAU,KAAK,UAEjBA,GAAWA,EAAQ,SAEnBA,EAAQ,OAAO,UAAY,KAAK,WAChCA,EAAQ,OAAO,oBAAsB,GACrCA,EAAQ,OAAO,MAAM,OAAA,EACrBA,EAAQ,OAAO,SAEvB,CAMA,gBACA,CACI,MAAMA,EAAU,KAAK,UAEjBA,GAAA,MAAAA,EAAS,SAETA,EAAQ,OAAO,OAAO,EACtB,KAAK,SAAWA,EAExB,CAMA,SACA,CAxMJ,IAAAhL,GAyMQA,EAAA,KAAK,YAAL,MAAAA,EAAgB,UAChB,MAAM,QAAA,CACV,CACJ,EA1KIZ,EAHSyL,GAGc,kBAAyC,CAC5D,SAAU5I,EAAAA,QAAQ,MAClB,QAAS,GACT,IAAK,CACT,CAPG,EAAA,IAAMgJ,GAANJ;;;;;;;;;;;;;;;;;;;;;;;;;;;0YCHA,MAAMK,GAAN,MAAMA,WAA2BzM,EACxC,MAAA,CA4BI,eAAesB,EACf,CA1DJ,IAAAC,EAAAC,EA2DQ,IAAIvB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,CAAA,GAErB,OAAOtB,GAAY,UAAY,MAAM,QAAQA,CAAO,GAAKA,aAAmB,gBAG5EyB,EAAAA,YAAY,QAAS,4FAA4F,EAEjHzB,EAAU,CAAE,MAAOA,CAAQ,EAEvBqB,EAAK,CAAC,IAAM,SAAWrB,EAAQ,MAAQqB,EAAK,CAAC,IAGrDrB,EAAUC,GAAAA,GAAA,GAAKuM,GAAmB,eAAoBxM,EAAAA,CAAAA,EAEtD,MAAME,EAAaC,EAAW,WAAA,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,sBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,qBAAsB,CAClB,OAAQ,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EACxD,OAAQ,CAAE,MAAON,EAAQ,MAAO,KAAM,KAAM,CAChD,CACJ,CACJ,CAAC,EA7DLU,GAAA,KAAO,UAKPA,EAAAA,GAAA,KAAQ,QAAA,EA0DJ,KAAK,SAAW,KAAK,UAAU,qBAAqB,SAEpD,KAAK,OAAS,IAAIoD,EAAAA,MAClB,KAAK,OAAQvC,EAAAvB,EAAQ,QAAR,KAAAuB,EAAiB,CAClC,CAOA,IAAI,OAAqB,CAAE,OAAO,KAAK,OAAO,KAAsB,CACpE,IAAI,MAAMZ,EACV,CACI,KAAK,OAAO,SAASA,CAAK,EAC1B,KAAM,CAAChB,EAAGJ,EAAGF,CAAC,EAAI,KAAK,OAAO,QAAQ,EAEtC,KAAK,SAAS,OAAO,CAAC,EAAIM,EAC1B,KAAK,SAAS,OAAO,CAAC,EAAIJ,EAC1B,KAAK,SAAS,OAAO,CAAC,EAAIF,CAC9B,CAMA,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,MAAQ,CACnD,IAAI,MAAMsB,EAAe,CAAE,KAAK,SAAS,OAASA,CAAO,CAC7D,EAlGID,GAHS8L,GAGc,kBAA6C,CAEhE,MAAO,EAEP,MAAO,CACX,CARG,EAAA,IAAMC,GAAND;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GC5BPzL,GAAA,OAAA,eAAAlB,GAAA,OAAA,sBAAAyD,GAAA,OAAA,UAAA,eAAAoJ,GAAA,OAAA,UAAA,qBAAAxL,GAAA,CAAAxB,EAAA,EAAAC,IAAA,KAAAD,EAAAqB,GAAArB,EAAA,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAC,CAAA,CAAA,EAAAD,EAAA,CAAA,EAAAC,EAAAwB,GAAA,CAAAzB,EAAA,IAAA,CAAA,QAAAC,KAAA,IAAA,EAAA,CAAA,GAAA2D,GAAA,KAAA,EAAA3D,CAAA,GAAAuB,GAAAxB,EAAAC,EAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,GAAA,QAAAF,KAAAE,GAAA,CAAA,EAAA6M,GAAA,KAAA,EAAA/M,CAAA,GAAAuB,GAAAxB,EAAAC,EAAA,EAAAA,CAAA,CAAA,EAAA,OAAAD,CAAA,EAAA8C,EAAA,CAAA9C,EAAA,EAAAC,KAAAuB,GAAAxB,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAAC,CAAA,EAAAA,GA2DO,MAAMgN,GAAN,MAAMA,WAA2B5M,EACxC,MAAA,CAiCI,eAAesB,EACf,CA9FJ,IAAAC,EAAAC,EAAAC,EA+FQ,IAAIxB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,CAAA,GAErB,OAAOtB,GAAY,UAAY,MAAM,QAAQA,CAAO,GAAKA,aAAmB,gBAG5EyB,EAAY,YAAA,QAAS,qHAAqH,EAE1IzB,EAAU,CAAE,cAAeA,CAAQ,EAE/BqB,EAAK,CAAC,IAAM,SAAWrB,EAAQ,YAAcqB,EAAK,CAAC,GACnDA,EAAK,CAAC,IAAM,SAAWrB,EAAQ,UAAYqB,EAAK,CAAC,IAGzDrB,EAAUC,GAAAA,GAAA,GAAK0M,GAAmB,eAAA,EAAoB3M,GAEtD,MAAME,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,YAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,sBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,qBAAsB,CAClB,eAAgB,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EAChE,aAAc,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EAC9D,WAAY,CAAE,MAAON,EAAQ,UAAW,KAAM,KAAM,CACxD,CACJ,CACJ,CAAC,EArELU,EAAA,KAAO,UAMPA,EAAAA,EAAA,KAAQ,gBACRA,EAAAA,EAAA,KAAQ,cAgEJ,EAAA,KAAK,SAAW,KAAK,UAAU,qBAAqB,SAEpD,KAAK,eAAiB,IAAIoD,QAC1B,KAAK,aAAe,IAAIA,QACxB,KAAK,eAAgBvC,EAAAvB,EAAQ,gBAAR,KAAAuB,EAAyB,SAC9C,KAAK,aAAcC,EAAAxB,EAAQ,cAAR,KAAAwB,EAAuB,EAE1C,OAAO,OAAO,KAAMxB,CAAO,CAC/B,CAOA,IAAI,eAA6B,CAAE,OAAO,KAAK,eAAe,KAAsB,CACpF,IAAI,cAAcW,EAClB,CACI,KAAK,eAAe,SAASA,CAAK,EAClC,KAAM,CAAChB,EAAGJ,EAAGF,CAAC,EAAI,KAAK,eAAe,QAAQ,EAE9C,KAAK,SAAS,eAAe,CAAC,EAAIM,EAClC,KAAK,SAAS,eAAe,CAAC,EAAIJ,EAClC,KAAK,SAAS,eAAe,CAAC,EAAIF,CACtC,CAOA,IAAI,aAA2B,CAAE,OAAO,KAAK,aAAa,KAAsB,CAChF,IAAI,YAAYsB,EAChB,CACI,KAAK,aAAa,SAASA,CAAK,EAChC,KAAM,CAAChB,EAAGJ,EAAGF,CAAC,EAAI,KAAK,aAAa,UAEpC,KAAK,SAAS,aAAa,CAAC,EAAIM,EAChC,KAAK,SAAS,aAAa,CAAC,EAAIJ,EAChC,KAAK,SAAS,aAAa,CAAC,EAAIF,CACpC,CAMA,IAAI,WAAoB,CAAE,OAAO,KAAK,SAAS,UAAY,CAC3D,IAAI,UAAUsB,EAAe,CAAE,KAAK,SAAS,WAAaA,CAAO,CAUjE,IAAI,SAASA,EACb,CACIc,cAAY,QAAS,8FAA8F,EAEnH,KAAK,YAAcd,CACvB,CACA,IAAI,UACJ,CACI,OAAAc,EAAAA,YAAY,QAAS,8FAA8F,EAE5G,KAAK,WAChB,CASA,IAAI,QAAQd,EACZ,CACIc,EAAAA,YAAY,QAAS,2FAA2F,EAEhH,KAAK,UAAYd,CACrB,CACA,IAAI,SACJ,CACI,OAAAc,cAAY,QAAS,2FAA2F,EAEzG,KAAK,SAChB,CACJ,EAtKIf,EAHSiM,GAGc,kBAA6C,CAChE,cAAe,SACf,YAAa,EACb,UAAW,EACf,CAAA,MAPSC,GAAND;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GC3DP5L,GAAA,OAAA,eAAAvB,GAAA,OAAA,sBAAAD,GAAA,OAAA,UAAA,eAAAF,GAAA,OAAA,UAAA,qBAAA8B,GAAA,CAAAF,EAAAtB,EAAAD,IAAAC,KAAAsB,EAAAF,GAAAE,EAAAtB,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAD,CAAA,CAAA,EAAAuB,EAAAtB,CAAA,EAAAD,EAAAG,GAAA,CAAAoB,EAAAtB,IAAA,CAAA,QAAAD,KAAAC,IAAAA,EAAA,CAAA,GAAAJ,GAAA,KAAAI,EAAAD,CAAA,GAAAyB,GAAAF,EAAAvB,EAAAC,EAAAD,CAAA,CAAA,EAAA,GAAAF,GAAA,QAAAE,KAAAF,GAAAG,CAAA,EAAAN,GAAA,KAAAM,EAAAD,CAAA,GAAAyB,GAAAF,EAAAvB,EAAAC,EAAAD,CAAA,CAAA,EAAA,OAAAuB,CAAA,EAAA3B,GAAA,CAAA2B,EAAAtB,EAAAD,KAAAyB,GAAAF,EAAA,OAAAtB,GAAA,SAAAA,EAAA,GAAAA,EAAAD,CAAA,EAAAA,GA2CO,MAAMmN,GAAN,MAAMA,WAA0B9M,EACvC,MAAA,CA2BI,eAAesB,EACf,CAxEJ,IAAAC,EAAAC,EAAAC,EAyEQ,IAAIxB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,CAErB,EAAA,MAAM,QAAQtB,CAAO,IAGrByB,EAAY,YAAA,QAAS,oGAAoG,EAEzHzB,EAAU,CAAE,OAAQA,CAA6B,EAE7CqB,EAAK,CAAC,IAAM,SAAWrB,EAAQ,MAAQqB,EAAK,CAAC,GAC7CA,EAAK,CAAC,IAAM,SAAWrB,EAAQ,OAASqB,EAAK,CAAC,IAGtDrB,EAAUC,GAAAA,GAAA,CAAK4M,EAAAA,GAAkB,eAAoB7M,EAAAA,CAAAA,EAErD,MAAM8M,GAAQvL,EAAAvB,EAAQ,QAAR,KAAAuB,EAAiB,IACzBwL,GAASvL,EAAAxB,EAAQ,SAAR,KAAAwB,EAAkB,IAE3BtB,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAU,UAAA,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,oBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,oBAAqB,CACjB,QAAS,CAAE,MAAON,EAAQ,OAAQ,KAAM,aAAc,EACtD,WAAY,CAAE,MAAO,CAAE,EAAG,EAAI8M,EAAO,EAAG,EAAIC,CAAO,EAAG,KAAM,WAAY,CAC5E,CACJ,CACJ,CAAC,EAjELrM,GAAA,KAAO,UAAA,EAmEH,KAAK,SAAW,KAAK,UAAU,oBAAoB,SAEnD,KAAK,MAAQoM,EACb,KAAK,OAASC,CAClB,CASA,IAAI,QAA4B,CAAE,OAAO,KAAK,SAAS,OAAS,CAChE,IAAI,OAAOC,EACX,CACIA,EAAO,QAAQ,CAACtK,EAAGF,IACnB,CACI,KAAK,SAAS,QAAQA,CAAC,EAAIE,CAC/B,CAAC,CACL,CAMA,IAAI,OAAgB,CAAE,MAAW,GAAA,KAAK,SAAS,WAAW,CAAG,CAC7D,IAAI,MAAM/B,EAAe,CAAE,KAAK,SAAS,WAAW,EAAI,EAAIA,CAAO,CAMnE,IAAI,QAAiB,CAAE,MAAO,GAAI,KAAK,SAAS,WAAW,CAAG,CAC9D,IAAI,OAAOA,EAAe,CAAE,KAAK,SAAS,WAAW,EAAI,EAAIA,CAAO,CACxE,EA5GID,GAHSmM,GAGc,kBAA4C,CAC/D,OAAQ,IAAI,aAAa,CAAC,EAC1B,MAAO,IACP,OAAQ,GACZ,CAAA,MAPSI,GAANJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GC/BA,MAAMK,WAAyBnN,EAAAA,MACtC,CACI,aACA,CACI,MAAMG,EAAaC,aAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,oBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACf,CAAA,CAAC,CACL,CACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0YCqCO,MAAM6M,GAAN,MAAMA,WAAkBpN,EAC/B,MAAA,CAwCI,YAAYC,EACZ,CACIA,EAAUC,GAAAA,GAAA,CAAA,EAAKkN,GAAU,eAAA,EAAoBnN,CAE7C,EAAA,MAAME,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,YACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,YAAa,CACT,MAAO,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EACvD,OAAQ,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EACxD,UAAW,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EAC3D,MAAO,CAAE,MAAON,EAAQ,KAAM,KAAM,KAAM,EAC1C,MAAO,CAAE,MAAOA,EAAQ,KAAM,KAAM,KAAM,EAC1C,YAAa,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,CACjE,CACJ,CACJ,CAAC,EA1DLU,EAAA,KAAO,UAAA,EAaPA,EAAA,KAAO,QAMPA,EAAA,KAAO,MAyCH,EAAA,KAAK,SAAW,KAAK,UAAU,YAAY,SAE3C,OAAO,OAAO,KAAMV,CAAO,CAC/B,CAOgB,MACZ4B,EACAC,EACAC,EACAC,EAEJ,CACI,KAAK,SAAS,YAAY,CAAC,EAAIF,EAAM,MAAM,MAC3C,KAAK,SAAS,YAAY,CAAC,EAAIA,EAAM,MAAM,OAE3C,KAAK,SAAS,MAAQ,KAAK,KAC3B,KAAK,SAAS,MAAQ,KAAK,KAE3BD,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAS,CAC5D,CAMA,IAAI,WAAoB,CAAE,OAAO,KAAK,SAAS,MAAM,CAAC,CAAG,CACzD,IAAI,UAAUpB,EAAe,CAAE,KAAK,SAAS,MAAM,CAAC,EAAIA,CAAO,CAM/D,IAAI,WAAoB,CAAE,OAAO,KAAK,SAAS,MAAM,CAAC,CAAG,CACzD,IAAI,UAAUA,EAAe,CAAE,KAAK,SAAS,MAAM,CAAC,EAAIA,CAAO,CAM/D,IAAI,cAAuB,CAAE,OAAO,KAAK,SAAS,MAAM,CAAC,CAAG,CAC5D,IAAI,aAAaA,EAAe,CAAE,KAAK,SAAS,MAAM,CAAC,EAAIA,CAAO,CAQlE,IAAI,cAAwB,CAAE,OAAO,KAAK,SAAS,MAAM,CAAC,EAAI,EAAK,CACnE,IAAI,aAAaA,EAAgB,CAAE,KAAK,SAAS,MAAM,CAAC,EAAIA,EAAQ,EAAI,CAAG,CAM3E,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,OAAO,CAAC,CAAG,CACtD,IAAI,MAAMA,EAAe,CAAE,KAAK,SAAS,OAAO,CAAC,EAAIA,CAAO,CAM5D,IAAI,WAAoB,CAAE,OAAO,KAAK,SAAS,OAAO,CAAC,CAAG,CAC1D,IAAI,UAAUA,EAAe,CAAE,KAAK,SAAS,OAAO,CAAC,EAAIA,CAAO,CAMhE,IAAI,YAAqB,CAAE,OAAO,KAAK,SAAS,UAAU,CAAC,CAAG,CAC9D,IAAI,WAAWA,EAAe,CAAE,KAAK,SAAS,UAAU,CAAC,EAAIA,CAAO,CAMpE,IAAI,iBAA0B,CAAE,OAAO,KAAK,SAAS,UAAU,CAAC,CAAG,CACnE,IAAI,gBAAgBA,EAAe,CAAE,KAAK,SAAS,UAAU,CAAC,EAAIA,CAAO,CAMzE,IAAI,gBAAyB,CAAE,OAAO,KAAK,SAAS,UAAU,CAAC,CAAG,CAClE,IAAI,eAAeA,EAAe,CAAE,KAAK,SAAS,UAAU,CAAC,EAAIA,CAAO,CAC5E,EApKID,EAHSyM,GAGc,kBAAoC,CACvD,UAAW,EACX,UAAW,EACX,aAAc,IACd,aAAc,GACd,MAAO,EACP,UAAW,EACX,WAAY,GACZ,gBAAiB,EACjB,eAAgB,GAChB,KAAM,EACN,KAAM,CACV,CAfG,EAAA,IAAMC,GAAND;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2YCzCA,MAAME,GAAN,MAAMA,WAAkBtN,QAC/B,CAqBI,eAAesB,EACf,CA1DJ,IAAAC,EA2DQ,IAAItB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,GAErB,OAAOtB,GAAY,WAGnByB,EAAY,YAAA,QAAS,8FAA8F,EAEnHzB,EAAU,CAAE,MAAOA,CAAQ,EAEvBqB,EAAK,CAAC,IAAM,SAAWrB,EAAQ,MAAQqB,EAAK,CAAC,GAC7CA,EAAK,CAAC,IAAM,SAAWrB,EAAQ,UAAYqB,EAAK,CAAC,IAGzDrB,EAAUC,GAAAA,GAAA,CAAA,EAAKoN,GAAU,eAAoBrN,EAAAA,CAAAA,EAE7C,MAAMsN,EAAc,CAChB,OAAQ,CAAE,MAAOtN,EAAQ,MAAO,KAAM,KAAM,EAC5C,OAAQ,CAAE,MAAOA,EAAQ,MAAO,KAAM,KAAM,EAC5C,WAAY,CAAE,MAAOA,EAAQ,UAAY,EAAI,EAAG,KAAM,KAAM,CAChE,EAEME,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,YACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,YAAAgN,CACJ,CACJ,CAAC,CACL,CAMA,IAAI,OAAgB,CAAE,OAAO,KAAK,UAAU,YAAY,SAAS,MAAQ,CACzE,IAAI,MAAM3M,EAAe,CAAE,KAAK,UAAU,YAAY,SAAS,OAASA,CAAO,CAM/E,IAAI,OAAgB,CAAE,OAAO,KAAK,UAAU,YAAY,SAAS,MAAQ,CACzE,IAAI,MAAMA,EAAe,CAAE,KAAK,UAAU,YAAY,SAAS,OAASA,CAAO,CAM/E,IAAI,WAAqB,CAAE,OAAO,KAAK,UAAU,YAAY,SAAS,aAAe,CAAG,CACxF,IAAI,UAAUA,EAAgB,CAAE,KAAK,UAAU,YAAY,SAAS,WAAaA,EAAQ,EAAI,CAAG,CACpG,EAxFID,GAHS2M,GAGc,kBAAoC,CACvD,MAAO,EACP,MAAO,EACP,UAAW,EACf,CAPG,EAAA,IAAME,GAANF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0YCuCA,MAAMG,GAAN,MAAMA,WAAyBzN,EACtC,MAAA,CAiCI,YAAYC,EACZ,CA7GJ,IAAAsB,EAAAC,EA8GQvB,EAAUC,MAAA,CAAKuN,EAAAA,GAAiB,eAAoBxN,EAAAA,CAAAA,EAEpD,MAAME,EAAaC,aAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,oBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,mBAAoB,CAChB,OAAQ,CAAE,MAAON,EAAQ,MAAO,KAAM,KAAM,EAC5C,OAAQ,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EACxD,QAAS,CAAE,MAAOA,EAAQ,OAAQ,KAAM,WAAY,CACxD,CACJ,EACA,WAAYA,EAAQ,UACxB,CAAC,EAnDLU,EAAA,KAAO,UAAA,EAUPA,EAAA,KAAO,aAAa,IAEpBA,EAAA,KAAQ,UACRA,EAAA,KAAQ,eACRA,EAAA,KAAQ,aAuCJ,KAAK,SAAW,KAAK,UAAU,mBAAmB,SAClD,KAAK,OAAS,IAAIoD,QAClB,KAAK,OAAQxC,EAAAtB,EAAQ,QAAR,KAAAsB,EAAiB,EAE9B,KAAK,YAAc,IAAI0B,EAAiB,CACpC,UAAUzB,EAAAvB,EAAQ,UAAR,KAAAuB,EAAuCvB,EAAQ,KACzD,QAASA,EAAQ,QAAU,OAAYA,EAAQ,OACnD,CAAC,EAED,KAAK,UAAY,IAAID,EAAAA,OAAO,CACxB,WAAYI,EAAAA,WAAW,KAAK,CACxB,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAWR,WAAY,cAChB,CACJ,CAAC,EACD,UAAWG,YAAU,KAAK,CACtB,OAAAC,EACA,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASV,KAAM,oBACV,CAAC,EACD,UAAW,CACf,CAAA,CAAC,EAED,OAAO,OAAO,KAAMR,CAAO,CAC/B,CAOgB,MACZ4B,EACAC,EACAC,EACAC,EAEJ,CACI,MAAMI,EAAeC,EAAAA,YAAY,mBAAmBP,CAAK,EAEzDD,EAAc,YAAY,KAAMC,EAAOM,EAAc,EAAI,EACzD,KAAK,YAAY,MAAMP,EAAeO,EAAcL,EAAQC,CAAS,EAEhE,KAAK,YAENH,EAAc,YAAY,KAAK,UAAWC,EAAOC,EAAQ,EAAK,EAGlEM,EAAAA,YAAY,cAAcD,CAAY,CAC1C,CAMA,IAAW,QAAoB,CAAE,OAAO,KAAK,SAAS,OAAS,CAC/D,IAAW,OAAOxB,EAClB,CACI,KAAK,SAAS,QAAUA,EACxB,KAAK,gBACT,CAMA,IAAI,SAAkB,CAAE,OAAO,KAAK,OAAO,CAAG,CAC9C,IAAI,QAAQA,EACZ,CACI,KAAK,OAAO,EAAIA,EAChB,KAAK,eACT,CAAA,CAMA,IAAI,SAAkB,CAAE,OAAO,KAAK,OAAO,CAAG,CAC9C,IAAI,QAAQA,EACZ,CACI,KAAK,OAAO,EAAIA,EAChB,KAAK,eAAA,CACT,CAOA,IAAI,OAAqB,CAAE,OAAO,KAAK,OAAO,KAAsB,CACpE,IAAI,MAAMA,EACV,CACI,KAAK,OAAO,SAASA,CAAK,EAC1B,KAAM,CAAChB,EAAGJ,EAAGF,CAAC,EAAI,KAAK,OAAO,UAE9B,KAAK,SAAS,OAAO,CAAC,EAAIM,EAC1B,KAAK,SAAS,OAAO,CAAC,EAAIJ,EAC1B,KAAK,SAAS,OAAO,CAAC,EAAIF,CAC9B,CAMA,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,MAAQ,CACnD,IAAI,MAAMsB,EAAe,CAAE,KAAK,SAAS,OAASA,CAAO,CAMzD,IAAI,MAAe,CAAE,OAAO,KAAK,YAAY,QAAU,CACvD,IAAI,KAAKA,EACT,CACI,KAAK,YAAY,SAAWA,EAC5B,KAAK,eACT,CAAA,CAMA,IAAI,SAAkB,CAAE,OAAO,KAAK,YAAY,OAAS,CACzD,IAAI,QAAQA,EACZ,CACI,KAAK,YAAY,QAAUA,EAC3B,KAAK,gBACT,CAGA,IAAI,SAAoB,CAAE,OAAO,KAAK,YAAY,OAAS,CAC3D,IAAI,QAAQA,EAAiB,CAAE,KAAK,YAAY,QAAUA,CAAO,CAMjE,IAAI,WACJ,CACI,OAAO,KAAK,YAAY,SAC5B,CACA,IAAI,UAAUA,EACd,CACQ,OAAOA,GAAU,WAEjBA,EAAQ,CAAE,EAAGA,EAAO,EAAGA,CAAM,GAG7B,MAAM,QAAQA,CAAK,IAEnBA,EAAQ,CAAE,EAAGA,EAAM,CAAC,EAAG,EAAGA,EAAM,CAAC,CAAE,GAGvC,KAAK,YAAY,UAAYA,CACjC,CAMA,IAAI,YAAqB,CAAE,OAAO,KAAK,YAAY,UAAY,CAC/D,IAAI,WAAWA,EAAe,CAAE,KAAK,YAAY,WAAaA,CAAO,CAMrE,IAAI,YAAqB,CAAE,OAAO,KAAK,YAAY,UAAY,CAC/D,IAAI,WAAWA,EAAe,CAAE,KAAK,YAAY,WAAaA,CAAO,CAM7D,gBACR,CACI,MAAM8M,EAAgB,KAAK,IACvB,KAAK,IAAI,KAAK,OAAO,EACrB,KAAK,IAAI,KAAK,OAAO,CACzB,EAEA,KAAK,QAAUA,EAAiB,KAAK,KAAO,EAAM,KAAK,QAAU,CACrE,CACJ,EA/QI/M,EAHS8M,GAGc,kBAA2C,CAC9D,OAAQ,CAAE,EAAG,EAAG,EAAG,CAAE,EACrB,MAAO,EACP,MAAO,GACP,WAAY,GACZ,QAAS,OACT,KAAM,EACN,QAAS,EACT,UAAW,CAAE,EAAG,EAAG,EAAG,CAAE,EACxB,WAAY,CAChB,CAAA,MAbSE,GAANF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oKC9DM,MAAAG,WAAqB5N,EAAAA,MAClC,CAQI,YAAY2E,EAAW,EACvB,CACI,MAAMxE,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,eACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,eAAgB,CACZ,UAAW,CAAE,MAAOoE,EAAU,KAAM,KAAM,CAC9C,CACJ,CACJ,CAAC,EAlCLhE,GAAA,KAAO,UAAA,EAoCH,KAAK,SAAW,KAAK,UAAU,eAAe,QAClD,CAMA,IAAI,UAAmB,CAAE,OAAO,KAAK,SAAS,SAAW,CACzD,IAAI,SAASC,EAAe,CAAE,KAAK,SAAS,UAAYA,CAAO,CACnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+ZCpDKiN,IAEDA,IAAAA,EAAAA,EAAA,YAAc,CAAd,EAAA,cACAA,EAAAlO,EAAA,SAAW,CAAX,EAAA,WACAkO,EAAAlO,EAAA,KAAO,CAAP,EAAA,OACAkO,EAAAlO,EAAA,MAAQ,CAAR,EAAA,QACAkO,IAAA,OAAS,CAAA,EAAT,SANCA,IAAAA,IAAA,CAAA,CA6EE,EAAA,MAAMC,GAAN,MAAMA,WAAqB9N,EAAAA,MAClC,CA6DI,YAAYC,EACZ,CAnJJ,IAAAsB,EAAAC,EAAAC,EAAAsM,EAAAC,EAoJQ/N,EAAUC,GAAAc,GAAA,CAAA,EAAK8M,GAAa,QAAA,EAAa7N,CAEzC,EAAA,MAAME,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,YAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,eACV,CAAC,EAEKuN,EAAS,SAAS,cAAc,QAAQ,EAE9CA,EAAO,MAAQ,EACfA,EAAO,QAAS1M,EAAAtB,EAAQ,aAAR,KAAAsB,EAAsB,IAEtC,MAAMgL,EAAU,IAAI/I,EAAAA,QAAQ,CACxB,OAAQ,IAAI0K,EAAAA,YAAY,CAAE,SAAUD,CAAO,CAAC,CAChD,CAAC,EAED,MAAM,CACF,WAAA9N,EACA,UAAAI,EACA,UAAW,CACP,eAAgB,CACZ,MAAO,CAAE,OAAOiB,EAAAvB,GAAA,KAAAA,OAAAA,EAAS,OAAT,KAAAuB,EAAiB,EAAG,KAAM,KAAM,EAChD,YAAa,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EAC7D,QAAS,CAAE,MAAO,EAAG,KAAM,KAAM,EACjC,UAAW,CAAE,OAAOC,EAAAxB,GAAA,KAAA,OAAAA,EAAS,WAAT,KAAAwB,EAAqB,EAAG,KAAM,KAAM,EACxD,QAAS,CAAE,OAAOsM,EAAA9N,GAAA,KAAAA,OAAAA,EAAS,SAAT,KAAA8N,EAAmB,IAAK,KAAM,KAAM,EACtD,WAAY,CAAE,OAAOC,EAAA/N,GAAA,YAAAA,EAAS,YAAT,KAAA+N,EAAsB,EAAG,KAAM,KAAM,EAC1D,KAAM,CAAE,MAAO/N,EAAQ,IAAK,KAAM,WAAY,EAC9C,OAAQ,CAAE,MAAOA,EAAQ,MAAO,KAAM,WAAY,EAClD,MAAO,CAAE,MAAOA,EAAQ,KAAM,KAAM,WAAY,CACpD,EACA,iBAAkBsM,EAAQ,OAC1B,qBAAsBA,EAAQ,OAAO,KACzC,CACJ,CAAC,EA7FL5L,EAAA,KAAO,YAgBPA,EAAA,KAAO,UAAU,EAAA,EAGjBA,EAAA,KAAO,UAAU,CAAA,EAGjBA,EAAA,KAAO,aAAa,GAAA,EAGpBA,EAAA,KAAQ,WASRA,EAAA,KAAO,SAGPA,EAAAA,EAAA,KAAQ,UAAU,CAElBA,EAAAA,EAAA,KAAQ,SAAuB,IAAI,aAAa,CAAC,CAAA,EACjDA,EAAA,KAAQ,WAAyB,IAAI,aAAa,CAAC,CAAA,EAuD/C,KAAK,SAAW,KAAK,UAAU,eAAe,SAE9C,KAAK,QAAUsN,EACf,KAAK,QAAU1B,EAEf,OAAO,OAAO,KAAMtM,CAAO,CAC/B,CAMA,MACI4B,EACAC,EACAC,EACAC,EAEJ,CACI,KAAM,CAAE,MAAA+K,EAAO,OAAAC,CAAO,EAAIlL,EAAM,MAEhC,KAAK,SAAS,YAAY,CAAC,EAAIiL,EAC/B,KAAK,SAAS,YAAY,CAAC,EAAIC,EAC/B,KAAK,SAAS,QAAUA,EAASD,EAEjClL,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAS,CAC5D,CAOQ,iBACR,CACI,MAAMmM,EAAM,KAAK,OACX3L,EAAO,KAAK,QAAU,EACtBoD,EAAO,KAAK,WACZwI,EAAM,KAAK,IAAI,KAAK,QAAUxI,EAAM,GAAM,KAAK,OAAO,EAE5D,GAAI,KAAK,QACT,CACI,MAAMyI,EAAQ,KAAK,QACnB,IAAIC,EAAO,EAEX,QAAS7L,EAAI,EAAGA,EAAID,EAAMC,IAC1B,CACI,MAAM8L,EAAeD,GAAQD,EAAQ5L,GAC/B+L,EAAI,KAAK,IAAID,GAAgB,EAAK,KAAK,OAAO,EAAI,IAAOH,CAAG,EAElED,EAAI1L,CAAC,EAAI+L,EACTF,GAAQE,CACZ,CACAL,EAAI3L,CAAI,EAAI8L,CAChB,KAEA,CACI,IAAIA,EAAO,EACX,MAAMG,EAAQ,KAAK,KAAK,EAAI,KAAK,OAAO,EAExC,QAAShM,EAAI,EAAGA,EAAID,EAAMC,IAC1B,CACI,MAAM+L,EAAI,KAAK,IAAIC,EAAQH,EAAO,KAAK,OAAO,EAAGF,CAAG,EAEpDD,EAAI1L,CAAC,EAAI+L,EACTF,GAAQE,CACZ,CACAL,EAAI3L,CAAI,EAAI8L,CAChB,CAEA,KAAK,QACT,CAAA,CAKA,SACA,CACI,MAAMH,EAAM,KAAK,OACX3L,EAAO,KAAK,QAAU,EAG5B,QAASC,EAAID,EAAMC,EAAI,EAAGA,IAC1B,CACI,MAAMiM,EAAQ,KAAK,OAAO,EAAIjM,GAAM,EAC9BkM,EAAOR,EAAI1L,CAAC,EAElB0L,EAAI1L,CAAC,EAAI0L,EAAIO,CAAI,EACjBP,EAAIO,CAAI,EAAIC,CAChB,CACJ,CAOQ,mBACR,CACI,QAASlM,EAAI,EAAGA,EAAI,KAAK,QAASA,IAE9B,KAAK,SAASA,CAAC,EAAI,KAAK,OAAO,GAAK,KAAK,OAAW,EAAA,GAAM,GAAK,EAEvE,CAKA,SACA,CACI,KAAK,gBAAA,EACL,KAAK,kBAAkB,EACvB,KAAK,OAAA,CACT,CAKA,QACA,CACI,MAAMmD,EAAO,KAAK,WACZ2G,EAAU,KAAK,QACfqC,EAAM,KAAK,QAAQ,WAAW,IAAI,EAExCA,EAAI,UAAU,EAAG,EAAG,EAAGhJ,CAAI,EAE3B,IAAIzD,EACAsJ,EAAI,EAER,QAAShJ,EAAI,EAAGA,EAAI,KAAK,QAASA,IAClC,CACIN,EAAS,KAAK,MAAM,KAAK,SAASM,CAAC,EAAI,GAAG,EAC1C,MAAMuK,EAAS,KAAK,OAAOvK,CAAC,EAAImD,EAC1BiJ,EAAM1M,EAAS,EAAIA,EAAS,EAC5B2M,EAAQ3M,EAAS,EAAI,CAACA,EAAS,EAErCyM,EAAI,UAAY,QAAQC,CAAG,KAAKC,CAAK,UACrCF,EAAI,SAAS,EAAGnD,GAAK,EAAG7F,EAAMoH,EAAS,GAAK,CAAC,EAC7CvB,GAAKuB,CACT,CAEAT,EAAQ,OAAO,OACnB,CAAA,CAOA,IAAI,MAAMwC,EACV,CACI,MAAMC,EAAM,KAAK,IAAI,KAAK,QAASD,EAAM,MAAM,EAE/C,QAAStM,EAAI,EAAGA,EAAIuM,EAAKvM,IAErB,KAAK,OAAOA,CAAC,EAAIsM,EAAMtM,CAAC,CAEhC,CACA,IAAI,OACJ,CACI,OAAO,KAAK,MAChB,CASA,IAAI,QAAQ8H,EACZ,CACI,MAAMyE,EAAM,KAAK,IAAI,KAAK,QAASzE,EAAQ,MAAM,EAEjD,QAAS9H,EAAI,EAAGA,EAAIuM,EAAKvM,IAErB,KAAK,SAASA,CAAC,EAAI8H,EAAQ9H,CAAC,CAEpC,CACA,IAAI,SAAwB,CAAE,OAAO,KAAK,QAAU,CAMpD,IAAI,QAAiB,CAAE,OAAO,KAAK,OAAS,CAC5C,IAAI,OAAO7B,EACX,CACQ,KAAK,UAAYA,IACrB,KAAK,QAAUA,EACf,KAAK,OAAS,IAAI,aAAaA,CAAK,EACpC,KAAK,SAAW,IAAI,aAAaA,CAAK,EACtC,KAAK,QACT,EAAA,CAMA,IAAI,QAAiB,CAAE,OAAO,KAAK,SAAS,OAAS,CACrD,IAAI,OAAOA,EAAe,CAAE,KAAK,SAAS,QAAUA,CAAO,CAM3D,IAAI,MAAe,CAAE,OAAO,KAAK,SAAS,KAAO,CACjD,IAAI,KAAKA,EAAe,CAAE,KAAK,SAAS,MAAQA,CAAO,CAMvD,IAAI,UAAuB,CAAE,OAAO,KAAK,SAAS,SAAW,CAC7D,IAAI,SAASA,EAAmB,CAAE,KAAK,SAAS,UAAYA,CAAO,CAMnE,IAAI,WAAoB,CAAE,OAAO,KAAK,SAAS,WAAa2D,YAAY,CACxE,IAAI,UAAU3D,EAAe,CAAE,KAAK,SAAS,WAAaA,EAAQ2D,EAAY,UAAA,CAM9E,IAAI,KAAiB,CAAE,OAAO,KAAK,SAAS,IAAM,CAClD,IAAI,IAAI3D,EACR,CACQ,MAAM,QAAQA,CAAK,IAEnBA,EAAQ,CAAE,EAAGA,EAAM,CAAC,EAAG,EAAGA,EAAM,CAAC,CAAE,GAGvC,KAAK,SAAS,KAAOA,CACzB,CAMA,IAAI,OAAmB,CAAE,OAAO,KAAK,SAAS,MAAQ,CACtD,IAAI,MAAMA,EACV,CACQ,MAAM,QAAQA,CAAK,IAEnBA,EAAQ,CAAE,EAAGA,EAAM,CAAC,EAAG,EAAGA,EAAM,CAAC,CAAE,GAGvC,KAAK,SAAS,OAASA,CAC3B,CAMA,IAAI,MAAkB,CAAE,OAAO,KAAK,SAAS,KAAO,CACpD,IAAI,KAAKA,EACT,CACQ,MAAM,QAAQA,CAAK,IAEnBA,EAAQ,CAAE,EAAGA,EAAM,CAAC,EAAG,EAAGA,EAAM,CAAC,CAAE,GAGvC,KAAK,SAAS,MAAQA,CAC1B,CAKA,SACA,CApdJ,IAAAW,GAqdQA,EAAA,KAAK,UAAL,MAAAA,EAAc,QAAQ,EACtB,EAAA,KAAK,QACH,KAAK,QACL,KAAK,IACL,KAAK,MACL,KAAK,KACL,KAAK,OACL,KAAK,SAAW,IACtB,CACJ,EAvYIZ,EAHSmN,GAGc,WAAgC,CACnD,OAAQ,EACR,OAAQ,IACR,UAAW,EACX,SAAU,EACV,QAAS,GACT,KAAM,EACN,IAAK,CAAE,EAAG,EAAG,EAAG,CAAE,EAClB,MAAO,CAAE,EAAG,EAAG,EAAG,CAAE,EACpB,KAAM,CAAE,EAAG,EAAG,EAAG,CAAE,EACnB,QAAS,EACT,WAAY,GAChB,CAfG,EAAA,IAAMmB,GAANnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;obCxBA,MAAMoB,GAAN,MAAMA,WAAmBlP,QAChC,CA0BI,YAAYC,EACZ,CAxFJ,IAAAsB,EAAAC,EAAAC,EAAAsM,EAyFQ9N,EAAUC,GAAAA,GAAA,GAAKgP,GAAW,eAAA,EAAoBjP,GAE9C,MAAMkP,GAAW5N,EAAAtB,EAAQ,WAAR,KAAAsB,EAAoB,GAC/BsB,GAAUrB,EAAAvB,EAAQ,UAAR,KAAAuB,EAAmB,GAE7BrB,EAAaC,EAAW,WAAA,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAKKC,EAAYC,YAAU,KAAK,CAC7B,OAAAC,EACA,SAAUC,GACL,QAAQ,wBAAyB,IAAI,EAAImC,EAAUsM,GAAU,QAAQ,CAAC,CAAC,EAAE,EACzE,QAAQ,aAAc,GAAGA,EAAS,QAAQ,CAAC,CAAC,IAAI,EACrD,KAAM,aACV,CAAC,EAED,MAAM,CACF,WAAAhP,EACA,UAAAI,EACA,UAAW,CACP,aAAc,CACV,UAAW,CAAE,MAAO4O,EAAU,KAAM,KAAM,EAC1C,UAAW,CAAE,MAAO,CAAClP,EAAQ,cAAeA,EAAQ,aAAa,EAAG,KAAM,WAAY,EACtF,OAAQ,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EACxD,OAAQ,CAAE,MAAOA,EAAQ,MAAO,KAAM,KAAM,EAC5C,SAAU,CAAE,MAAO4C,EAAS,KAAM,KAAM,EACxC,UAAW,CAAE,OAAQpB,EAAAxB,GAAA,KAAA,OAAAA,EAAS,WAAT,MAAAwB,EAA8B,EAAI,EAAG,KAAM,KAAM,CAC1E,CACJ,EACA,QAAS0N,CACb,CAAC,EAzDLxO,GAAA,KAAO,YASPA,GAAA,KAAQ,UAkDJ,KAAK,SAAW,KAAK,UAAU,aAAa,SAC5C,KAAK,OAAS,IAAIoD,EAAAA,MAClB,KAAK,OAAQgK,EAAA9N,EAAQ,QAAR,KAAA8N,EAAiB,QAClC,CAMA,IAAI,UAAmB,CAAE,OAAO,KAAK,SAAS,SAAW,CACzD,IAAI,SAASnN,EAAe,CAAE,KAAK,SAAS,UAAY,KAAK,QAAUA,CAAO,CAM9E,IAAI,eAAwB,CAAE,OAAO,KAAK,SAAS,UAAU,CAAC,CAAG,CACjE,IAAI,cAAcA,EAAe,CAAE,KAAK,SAAS,UAAU,CAAC,EAAIA,CAAO,CAMvE,IAAI,eAAwB,CAAE,OAAO,KAAK,SAAS,UAAU,CAAC,CAAG,CACjE,IAAI,cAAcA,EAAe,CAAE,KAAK,SAAS,UAAU,CAAC,EAAIA,CAAO,CAMvE,IAAI,OAAqB,CAAE,OAAO,KAAK,OAAO,KAAsB,CACpE,IAAI,MAAMA,EACV,CACI,KAAK,OAAO,SAASA,CAAK,EAC1B,KAAM,CAAChB,EAAGJ,EAAGF,CAAC,EAAI,KAAK,OAAO,QAAQ,EAEtC,KAAK,SAAS,OAAO,CAAC,EAAIM,EAC1B,KAAK,SAAS,OAAO,CAAC,EAAIJ,EAC1B,KAAK,SAAS,OAAO,CAAC,EAAIF,CAC9B,CAMA,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,MAAQ,CACnD,IAAI,MAAMsB,EAAe,CAAE,KAAK,SAAS,OAASA,CAAO,CAMzD,IAAI,SAAkB,CAAE,OAAO,KAAK,SAAS,QAAU,CACvD,IAAI,QAAQA,EAAe,CAAE,KAAK,SAAS,SAAWA,CAAO,CAM7D,IAAI,UAAoB,CAAE,OAAO,KAAK,SAAS,YAAc,CAAG,CAChE,IAAI,SAASA,EAAgB,CAAE,KAAK,SAAS,UAAYA,EAAQ,EAAI,CAAG,CAC5E,EAlIID,GAHSuO,GAGc,kBAAqC,CACxD,SAAU,GACV,cAAe,EACf,cAAe,EACf,MAAO,SACP,MAAO,EACP,QAAS,GACT,SAAU,EACd,CAXG,EAAA,IAAME,GAANF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0YCKA,MAAMG,GAAN,MAAMA,WAAqBrP,EAAAA,MAClC,CAkCI,YAAYC,EACZ,CACIA,EAAUC,GAAAJ,GAAA,CAAA,EAAKuP,GAAa,eAAA,EAAoBpP,GAEhD,MAAME,EAAaC,EAAW,WAAA,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAQC,GAAO,QAAQ,YAAagP,EAAY,EAChD,WAAY,cAChB,CACJ,CAAC,EACK/O,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAUC,GAAS,QAAQ,YAAa6O,EAAM,EAC9C,KAAM,gBACV,CAAC,EAED,MAAM,CACF,WAAApP,EACA,UAAAI,EACA,UAAW,CACP,eAAgB,CACZ,OAAQ,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EACxD,UAAW,CAAE,MAAO,EAAG,KAAM,KAAM,EACnC,QAAS,CAAE,MAAO,EAAG,KAAM,KAAM,EACjC,MAAO,CAAE,MAAON,EAAQ,KAAM,KAAM,KAAM,EAC1C,KAAM,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EACtD,YAAa,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,CACjE,CACJ,CACJ,CAAC,EAvDLU,EAAA,KAAO,UAaPA,EAAAA,EAAA,KAAO,OAAO,CAEdA,EAAAA,EAAA,KAAQ,cAAgC,CAAC,EAAG,CAAC,CAC7CA,EAAAA,EAAA,KAAQ,SAAS,CACjBA,EAAAA,EAAA,KAAQ,SAAA,EAwCJ,KAAK,SAAW,KAAK,UAAU,eAAe,SAE9C,OAAO,OAAO,KAAMV,CAAO,CAC/B,CAOgB,MACZ4B,EACAC,EACAC,EACAC,EAEJ,CACI,MAAM+K,EAAQjL,EAAM,MAAM,MACpBkL,EAASlL,EAAM,MAAM,OAE3B,KAAK,SAAS,OAAO,CAAC,EAAI,KAAK,SAAW,KAAK,YAAY,CAAC,EAAI,KAAK,QAAQ,EAC7E,KAAK,SAAS,OAAO,CAAC,EAAI,KAAK,SAAW,KAAK,YAAY,CAAC,EAAI,KAAK,QAAQ,EAC7E,KAAK,SAAS,YAAY,CAAC,EAAIiL,EAC/B,KAAK,SAAS,YAAY,CAAC,EAAIC,EAC/B,KAAK,SAAS,QAAUA,EAASD,EACjC,KAAK,SAAS,MAAQ,KAAK,KAG3BlL,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAS,CAC5D,CAOA,IAAI,OAAgB,CAAE,OAAO,KAAK,MAAQ,CAC1C,IAAI,MAAMpB,EACV,CACI,KAAK,OAASA,EAEd,MAAM4O,EAAU5O,EAAQ2D,EAExB,WAAA,KAAK,YAAY,CAAC,EAAI,KAAK,IAAIiL,CAAO,EACtC,KAAK,YAAY,CAAC,EAAI,KAAK,IAAIA,CAAO,CAC1C,CAMA,IAAI,UAAoB,CAAE,OAAO,KAAK,SAAS,UAAY,EAAK,CAChE,IAAI,SAAS5O,EAAgB,CAAE,KAAK,SAAS,UAAYA,EAAQ,EAAI,CAAG,CAMxE,IAAI,QAAoB,CAAE,OAAO,KAAK,OAAS,CAC/C,IAAI,OAAOA,EACX,CACQ,MAAM,QAAQA,CAAK,IAEnBA,EAAQ,CAAE,EAAGA,EAAM,CAAC,EAAG,EAAGA,EAAM,CAAC,CAAE,GAGvC,KAAK,QAAUA,CACnB,CAMA,IAAI,SAAkB,CAAE,OAAO,KAAK,OAAO,CAAG,CAC9C,IAAI,QAAQA,EAAe,CAAE,KAAK,OAAO,EAAIA,CAAO,CAMpD,IAAI,SAAkB,CAAE,OAAO,KAAK,OAAO,CAAG,CAC9C,IAAI,QAAQA,EAAe,CAAE,KAAK,OAAO,EAAIA,CAAO,CAOpD,IAAI,MAAe,CAAE,OAAO,KAAK,SAAS,KAAK,CAAC,CAAG,CACnD,IAAI,KAAKA,EAAe,CAAE,KAAK,SAAS,KAAK,CAAC,EAAIA,CAAO,CAOzD,IAAI,YAAqB,CAAE,OAAO,KAAK,SAAS,KAAK,CAAC,CAAG,CACzD,IAAI,WAAWA,EAAe,CAAE,KAAK,SAAS,KAAK,CAAC,EAAIA,CAAO,CAM/D,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,KAAK,CAAC,CAAG,CACpD,IAAI,MAAMA,EAAe,CAAE,KAAK,SAAS,KAAK,CAAC,EAAIA,CAAO,CAC9D,EA5KID,EAHS0O,GAGc,kBAAuC,CAC1D,MAAO,GACP,KAAM,GACN,WAAY,IACZ,SAAU,GACV,KAAM,EACN,OAAQ,CAAE,EAAG,EAAG,EAAG,CAAE,EACrB,MAAO,CACX,CAXG,EAAA,IAAMI,GAANJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GCrDA,MAAMK,WAAwB1P,EAAAA,MACrC,CACI,aACA,CACI,MAAMG,EAAaC,aAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,kBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACf,CAAA,CAAC,CACL,CACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2YCMO,MAAMoP,GAAN,MAAMA,WAA4B3P,EACzC,MAAA,CAqBI,YAAYC,EACZ,CACIA,EAAUC,MAAA,CAAKyP,EAAAA,GAAoB,eAAoB1P,EAAAA,CAAAA,EAEvD,MAAME,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,uBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,YAAa,CACT,KAAM,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EACtD,UAAW,CAAE,MAAON,EAAQ,SAAW,EAAI,EAAG,KAAM,KAAM,EAC1D,OAAQ,CAAE,MAAOA,EAAQ,MAAO,KAAM,KAAM,CAChD,CACJ,CACJ,CAAC,EA1CLU,GAAA,KAAO,UAMPA,EAAAA,GAAA,KAAQ,MAAA,EAsCJ,KAAK,SAAW,KAAK,UAAU,YAAY,SAC3C,OAAO,OAAO,KAAMV,CAAO,CAC/B,CAMA,IAAI,KAAc,CAAE,OAAO,KAAK,IAAM,CACtC,IAAI,IAAIW,EACR,CACI,KAAK,KAAOA,EACZ,KAAK,SAAS,KAAK,CAAC,EAAIA,GAAS,KAAK,GAAK,IAC/C,CAMA,IAAI,YAAqB,CAAE,OAAO,KAAK,SAAS,KAAK,CAAC,CAAG,CACzD,IAAI,WAAWA,EAAe,CAAE,KAAK,SAAS,KAAK,CAAC,EAAIA,CAAO,CAM/D,IAAI,WAAoB,CAAE,OAAO,KAAK,SAAS,KAAK,CAAC,CAAG,CACxD,IAAI,UAAUA,EAAe,CAAE,KAAK,SAAS,KAAK,CAAC,EAAIA,CAAO,CAM9D,IAAI,UAAoB,CAAE,OAAO,KAAK,SAAS,YAAc,CAAG,CAChE,IAAI,SAASA,EAAgB,CAAE,KAAK,SAAS,UAAYA,EAAQ,EAAI,CAAG,CAMxE,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,MAAQ,CACnD,IAAI,MAAMA,EAAe,CAAE,KAAK,SAAS,OAASA,CAAO,CAC7D,EA9FID,GAHSgP,GAGc,kBAA8C,CACjE,IAAK,EACL,WAAY,EACZ,UAAW,EACX,SAAU,GACV,MAAO,CACX,CATG,EAAA,IAAMC,GAAND;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCC5CPE,GAAA,OAAA,eAAAtQ,GAAA,OAAA,sBAAAgE,GAAA,OAAA,UAAA,eAAAZ,GAAA,OAAA,UAAA,qBAAA9C,GAAA,CAAA,EAAA4C,EAAAvB,IAAAuB,KAAA,EAAAoN,GAAA,EAAApN,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAvB,CAAA,CAAA,EAAA,EAAAuB,CAAA,EAAAvB,EAAAE,GAAA,CAAA,EAAAqB,IAAA,CAAA,QAAAvB,KAAAuB,IAAAA,EAAA,IAAAc,GAAA,KAAAd,EAAAvB,CAAA,GAAArB,GAAA,EAAAqB,EAAAuB,EAAAvB,CAAA,CAAA,EAAA,GAAA3B,GAAA,QAAA2B,KAAA3B,GAAAkD,CAAA,EAAAE,GAAA,KAAAF,EAAAvB,CAAA,GAAArB,GAAA,EAAAqB,EAAAuB,EAAAvB,CAAA,CAAA,EAAA,OAAA,CAAA,EAAAiC,GAAA,CAAA,EAAAV,EAAAvB,KAAArB,GAAA,EAAA,OAAA4C,GAAA,SAAAA,EAAA,GAAAA,EAAAvB,CAAA,EAAAA,GAkCO,MAAM4O,GAAN,MAAMA,WAAyB9P,QACtC,CA6BI,eAAesB,EACf,CAlEJ,IAAAC,EAAAC,EAmEQ,IAAIvB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,CAEzB,EAAA,GAAI,MAAM,QAAQtB,CAAO,GAAM,MAAOA,GAAW,MAAOA,GAAYA,aAAmB8P,kBACvF,CAEIrO,cAAY,QAAS,0GAA0G,EAE/H,MAAMiK,EAAI,MAAO1L,EAAUA,EAAQ,EAAIA,EAAQ,CAAC,EAC1CwL,EAAI,MAAOxL,EAAUA,EAAQ,EAAIA,EAAQ,CAAC,EAEhDA,EAAU,CAAE,SAAU,CAAE,EAAA0L,EAAG,EAAAF,CAAE,CAAE,EAE3BnK,EAAK,CAAC,IAAM,SAAWrB,EAAQ,WAAaqB,EAAK,CAAC,GAClDA,EAAK,CAAC,IAAM,SAAWrB,EAAQ,OAASqB,EAAK,CAAC,EACtD,CAEArB,EAAUC,MAAA,CAAK4P,EAAAA,GAAiB,iBAAoB7P,CAEpD,EAAA,MAAME,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAU,UAAA,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,oBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,mBAAoB,CAChB,UAAW,CAAE,MAAON,EAAQ,SAAU,KAAM,WAAY,EACxD,YAAa,CAAE,MAAO,KAAK,OAAMuB,EAAAvB,EAAQ,aAAR,KAAAuB,EAAsB,CAAC,EAAG,KAAM,KAAM,EACvE,QAAS,CAAE,MAAOvB,EAAQ,OAAQ,KAAM,KAAM,CAClD,CACJ,CACJ,CAAC,EApELU,GAAA,KAAO,UAMPA,EAAAA,GAAA,KAAQ,aAgEJ,EAAA,KAAK,SAAW,KAAK,UAAU,mBAAmB,SAElD,OAAO,OAAO,KAAMV,CAAO,CAC/B,CAQA,IAAI,UAAsB,CAAE,OAAO,KAAK,SAAS,SAAW,CAC5D,IAAI,SAASW,EACb,CACQ,MAAM,QAAQA,CAAK,IAEnBA,EAAQ,CAAE,EAAGA,EAAM,CAAC,EAAG,EAAGA,EAAM,CAAC,CAAE,GAGvC,KAAK,SAAS,UAAYA,EAC1B,KAAK,aACT,CAAA,CAMA,IAAI,WAAoB,CAAE,OAAO,KAAK,SAAS,CAAG,CAClD,IAAI,UAAUA,EACd,CACI,KAAK,SAAS,EAAIA,EAClB,KAAK,cACT,CAMA,IAAI,WAAoB,CAAE,OAAO,KAAK,SAAS,CAAG,CAClD,IAAI,UAAUA,EACd,CACI,KAAK,SAAS,EAAIA,EAClB,KAAK,cACT,CAMA,IAAI,YAAqB,CAAE,OAAO,KAAK,WAAa,CACpD,IAAI,WAAWA,EACf,CACI,KAAK,YAAcA,EACnB,KAAK,aAAA,CACT,CAMA,IAAI,QAAiB,CAAE,OAAO,KAAK,SAAS,OAAS,CACrD,IAAI,OAAOA,EAAe,CAAE,KAAK,SAAS,QAAUA,CAAO,CAEnD,cACR,CAEI,KAAK,SAAW,KAAK,IAAI,KAAK,IAAI,KAAK,SAAS,EAAG,KAAK,IAAI,KAAK,SAAS,CAAC,GAAK,GAAK,EACrF,KAAK,SAAS,YAAe,KAAK,YAAc,GAAK,KAAK,YAAc,EAAK,KAAK,YAAc,CACpG,CACJ,EAjJID,GAHSmP,GAGc,kBAA2C,CAC9D,SAAU,CAAE,EAAG,EAAG,EAAG,CAAE,EACvB,WAAY,EACZ,OAAQ,CACZ,CAAA,MAPSE,GAANF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gbCuBA,MAAMG,GAAN,MAAMA,WAAgCjQ,EAAAA,MAC7C,CAmCI,eAAesB,EACf,CA/FJ,IAAAC,EAAAC,EAgGQ,IAAIvB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,CAAC,EAEtB,MAAM,QAAQtB,CAAO,IAGrByB,EAAAA,YAAY,QAAS,uHAAuH,EAE5IzB,EAAU,CAAE,aAAcA,CAAQ,EAE9BqB,EAAK,CAAC,IAAGrB,EAAQ,UAAYqB,EAAK,CAAC,GACnCA,EAAK,CAAC,IAAGrB,EAAQ,UAAYqB,EAAK,CAAC,IAG3CrB,EAAUC,MAAA,CAAA,EAAK+P,GAAwB,iBAAoBhQ,CAE3D,EAAA,MAAMiQ,GAAY1O,EAAAvB,EAAQ,YAAR,KAAAuB,EAAqBvB,EAAQ,aAAa,OAEtDE,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAQC,GAAO,QAAQ,oBAAsB4P,EAAW,QAAQ,CAAC,CAAC,EAClE,WAAY,cAChB,CACJ,CAAC,EAEK3P,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAUC,GAAS,QAAQ,oBAAsBwP,EAAW,QAAQ,CAAC,CAAC,EACtE,KAAM,4BACV,CAAC,EAED,MAAM,CACF,WAAA/P,EACA,UAAAI,EACA,UAAW,CACP,0BAA2B,CACvB,gBAAiB,CACb,MAAO,IAAI,aAAa,EAAI2P,CAAS,EACrC,KAAM,YACN,KAAMA,CACV,EACA,cAAe,CACX,MAAO,IAAI,aAAa,EAAIA,CAAS,EACrC,KAAM,YACN,KAAMA,CACV,EACA,WAAY,CAAE,MAAOjQ,EAAQ,UAAW,KAAM,KAAM,CACxD,CACJ,CACJ,CAAC,EAjFLU,EAAA,KAAO,UAAA,EAMPA,EAAA,KAAQ,gBAAmD,IAC3DA,EAAA,KAAQ,cA4EJ,KAAK,WAAauP,EAElB,KAAK,SAAW,KAAK,UAAU,0BAA0B,SAEzD,KAAK,aAAejQ,EAAQ,YAChC,CAMA,IAAI,aAAakQ,EACjB,CACI,MAAMC,EAAY,KAAK,SAAS,gBAC1BC,EAAU,KAAK,SAAS,cACxBC,EAAaH,EAAa,OAC1BvH,EAAQ,IAAI7E,EAElB,MAAA,GAAIuM,EAAa,KAAK,WAElB,MAAM,IAAI,MAAM,2BAA2BA,CAAU,wCAAwC,KAAK,UAAU,GAAG,EAInHF,EAAUE,EAAa,CAAC,EAAI,GAE5B,IAAI1Q,EACAJ,EACAF,EAEJ,QAASmD,EAAI,EAAGA,EAAI6N,EAAY7N,IAChC,CACI,MAAM8N,EAAOJ,EAAa1N,CAAC,EAG3BmG,EAAM,SAAS2H,EAAK,CAAC,CAAC,EAEtB,CAAC3Q,EAAGJ,EAAGF,CAAC,EAAIsJ,EAAM,QAAQ,EAE1BwH,EAAU3N,EAAI,CAAC,EAAI7C,EACnBwQ,EAAW3N,EAAI,EAAK,CAAC,EAAIjD,EACzB4Q,EAAW3N,EAAI,EAAK,CAAC,EAAInD,EAGzBsJ,EAAM,SAAS2H,EAAK,CAAC,CAAC,EAEtB,CAAC3Q,EAAGJ,EAAGF,CAAC,EAAIsJ,EAAM,QAAA,EAElByH,EAAQ5N,EAAI,CAAC,EAAI7C,EACjByQ,EAAS5N,EAAI,EAAK,CAAC,EAAIjD,EACvB6Q,EAAS5N,EAAI,EAAK,CAAC,EAAInD,CAC3B,CAEA,KAAK,cAAgB6Q,CACzB,CAEA,IAAI,cACJ,CACI,OAAO,KAAK,aAChB,CAOA,SACA,CACI,KAAK,aAAe,KAAK,aAC7B,CAOA,IAAI,WAAoB,CAAE,OAAO,KAAK,UAAY,CAMlD,IAAI,WAAoB,CAAE,OAAO,KAAK,SAAS,UAAY,CAC3D,IAAI,UAAUvP,EAAe,CAAE,KAAK,SAAS,WAAaA,CAAO,CAQjE,IAAI,QAAQA,EACZ,CAEIc,cAAY,QAAS,qGAAqG,EAC1H,KAAK,UAAYd,CACrB,CACA,IAAI,SACJ,CAEI,OAAAc,EAAAA,YAAY,QAAS,qGAAqG,EAEnH,KAAK,SAChB,CACJ,EAjMIf,EAHSsP,GAGc,kBAAkD,CACrE,aAAc,CAAC,CAAC,SAAU,GAAQ,CAAC,EACnC,UAAW,IACX,UAAW,MACf,CAPG,EAAA,IAAMO,GAANP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2YCYA,MAAMQ,GAAN,MAAMA,WAAsBzQ,EAAAA,MACnC,CAiCI,YAAYC,EACZ,CACIA,EAAUC,MAAA,CAAA,EAAKuQ,GAAc,iBAAoBxQ,CAEjD,EAAA,MAAME,EAAaC,aAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,iBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,gBAAiB,CACb,OAAQ,CAAE,MAAON,EAAQ,MAAO,KAAM,KAAM,EAC5C,OAAQ,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EACxD,SAAU,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EAC1D,YAAa,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EAC7D,MAAO,CAAE,MAAOA,EAAQ,KAAM,KAAM,KAAM,EAC1C,YAAa,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,CACjE,CACJ,CACJ,CAAC,EApDLU,GAAA,KAAO,UAAA,EAaPA,GAAA,KAAO,MAAA,EAyCH,KAAK,SAAW,KAAK,UAAU,gBAAgB,SAE/C,OAAO,OAAO,KAAMV,CAAO,CAC/B,CAOgB,MACZ4B,EACAC,EACAC,EACAC,EAEJ,CACI,KAAK,SAAS,YAAY,CAAC,EAAIF,EAAM,MAAM,MAC3C,KAAK,SAAS,YAAY,CAAC,EAAIA,EAAM,MAAM,OAC3C,KAAK,SAAS,MAAQ,KAAK,KAE3BD,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAS,CAC5D,CAOA,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,MAAQ,CACnD,IAAI,MAAMpB,EAAe,CAAE,KAAK,SAAS,OAASA,CAAO,CAMzD,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,OAAO,CAAC,CAAG,CACtD,IAAI,MAAMA,EAAe,CAAE,KAAK,SAAS,OAAO,CAAC,EAAIA,CAAO,CAM5D,IAAI,WAAoB,CAAE,OAAO,KAAK,SAAS,OAAO,CAAC,CAAG,CAC1D,IAAI,UAAUA,EAAe,CAAE,KAAK,SAAS,OAAO,CAAC,EAAIA,CAAO,CAMhE,IAAI,SAAkB,CAAE,OAAO,KAAK,SAAS,SAAS,CAAC,CAAG,CAC1D,IAAI,QAAQA,EAAe,CAAE,KAAK,SAAS,SAAS,CAAC,EAAIA,CAAO,CAMhE,IAAI,gBAAyB,CAAE,OAAO,KAAK,SAAS,SAAS,CAAC,CAAG,CACjE,IAAI,eAAeA,EAAe,CAAE,KAAK,SAAS,SAAS,CAAC,EAAIA,CAAO,CAMvE,IAAI,cAAuB,CAAE,OAAO,KAAK,SAAS,SAAS,CAAC,CAAG,CAC/D,IAAI,aAAaA,EAAe,CAAE,KAAK,SAAS,SAAS,CAAC,EAAIA,CAAO,CAMrE,IAAI,YAAqB,CAAE,OAAO,KAAK,SAAS,YAAY,CAAC,CAAG,CAChE,IAAI,WAAWA,EAAe,CAAE,KAAK,SAAS,YAAY,CAAC,EAAIA,CAAO,CAMtE,IAAI,iBAA0B,CAAE,OAAO,KAAK,SAAS,YAAY,CAAC,CAAG,CACrE,IAAI,gBAAgBA,EAAe,CAAE,KAAK,SAAS,YAAY,CAAC,EAAIA,CAAO,CAM3E,IAAI,gBAAyB,CAAE,OAAO,KAAK,SAAS,YAAY,CAAC,CAAG,CACpE,IAAI,eAAeA,EAAe,CAAE,KAAK,SAAS,YAAY,CAAC,EAAIA,CAAO,CAC9E,EA1JID,GAHS8P,GAGc,kBAAwC,CAC3D,MAAO,GACP,MAAO,GACP,UAAW,EACX,QAAS,GACT,eAAgB,GAChB,aAAc,EACd,WAAY,GACZ,gBAAiB,EACjB,eAAgB,GAChB,KAAM,CACV,CAdG,EAAA,IAAMC,GAAND;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+bCpBA,MAAME,EAAN,MAAMA,UAAsB3Q,EACnC,MAAA,CA4CI,eAAesB,EACf,CAhGJ,IAAAC,EAAAC,EAAAC,EAiGQ,IAAIxB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,CAErB,EAAA,OAAOtB,GAAY,WAGnByB,EAAAA,YAAY,QAAS,qHAAqH,EAE1IzB,EAAU,CAAE,UAAWA,CAAQ,EAE3BqB,EAAK,CAAC,IAAM,SAAWrB,EAAQ,MAAQqB,EAAK,CAAC,GAC7CA,EAAK,CAAC,IAAM,SAAWrB,EAAQ,QAAUqB,EAAK,CAAC,GAC/CA,EAAK,CAAC,IAAM,SAAWrB,EAAQ,MAAQqB,EAAK,CAAC,GAC7CA,EAAK,CAAC,IAAM,SAAWrB,EAAQ,SAAWqB,EAAK,CAAC,IAGxDrB,EAAUC,GAAAX,GAAA,CAAA,EAAKoR,EAAc,eAAoB1Q,EAAAA,CAAAA,EAEjD,MAAM4C,GAAUrB,EAAAvB,EAAQ,UAAR,KAAAuB,EAAmB,GAE7BrB,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAU,UAAA,KAAK,CAC7B,OAAAC,EACA,SAAUC,GAAS,QAAQ,mBAAoBiQ,EAAc,aAAa9N,CAAO,EAAE,QAAQ,CAAC,CAAC,EAC7F,KAAM,gBACV,CAAC,EAED,MAAM,CACF,WAAA1C,EACA,UAAAI,EACA,UAAW,CACP,gBAAiB,CACb,WAAY,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EAC5D,OAAQ,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EACxD,OAAQ,CAAE,MAAON,EAAQ,MAAO,KAAM,KAAM,EAC5C,WAAY,CAAE,MAAO,EAAG,KAAM,KAAM,EACpC,UAAW,CAAE,MAAOA,EAAQ,SAAW,EAAI,EAAG,KAAM,KAAM,CAC9D,CACJ,CACJ,CAAC,EA9ELU,EAAA,KAAO,UAAA,EAQPA,EAAA,KAAQ,YAAA,EACRA,EAAA,KAAQ,UACRA,EAAAA,EAAA,KAAQ,QAAA,EAsEJ,KAAK,SAAW,KAAK,UAAU,gBAAgB,SAC/C,KAAK,SAAS,WAAagQ,EAAc,aAAa9N,CAAO,EAC7D,KAAK,OAAS,IAAIkB,EAClB,MAAA,KAAK,OAAQtC,EAAAxB,EAAQ,QAAR,KAAAwB,EAAiB,EAE9B,OAAO,OAAO,KAAMxB,CAAO,CAC/B,CAOgB,MACZ4B,EACAC,EACAC,EACAC,EAEJ,CACI,KAAK,SAAS,WAAW,CAAC,EAAI,KAAK,UAAYF,EAAM,OAAO,MAC5D,KAAK,SAAS,WAAW,CAAC,EAAI,KAAK,UAAYA,EAAM,OAAO,OAE5DD,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAS,CAC5D,CAMA,OAAe,aAAaa,EAC5B,CACI,OAAO,YAAa,KAAK,GAAK,EAAK,KAAK,IACpCA,EAAU8N,EAAc,YACxBA,EAAc,WAClB,GAAG,QAAQ,CAAC,CAAC,CACjB,CAMA,IAAI,WAAoB,CAAE,OAAO,KAAK,UAAY,CAClD,IAAI,UAAU/P,EAAe,CAAE,KAAK,WAAa,KAAK,QAAUA,CAAO,CAOvE,IAAI,OAAqB,CAAE,OAAO,KAAK,OAAO,KAAsB,CACpE,IAAI,MAAMA,EACV,CACI,KAAK,OAAO,SAASA,CAAK,EAC1B,KAAM,CAAChB,EAAGJ,EAAGF,CAAC,EAAI,KAAK,OAAO,UAE9B,KAAK,SAAS,OAAO,CAAC,EAAIM,EAC1B,KAAK,SAAS,OAAO,CAAC,EAAIJ,EAC1B,KAAK,SAAS,OAAO,CAAC,EAAIF,CAC9B,CAMA,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,MAAQ,CACnD,IAAI,MAAMsB,EAAe,CAAE,KAAK,SAAS,OAASA,CAAO,CAOzD,IAAI,SAAkB,CAAE,OAAO,KAAK,QAAU,CAC9C,IAAI,QAAQA,EACZ,CACI,KAAK,SAAWA,EAChB,KAAK,SAAS,WAAa+P,EAAc,aAAa/P,CAAK,CAC/D,CAMA,IAAI,UAAoB,CAAE,OAAO,KAAK,SAAS,YAAc,CAAG,CAChE,IAAI,SAASA,EAAgB,CAAE,KAAK,SAAS,UAAYA,EAAQ,EAAI,CAAG,CAC5E,EApLID,EAHSgQ,EAGc,kBAAwC,CAC3D,UAAW,EACX,MAAO,EACP,MAAO,EACP,QAAS,GACT,SAAU,EACd,CAGAhQ,EAAAA,EAZSgQ,EAYK,cAAc,CAG5BhQ,EAAAA,EAfSgQ,EAeK,cAAc,GAfzB,EAAA,IAAMC,GAAND;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECpCA,MAAME,WAAuB7Q,EACpC,MAAA,CAII,YAAY4F,EAAa,GACzB,CACI,MAAMzF,EAAaC,aAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,iBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,iBAAkB,CACd,MAAO,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,CAC3D,CACJ,CACJ,CAAC,EAED,KAAK,KAAOqF,CAChB,CAMA,IAAI,MAAa,CAAE,OAAO,KAAK,UAAU,iBAAiB,SAAS,KAAO,CAC1E,IAAI,KAAKhF,EACT,CACQA,aAAiBkQ,EAAAA,OAEjB,KAAK,MAAQlQ,EAAM,EACnB,KAAK,MAAQA,EAAM,GAEd,MAAM,QAAQA,CAAK,EAExB,KAAK,UAAU,iBAAiB,SAAS,MAAQA,EAIjD,KAAK,MAAQ,KAAK,MAAQA,CAElC,CAMA,IAAI,OAAgB,CAAE,OAAO,KAAK,UAAU,iBAAiB,SAAS,MAAM,CAAC,CAAG,CAChF,IAAI,MAAMA,EAAe,CAAE,KAAK,UAAU,iBAAiB,SAAS,MAAM,CAAC,EAAIA,CAAO,CAMtF,IAAI,OAAgB,CAAE,OAAO,KAAK,UAAU,iBAAiB,SAAS,MAAM,CAAC,CAAG,CAChF,IAAI,MAAMA,EAAe,CAAE,KAAK,UAAU,iBAAiB,SAAS,MAAM,CAAC,EAAIA,CAAO,CAC1F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2aC7CO,MAAMmQ,GAAN,MAAMA,WAAyB/Q,EACtC,MAAA,CAiCI,eAAesB,EACf,CA5EJ,IAAAC,EA6EQ,IAAItB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,CAAA,EAEzB,GAAI,OAAOtB,GAAY,SACvB,CAMI,GAJAyB,EAAAA,YAAY,QAAS,+GAA+G,EAEpIzB,EAAU,CAAE,MAAOA,CAAQ,EAEvBqB,EAAK,CAAC,EACV,CACI,MAAMqK,EAAI,MAAOrK,EAAK,CAAC,EAAIA,EAAK,CAAC,EAAE,EAAIA,EAAK,CAAC,EAAE,CAAC,EAC1CmK,EAAI,MAAOnK,EAAK,CAAC,EAAIA,EAAK,CAAC,EAAE,EAAIA,EAAK,CAAC,EAAE,CAAC,EAEhDrB,EAAQ,OAAS,CAAE,EAAA0L,EAAG,EAAAF,CAAE,CAC5B,CACInK,EAAK,CAAC,IAAGrB,EAAQ,WAAaqB,EAAK,CAAC,GACpCA,EAAK,CAAC,IAAGrB,EAAQ,OAASqB,EAAK,CAAC,EACxC,CAEArB,EAAUC,GAAAX,GAAA,CAAA,EAAKwR,GAAiB,eAAoB9Q,EAAAA,CAAAA,EAEpD,MAAME,EAAaC,aAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAU,UAAA,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,oBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,mBAAoB,CAChB,QAAS,CAAE,MAAO,EAAG,KAAM,KAAM,EACjC,QAAS,CAAE,MAAON,EAAQ,OAAQ,KAAM,WAAY,EACpD,YAAa,CAAE,MAAOA,EAAQ,WAAY,KAAM,KAAM,EACtD,QAAS,CAAE,MAAOA,EAAQ,OAAQ,KAAM,KAAM,CAClD,CACJ,CACJ,CAAC,EA5ELU,EAAA,KAAO,UAOPA,EAAAA,EAAA,KAAQ,QACRA,EAAAA,EAAA,KAAQ,aAsEJ,EAAA,KAAK,SAAW,KAAK,UAAU,mBAAmB,SAElD,OAAO,OAAO,KAAMV,CAAO,CAC/B,CAEQ,mBACR,CACI,KAAK,SAAS,YAAc,KAAK,SAAW,EAAI,KAAK,WAAa,CACtE,CAMA,IAAI,OAAgB,CAAE,OAAO,KAAK,MAAQ,CAC1C,IAAI,MAAMW,EACV,CACI,KAAK,OAASA,EACd,KAAK,SAAS,QAAUA,EAAQ,KAAK,GAAK,IAC1C,KAAK,mBACT,CAQA,IAAI,QAAoB,CAAE,OAAO,KAAK,SAAS,OAAS,CACxD,IAAI,OAAOA,EACX,CACQ,MAAM,QAAQA,CAAK,IAEnBA,EAAQ,CAAE,EAAGA,EAAM,CAAC,EAAG,EAAGA,EAAM,CAAC,CAAE,GAGvC,KAAK,SAAS,QAAUA,CAC5B,CAMA,IAAI,SAAkB,CAAE,OAAO,KAAK,OAAO,CAAG,CAC9C,IAAI,QAAQA,EAAe,CAAE,KAAK,OAAO,EAAIA,CAAO,CAMpD,IAAI,SAAkB,CAAE,OAAO,KAAK,OAAO,CAAG,CAC9C,IAAI,QAAQA,EAAe,CAAE,KAAK,OAAO,EAAIA,CAAO,CAMpD,IAAI,YAAqB,CAAE,OAAO,KAAK,WAAa,CACpD,IAAI,WAAWA,EACf,CACI,KAAK,YAAcA,EACnB,KAAK,kBAAA,CACT,CAMA,IAAI,QAAiB,CAAE,OAAO,KAAK,SAAS,OAAS,CACrD,IAAI,OAAOA,EAAe,CAAE,KAAK,SAAS,QAAUA,EAAQ,GAAKA,IAAU,IAAW,GAAKA,CAAO,CACtG,EA3JID,EAHSoQ,GAGc,kBAA2C,CAC9D,MAAO,EACP,OAAQ,CAAE,EAAG,EAAG,EAAG,CAAE,EACrB,WAAY,EACZ,OAAQ,EACZ,CARG,EAAA,IAAMC,GAAND;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2YCYA,MAAME,GAAN,MAAMA,WAAyBjR,EACtC,MAAA,CA8BI,YAAYC,EACZ,CACIA,EAAUC,GAAAL,GAAA,CAAA,EAAKoR,GAAiB,eAAA,EAAoBhR,CAEpD,EAAA,MAAME,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EACKC,EAAYC,EAAU,UAAA,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,mBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,mBAAoB,CAChB,QAAS,CAAE,MAAON,EAAQ,OAAS,EAAI,EAAG,KAAM,KAAM,EACtD,UAAW,CAAE,MAAOA,EAAQ,SAAU,KAAM,KAAM,EAClD,WAAY,CAAE,MAAOA,EAAQ,UAAW,KAAM,WAAY,EAC1D,YAAa,CAAE,MAAOA,EAAQ,WAAY,KAAM,WAAY,EAC5D,OAAQ,CAAE,MAAOA,EAAQ,MAAO,KAAM,WAAY,EAClD,MAAO,CAAE,MAAOA,EAAQ,KAAM,KAAM,KAAM,EAC1C,YAAa,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,CACjE,CACJ,CACJ,CAAC,EArDLU,GAAA,KAAO,UAcPA,EAAAA,GAAA,KAAO,OAAO,CAyCV,EAAA,KAAK,SAAW,KAAK,UAAU,mBAAmB,SAElD,OAAO,OAAO,KAAMV,CAAO,CAC/B,CAOgB,MACZ4B,EACAC,EACAC,EACAC,EAEJ,CACI,KAAK,SAAS,YAAY,CAAC,EAAIF,EAAM,MAAM,MAC3C,KAAK,SAAS,YAAY,CAAC,EAAIA,EAAM,MAAM,OAE3C,KAAK,SAAS,MAAQ,KAAK,KAE3BD,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAS,CAC5D,CAMA,IAAI,QAAkB,CAAE,OAAO,KAAK,SAAS,QAAU,EAAK,CAC5D,IAAI,OAAOpB,EAAgB,CAAE,KAAK,SAAS,QAAUA,EAAQ,EAAI,CAAG,CAOpE,IAAI,UAAmB,CAAE,OAAO,KAAK,SAAS,SAAW,CACzD,IAAI,SAASA,EAAe,CAAE,KAAK,SAAS,UAAYA,CAAO,CAM/D,IAAI,WAAmB,CAAE,OAAO,MAAM,KAAK,KAAK,SAAS,UAAU,CAAY,CAC/E,IAAI,UAAUA,EACd,CACI,KAAK,SAAS,WAAW,CAAC,EAAIA,EAAM,CAAC,EACrC,KAAK,SAAS,WAAW,CAAC,EAAIA,EAAM,CAAC,CACzC,CAMA,IAAI,gBAAyB,CAAE,OAAO,KAAK,SAAS,WAAW,CAAC,CAAG,CACnE,IAAI,eAAeA,EAAe,CAAE,KAAK,SAAS,WAAW,CAAC,EAAIA,CAAO,CAMzE,IAAI,cAAuB,CAAE,OAAO,KAAK,SAAS,WAAW,CAAC,CAAG,CACjE,IAAI,aAAaA,EAAe,CAAE,KAAK,SAAS,WAAW,CAAC,EAAIA,CAAO,CAMvE,IAAI,YAAoB,CAAE,OAAO,MAAM,KAAK,KAAK,SAAS,WAAW,CAAY,CACjF,IAAI,WAAWA,EACf,CACI,KAAK,SAAS,YAAY,CAAC,EAAIA,EAAM,CAAC,EACtC,KAAK,SAAS,YAAY,CAAC,EAAIA,EAAM,CAAC,CAC1C,CAMA,IAAI,iBAA0B,CAAE,OAAO,KAAK,SAAS,YAAY,CAAC,CAAG,CACrE,IAAI,gBAAgBA,EAAe,CAAE,KAAK,SAAS,YAAY,CAAC,EAAIA,CAAO,CAM3E,IAAI,eAAwB,CAAE,OAAO,KAAK,SAAS,YAAY,CAAC,CAAG,CACnE,IAAI,cAAcA,EAAe,CAAE,KAAK,SAAS,YAAY,CAAC,EAAIA,CAAO,CAMzE,IAAI,OAAe,CAAE,OAAO,MAAM,KAAK,KAAK,SAAS,MAAM,CAAY,CACvE,IAAI,MAAMA,EACV,CACI,KAAK,SAAS,OAAO,CAAC,EAAIA,EAAM,CAAC,EACjC,KAAK,SAAS,OAAO,CAAC,EAAIA,EAAM,CAAC,CACrC,CAMA,IAAI,YAAqB,CAAE,OAAO,KAAK,SAAS,OAAO,CAAC,CAAG,CAC3D,IAAI,WAAWA,EAAe,CAAE,KAAK,SAAS,OAAO,CAAC,EAAIA,CAAO,CAMjE,IAAI,UAAmB,CAAE,OAAO,KAAK,SAAS,OAAO,CAAC,CAAG,CACzD,IAAI,SAASA,EAAe,CAAE,KAAK,SAAS,OAAO,CAAC,EAAIA,CAAO,CACnE,EAlLID,GAHSsQ,GAGc,kBAA2C,CAC9D,OAAQ,GACR,SAAU,GACV,UAAW,CAAC,EAAG,EAAE,EACjB,WAAY,CAAC,GAAI,GAAG,EACpB,MAAO,CAAC,EAAG,CAAC,EACZ,KAAM,CACV,CAVG,EAAA,IAAMC,GAAND;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0YCnBA,MAAME,GAAN,MAAMA,WAAuBnR,QACpC,CA2BI,eAAesB,EACf,CA/DJ,IAAAC,EAgEQ,IAAItB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,CAErB,GAAA,MAAM,QAAQtB,CAAO,GAAM,MAAOA,GAAW,MAAOA,KAGpDyB,cAAY,QAAS,4FAA4F,EAEjHzB,EAAU,CAAE,IAAKA,CAAQ,EAErBqB,EAAK,CAAC,IAAM,SAAWrB,EAAQ,MAAQqB,EAAK,CAAC,GAC7CA,EAAK,CAAC,IAAM,SAAWrB,EAAQ,KAAOqB,EAAK,CAAC,IAGpDrB,EAAUC,MAAA,CAAKiR,EAAAA,GAAe,iBAAoBlR,CAElD,EAAA,MAAME,EAAaC,EAAW,WAAA,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,YAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,kBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,iBAAkB,CACd,KAAM,CAAE,MAAON,EAAQ,IAAK,KAAM,WAAY,EAC9C,OAAQ,CAAE,MAAOA,EAAQ,MAAO,KAAM,WAAY,EAClD,MAAO,CAAE,MAAOA,EAAQ,KAAM,KAAM,WAAY,CACpD,CACJ,CACJ,CAAC,EA/DLU,GAAA,KAAO,YAiEH,KAAK,SAAW,KAAK,UAAU,iBAAiB,SAEhD,OAAO,OAAO,KAAMV,CAAO,CAC/B,CAMA,IAAI,KAAiB,CAAE,OAAO,KAAK,SAAS,IAAM,CAClD,IAAI,IAAIW,EACR,CACQ,MAAM,QAAQA,CAAK,IAEnBA,EAAQ,CAAE,EAAGA,EAAM,CAAC,EAAG,EAAGA,EAAM,CAAC,CAAE,GAGvC,KAAK,SAAS,KAAOA,CACzB,CAMA,IAAI,MAAe,CAAE,OAAO,KAAK,IAAI,CAAG,CACxC,IAAI,KAAKA,EAAe,CAAE,KAAK,IAAI,EAAIA,CAAO,CAM9C,IAAI,MAAe,CAAE,OAAO,KAAK,IAAI,CAAG,CACxC,IAAI,KAAKA,EAAe,CAAE,KAAK,IAAI,EAAIA,CAAO,CAM9C,IAAI,OAAmB,CAAE,OAAO,KAAK,SAAS,MAAQ,CACtD,IAAI,MAAMA,EACV,CACQ,MAAM,QAAQA,CAAK,IAEnBA,EAAQ,CAAE,EAAGA,EAAM,CAAC,EAAG,EAAGA,EAAM,CAAC,CAAE,GAGvC,KAAK,SAAS,OAASA,CAC3B,CAMA,IAAI,QAAiB,CAAE,OAAO,KAAK,MAAM,CAAG,CAC5C,IAAI,OAAOA,EAAe,CAAE,KAAK,MAAM,EAAIA,CAAO,CAMlD,IAAI,QAAiB,CAAE,OAAO,KAAK,MAAM,CAAG,CAC5C,IAAI,OAAOA,EAAe,CAAE,KAAK,MAAM,EAAIA,CAAO,CAMlD,IAAI,MAAkB,CAAE,OAAO,KAAK,SAAS,KAAO,CACpD,IAAI,KAAKA,EACT,CACQ,MAAM,QAAQA,CAAK,IAEnBA,EAAQ,CAAE,EAAGA,EAAM,CAAC,EAAG,EAAGA,EAAM,CAAC,CAAE,GAGvC,KAAK,SAAS,MAAQA,CAC1B,CAMA,IAAI,OAAgB,CAAE,OAAO,KAAK,KAAK,CAAG,CAC1C,IAAI,MAAMA,EAAe,CAAE,KAAK,KAAK,EAAIA,CAAO,CAMhD,IAAI,OAAgB,CAAE,OAAO,KAAK,KAAK,CAAG,CAC1C,IAAI,MAAMA,EAAe,CAAE,KAAK,KAAK,EAAIA,CAAO,CACpD,EAlKID,GAHSwQ,GAGc,kBAAyC,CAC5D,IAAK,CAAE,EAAG,IAAK,EAAG,CAAE,EACpB,MAAO,CAAE,EAAG,EAAG,EAAG,EAAG,EACrB,KAAM,CAAE,EAAG,EAAG,EAAG,CAAE,CACvB,CAPG,EAAA,IAAMC,GAAND;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0YC2BA,MAAME,GAAN,MAAMA,WAAwBrR,EAAAA,MACrC,CA8CI,eAAesB,EACf,CA7GJ,IAAAC,EA8GQ,IAAItB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,IAErB,MAAM,QAAQtB,CAAO,GAAM,MAAOA,GAAW,MAAOA,KAGpDyB,EAAAA,YAAY,QAAS,2IAA2I,EAEhKzB,EAAUC,GAAA,CAAE,OAAQD,CAAAA,EAAYqB,EAAK,CAAC,CAAA,EAElCA,EAAK,CAAC,IAAM,SAAWrB,EAAQ,KAAOqB,EAAK,CAAC,IAGpDrB,EAAUC,MAAA,CAAKmR,EAAAA,GAAgB,iBAAoBpR,CAEnD,EAAA,MAAME,EAAaC,EAAW,WAAA,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,kBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,kBAAmB,CACf,MAAO,CAAE,MAAON,EAAQ,KAAM,KAAM,KAAM,EAC1C,QAAS,CAAE,MAAOA,EAAQ,OAAQ,KAAM,WAAY,EACpD,OAAQ,CAAE,MAAOA,EAAQ,MAAO,KAAM,KAAM,EAC5C,MAAO,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,CAC3D,CACJ,CACJ,CAAC,EAzELU,GAAA,KAAO,UAAA,EAQPA,GAAA,KAAO,MAAA,EAmEH,KAAK,KAAO,EAEZ,KAAK,SAAW,KAAK,UAAU,kBAAkB,SAEjD,OAAO,OAAO,KAAMV,CAAO,CAC/B,CAEgB,MACZ4B,EACAC,EACAC,EACAC,EAEJ,CAII,KAAK,SAAS,MAAQ,KAAK,KAC3BH,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAS,CAC5D,CAMA,IAAI,QAAoB,CAAE,OAAO,KAAK,SAAS,OAAS,CACxD,IAAI,OAAOpB,EACX,CACQ,MAAM,QAAQA,CAAK,IAEnBA,EAAQ,CAAE,EAAGA,EAAM,CAAC,EAAG,EAAGA,EAAM,CAAC,CAAE,GAGvC,KAAK,SAAS,QAAUA,CAC5B,CAMA,IAAI,SAAkB,CAAE,OAAO,KAAK,SAAS,QAAQ,CAAG,CACxD,IAAI,QAAQA,EAAe,CAAE,KAAK,SAAS,QAAQ,EAAIA,CAAO,CAM9D,IAAI,SAAkB,CAAE,OAAO,KAAK,SAAS,QAAQ,CAAG,CACxD,IAAI,QAAQA,EAAe,CAAE,KAAK,SAAS,QAAQ,EAAIA,CAAO,CAM9D,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,MAAQ,CACnD,IAAI,MAAMA,EAAe,CAAE,KAAK,SAAS,OAASA,CAAO,CAMzD,IAAI,WAAoB,CAAE,OAAO,KAAK,SAAS,MAAM,CAAC,CAAG,CACzD,IAAI,UAAUA,EAAe,CAAE,KAAK,SAAS,MAAM,CAAC,EAAIA,CAAO,CAM/D,IAAI,YAAqB,CAAE,OAAO,KAAK,SAAS,MAAM,CAAC,CAAG,CAC1D,IAAI,WAAWA,EAAe,CAAE,KAAK,SAAS,MAAM,CAAC,EAAIA,CAAO,CAMhE,IAAI,YAAqB,CAAE,OAAO,KAAK,SAAS,MAAM,CAAC,CAAG,CAC1D,IAAI,WAAWA,EAAe,CAAE,KAAK,SAAS,MAAM,CAAC,EAAIA,CAAO,CAMhE,IAAI,QAAiB,CAAE,OAAO,KAAK,SAAS,MAAM,CAAC,CAAG,CACtD,IAAI,OAAOA,EAAe,CAAE,KAAK,SAAS,MAAM,CAAC,EAAIA,CAAO,CAChE,EA9KID,GAHS0Q,GAGc,kBAA0C,CAE7D,OAAQ,CAAE,EAAG,EAAG,EAAG,CAAE,EAErB,MAAO,IAEP,UAAW,GAEX,WAAY,IAEZ,WAAY,EAEZ,OAAQ,EACZ,CAhBG,EAAA,IAAMC,GAAND;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GC7DP5R,GAAA,OAAA,eAAA0B,GAAA,OAAA,sBAAA3B,GAAA,OAAA,UAAA,eAAAmM,GAAA,OAAA,UAAA,qBAAAvK,GAAA,CAAAzB,EAAAwD,EAAAvD,IAAAuD,KAAAxD,EAAAF,GAAAE,EAAAwD,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAvD,CAAA,CAAA,EAAAD,EAAAwD,CAAA,EAAAvD,EAAAiQ,GAAA,CAAAlQ,EAAAwD,IAAA,CAAA,QAAAvD,KAAAuD,IAAAA,EAAA,IAAA3D,GAAA,KAAA2D,EAAAvD,CAAA,GAAAwB,GAAAzB,EAAAC,EAAAuD,EAAAvD,CAAA,CAAA,EAAA,GAAAuB,GAAA,QAAAvB,KAAAuB,GAAAgC,CAAA,EAAAwI,GAAA,KAAAxI,EAAAvD,CAAA,GAAAwB,GAAAzB,EAAAC,EAAAuD,EAAAvD,CAAA,CAAA,EAAA,OAAAD,CAAA,EAAAJ,EAAA,CAAAI,EAAAwD,EAAAvD,KAAAwB,GAAAzB,EAAA,OAAAwD,GAAA,SAAAA,EAAA,GAAAA,EAAAvD,CAAA,EAAAA,GAoDO,MAAM2R,GAAN,MAAMA,WAA6BvR,EAAAA,MAC1C,CA8BI,eAAesB,EACf,CApFJ,IAAAC,EAAAC,EAqFQ,IAAIvB,GAAUsB,EAAAD,EAAK,CAAC,IAAN,KAAAC,EAAW,CAezB,EAAA,GAbItB,aAAmBuD,YAGnB9B,EAAAA,YAAY,QAAS,wGAAwG,EAE7HzB,EAAU,CAAE,SAAUA,CAAQ,EAE1BqB,EAAK,CAAC,IAAM,SAAWrB,EAAQ,MAAQqB,EAAK,CAAC,GAC7CA,EAAK,CAAC,IAAM,SAAWrB,EAAQ,MAAQqB,EAAK,CAAC,IAGrDrB,EAAUC,MAAA,GAAKqR,GAAqB,iBAAoBtR,CAEpD,EAAA,CAACA,EAAQ,SAAU,MAAM,MAAM,kEAAkE,EAErG,MAAME,EAAaC,EAAW,WAAA,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EACKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,wBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,uBAAwB,CACpB,OAAQ,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,EACxD,OAAQ,CAAE,MAAON,EAAQ,MAAO,KAAM,KAAM,EAC5C,YAAa,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,CACjE,EACA,YAAaA,EAAQ,SAAS,OAC9B,YAAaA,EAAQ,SAAS,OAAO,KACzC,CACJ,CAAC,EArELU,EAAA,KAAO,UAAA,EAMPA,EAAA,KAAQ,QAAA,EACRA,EAAA,KAAQ,aAgEJ,KAAK,SAAW,KAAK,UAAU,uBAAuB,SACtD,KAAK,OAAS,IAAIoD,QAClB,KAAK,OAAQvC,EAAAvB,EAAQ,QAAR,KAAAuB,EAAiB,EAE9B,OAAO,OAAO,KAAMvB,CAAO,CAC/B,CAOgB,MACZ4B,EACAC,EACAC,EACAC,EAEJ,CACI,KAAK,SAAS,YAAY,CAAC,EAAIF,EAAM,MAAM,MAC3C,KAAK,SAAS,YAAY,CAAC,EAAIA,EAAM,MAAM,OAG3CD,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAS,CAC5D,CAGA,IAAI,UAAoB,CAAE,OAAO,KAAK,SAAW,CACjD,IAAI,SAASpB,EACb,CACI,KAAK,UAAYA,EACjB,KAAK,UAAU,YAAcA,EAAM,OACnC,KAAK,UAAU,YAAcA,EAAM,OAAO,KAC9C,CAOA,IAAI,OAAqB,CAAE,OAAO,KAAK,OAAO,KAAsB,CACpE,IAAI,MAAMA,EACV,CACI,KAAK,OAAO,SAASA,CAAK,EAC1B,KAAM,CAAChB,EAAGJ,EAAGF,CAAC,EAAI,KAAK,OAAO,QAAQ,EAEtC,KAAK,SAAS,OAAO,CAAC,EAAIM,EAC1B,KAAK,SAAS,OAAO,CAAC,EAAIJ,EAC1B,KAAK,SAAS,OAAO,CAAC,EAAIF,CAC9B,CAMA,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,MAAQ,CACnD,IAAI,MAAMsB,EAAe,CAAE,KAAK,SAAS,OAASA,CAAO,CAC7D,EAtIID,EAHS4Q,GAGc,kBAA+C,CAClE,SAAU/N,UAAQ,MAClB,MAAO,EACP,MAAO,CACX,CAAA,MAPSgO,GAAND;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICpDPhO,GAAA,OAAA,eAAAJ,GAAA,OAAA,sBAAA7D,GAAA,OAAA,UAAA,eAAAoM,GAAA,OAAA,UAAA,qBAAA/L,GAAA,CAAAE,EAAA,EAAAD,IAAA,KAAAC,EAAA0D,GAAA1D,EAAA,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAD,CAAA,CAAA,EAAAC,EAAA,CAAA,EAAAD,EAAAwB,GAAA,CAAAvB,EAAA,IAAA,CAAA,QAAAD,KAAA,IAAA,EAAA,CAAA,GAAAN,GAAA,KAAA,EAAAM,CAAA,GAAAD,GAAAE,EAAAD,EAAA,EAAAA,CAAA,CAAA,EAAA,GAAAuD,GAAA,QAAAvD,KAAAuD,GAAA,CAAA,EAAAuI,GAAA,KAAA,EAAA9L,CAAA,GAAAD,GAAAE,EAAAD,EAAA,EAAAA,CAAA,CAAA,EAAA,OAAAC,CAAA,EAAAL,GAAA,CAAAK,EAAA,EAAAD,KAAAD,GAAAE,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAAD,CAAA,EAAAA,GAgDO,MAAM6R,GAAN,MAAMA,WAA2BzR,EACxC,MAAA,CAcI,YAAYC,EACZ,CAhEJ,IAAAsB,EAAAC,EAAAC,EAAAsM,EAAAC,EAAA0D,EAiEQzR,EAAUC,GAAAkB,GAAA,CAAA,EAAKqQ,GAAmB,QAAA,EAAaxR,GAE/C,MAAME,EAAaC,aAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,gBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,gBAAiB,CACb,UAAW,CAAE,OAAOgB,EAAAtB,GAAA,KAAA,OAAAA,EAAS,WAAT,KAAAsB,EAAqB,EAAG,KAAM,KAAM,EACxD,YAAa,CAAE,OAAOC,EAAAvB,GAAA,KAAAA,OAAAA,EAAS,aAAT,KAAAuB,EAAuB,EAAG,KAAM,KAAM,EAC5D,SAAU,CAAE,OAAOC,EAAAxB,GAAA,KAAA,OAAAA,EAAS,UAAT,KAAAwB,EAAoB,EAAG,KAAM,KAAM,EACtD,SAAU,CAAE,OAAOsM,EAAA9N,GAAA,KAAAA,OAAAA,EAAS,UAAT,KAAA8N,EAAoB,EAAG,KAAM,KAAM,EACtD,SAAU,CAAE,OAAOC,EAAA/N,GAAA,YAAAA,EAAS,UAAT,KAAA+N,EAAoB,EAAG,KAAM,KAAM,EACtD,MAAO,CAAE,OAAO0D,EAAAzR,GAAA,KAAAA,OAAAA,EAAS,OAAT,KAAAyR,EAAiB,EAAG,KAAM,KAAM,CACpD,CACJ,CACJ,CAAC,CACL,CAMA,IAAI,UAAmB,CAAE,OAAO,KAAK,UAAU,gBAAgB,SAAS,SAAW,CACnF,IAAI,SAAS9Q,EAAe,CAAE,KAAK,UAAU,gBAAgB,SAAS,UAAYA,CAAO,CAMzF,IAAI,YAAqB,CAAE,OAAO,KAAK,UAAU,gBAAgB,SAAS,WAAa,CACvF,IAAI,WAAWA,EAAe,CAAE,KAAK,UAAU,gBAAgB,SAAS,YAAcA,CAAO,CAM7F,IAAI,SAAkB,CAAE,OAAO,KAAK,UAAU,gBAAgB,SAAS,QAAU,CACjF,IAAI,QAAQA,EAAe,CAAE,KAAK,UAAU,gBAAgB,SAAS,SAAWA,CAAO,CAMvF,IAAI,SAAkB,CAAE,OAAO,KAAK,UAAU,gBAAgB,SAAS,QAAU,CACjF,IAAI,QAAQA,EAAe,CAAE,KAAK,UAAU,gBAAgB,SAAS,SAAWA,CAAO,CAMvF,IAAI,SAAkB,CAAE,OAAO,KAAK,UAAU,gBAAgB,SAAS,QAAU,CACjF,IAAI,QAAQA,EAAe,CAAE,KAAK,UAAU,gBAAgB,SAAS,SAAWA,CAAO,CAOvF,IAAI,MAAe,CAAE,OAAO,KAAK,UAAU,gBAAgB,SAAS,KAAO,CAC3E,IAAI,KAAKA,EAAe,CAAE,KAAK,UAAU,gBAAgB,SAAS,MAAQA,CAAO,CACrF,EA3FID,GAHS8Q,GAGc,WAAsC,CACzD,SAAU,GACV,WAAY,GACZ,QAAS,EACT,QAAS,EACT,QAAS,EACT,KAAM,EACV,CAAA,MAVSE,GAANF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GChDPzQ,GAAA,OAAA,eAAA2K,GAAA,OAAA,iBAAAkE,GAAA,OAAA,0BAAA1O,GAAA,OAAA,sBAAAsK,GAAA,OAAA,UAAA,eAAAjM,GAAA,OAAA,UAAA,qBAAA2D,GAAA,CAAAV,EAAA7C,EAAAD,IAAAC,KAAA6C,EAAAzB,GAAAyB,EAAA7C,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAD,CAAA,CAAA,EAAA8C,EAAA7C,CAAA,EAAAD,EAAAG,GAAA,CAAA2C,EAAA7C,IAAA,CAAA,QAAAD,KAAAC,IAAAA,EAAA,IAAA6L,GAAA,KAAA7L,EAAAD,CAAA,GAAAwD,GAAAV,EAAA9C,EAAAC,EAAAD,CAAA,CAAA,EAAA,GAAAwB,GAAA,QAAAxB,KAAAwB,GAAAvB,CAAA,EAAAJ,GAAA,KAAAI,EAAAD,CAAA,GAAAwD,GAAAV,EAAA9C,EAAAC,EAAAD,CAAA,CAAA,EAAA,OAAA8C,CAAA,EAAAc,GAAA,CAAAd,EAAA7C,IAAA+L,GAAAlJ,EAAAoN,GAAAjQ,CAAA,CAAA,EAAAwB,GAAA,CAAAqB,EAAA7C,EAAAD,KAAAwD,GAAAV,EAAA,OAAA7C,GAAA,SAAAA,EAAA,GAAAA,EAAAD,CAAA,EAAAA,GAiCO,MAAMiS,GAAN,MAAMA,WAA4B5R,EACzC,MAAA,CAkBI,YAAYC,EACZ,CACI,KAAM,CAAE,MAAA8M,EAAO,OAAAC,CAAO,EAAI6E,EAAAA,WAAW,eAErC5R,EAAUC,GAAA2E,GAAA3E,GAAA,CAAA,EACH0R,GAAoB,eAAA,EADjB,CAGN,MAAO,CAAE,EAAG,EAAG,EAAG5E,EAAS,CAAE,EAE7B,IAAK,CAAE,EAAGD,EAAO,EAAGC,EAAS,CAAE,CAC5B/M,CAAAA,EAAAA,CAAAA,EAGP,MAAME,EAAaC,aAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,wBACV,CAAC,EAED,MAAM,CACF,WAAAP,EACA,UAAAI,EACA,UAAW,CACP,kBAAmB,CACf,MAAO,CACH,MAAO,IAAI,aAAa,CACpBN,EAAQ,KACRA,EAAQ,YACZ,CAAC,EAAG,KAAM,WACd,EACA,OAAQ,CAAE,MAAOA,EAAQ,MAAO,KAAM,WAAY,EAClD,KAAM,CAAE,MAAOA,EAAQ,IAAK,KAAM,WAAY,EAC9C,OAAQ,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,CAAC,CAAC,EAAG,KAAM,WAAY,CACjE,CACJ,CACJ,CAAC,EAvDLU,GAAA,KAAO,UAOPA,EAAAA,GAAA,KAAQ,WAAA,EAkDJ,KAAK,SAAW,KAAK,UAAU,kBAAkB,SACjD,KAAK,UAAYV,EAAQ,IAC7B,CAMO,aACP,CAII,GAHA,KAAK,SAAS,OAAO,CAAC,EAAI,EAC1B,KAAK,SAAS,OAAO,CAAC,EAAI,EAEtB,KAAK,YAAc,OAAW,OAElC,MAAM6R,EAAM,KAAK,SAAS,KACpBC,EAAQ,KAAK,SAAS,OAEtBC,EAAKF,EAAI,EAAIC,EAAM,EACnBE,EAAKH,EAAI,EAAIC,EAAM,EACnB/Q,EAAI,KAAK,KAAMgR,EAAKA,EAAOC,EAAKA,CAAG,EAEnCC,EAAS,KAAK,YAAc,WAElC,KAAK,SAAS,OAAO,CAAC,EAAKA,EAAkB,CAACD,EAAKjR,EAAfgR,EAAKhR,EACzC,KAAK,SAAS,OAAO,CAAC,EAAKkR,EAAkBF,EAAKhR,EAAdiR,EAAKjR,CAC7C,CACJ,EA3FIL,GAHSiR,GAGc,kBAA8C,CAEjE,KAAM,IAEN,aAAc,GAClB,CAAA,MARSO,EAANP,GCjCP,IAAA/B,GAAA,OAAA,eAAAnE,GAAA,OAAA,iBAAApM,GAAA,OAAA,0BAAAiE,GAAA,OAAA,sBAAA6O,GAAA,OAAA,UAAA,eAAAzF,GAAA,OAAA,UAAA,qBAAA9M,GAAA,CAAA,EAAA,EAAAF,IAAA,KAAA,EAAAkQ,GAAA,EAAA,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAlQ,CAAA,CAAA,EAAA,EAAA,CAAA,EAAAA,EAAA8C,EAAA,CAAA,EAAA,IAAA,CAAA,QAAA9C,KAAA,IAAA,EAAA,CAAA,GAAAyS,GAAA,KAAA,EAAAzS,CAAA,GAAAE,GAAA,EAAAF,EAAA,EAAAA,CAAA,CAAA,EAAA,GAAA4D,GAAA,QAAA5D,KAAA4D,GAAA,CAAA,EAAAoJ,GAAA,KAAA,EAAAhN,CAAA,GAAAE,GAAA,EAAAF,EAAA,EAAAA,CAAA,CAAA,EAAA,OAAA,CAAA,EAAAD,GAAA,CAAA,EAAA,IAAAgM,GAAA,EAAApM,GAAA,CAAA,CAAA,EAAA0B,GAAA,CAAA,EAAA,EAAArB,KAAAE,GAAA,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAAF,CAAA,EAAAA,GA6BO,MAAM0S,WAAwBF,CACrC,CAMI,YAAYlS,EACZ,CACIA,EAAUC,EAAAuC,EAAA,CAAA,EAAK0P,EAAoB,eAAA,EAAoBlS,CAEvD,EAAA,MAAM4E,GAAA3E,EAAA,CAAA,EAAKD,CAAL,EAAA,CAAc,KAAM,YAAa,CAAC,CAAA,EAT5CU,GAAA,KAAQ,mBAAA,EAUJ,KAAK,kBAAoB,IAAIwR,EAAoBtN,GAAA3E,EAAA,CAAA,EAAKD,CAAAA,EAAL,CAAc,KAAM,UAAW,CAAA,CAAC,EAEjF,KAAK,cAEL,OAAO,OAAO,KAAMA,CAAO,CAC/B,CAOgB,MACZ4B,EACAC,EACAC,EACAC,EAEJ,CACI,MAAMI,EAAeC,EAAY,YAAA,mBAAmBP,CAAK,EAEzDD,EAAc,YAAY,KAAMC,EAAOM,EAAc,EAAI,EACzDP,EAAc,YAAY,KAAK,kBAAmBO,EAAcL,EAAQC,CAAS,EAEjFK,cAAY,cAAcD,CAAY,CAC1C,CAGgB,aAChB,CACI,MAAM,cACN,KAAK,kBAAkB,aAC3B,CAGA,IAAI,MAAe,CAAE,OAAO,KAAK,SAAS,MAAM,CAAC,CAAG,CACpD,IAAI,KAAKxB,EAAe,CAAE,KAAK,SAAS,MAAM,CAAC,EAAI,KAAK,kBAAkB,SAAS,MAAM,CAAC,EAAIA,CAAO,CAGrG,IAAI,cAAuB,CAAE,OAAO,KAAK,SAAS,MAAM,CAAC,CAAG,CAC5D,IAAI,aAAaA,EAAe,CAAE,KAAK,SAAS,MAAM,CAAC,EAAI,KAAK,kBAAkB,SAAS,MAAM,CAAC,EAAIA,CAAO,CAG7G,IAAI,OAAmB,CAAE,OAAO,KAAK,SAAS,MAAQ,CACtD,IAAI,MAAMA,EACV,CACI,KAAK,SAAS,OAAS,KAAK,kBAAkB,SAAS,OAASA,EAChE,KAAK,YACT,CAAA,CAGA,IAAI,QAAiB,CAAE,OAAO,KAAK,MAAM,CAAG,CAC5C,IAAI,OAAOA,EACX,CACI,KAAK,MAAM,EAAIA,EACf,KAAK,aACT,CAGA,IAAI,QAAiB,CAAE,OAAO,KAAK,MAAM,CAAG,CAC5C,IAAI,OAAOA,EACX,CACI,KAAK,MAAM,EAAIA,EACf,KAAK,YACT,CAAA,CAGA,IAAI,KAAiB,CAAE,OAAO,KAAK,SAAS,IAAM,CAClD,IAAI,IAAIA,EACR,CACI,KAAK,SAAS,KAAO,KAAK,kBAAkB,SAAS,KAAOA,EAC5D,KAAK,YACT,CAAA,CAGA,IAAI,MAAe,CAAE,OAAO,KAAK,IAAI,CAAG,CACxC,IAAI,KAAKA,EACT,CACI,KAAK,IAAI,EAAIA,EACb,KAAK,YAAA,CACT,CAGA,IAAI,MAAe,CAAE,OAAO,KAAK,IAAI,CAAG,CACxC,IAAI,KAAKA,EACT,CACI,KAAK,IAAI,EAAIA,EACb,KAAK,aACT,CACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0YC3FO,MAAM0R,GAAN,MAAMA,WAAoBtS,EACjC,MAAA,CAiBI,YAAYC,EACZ,CA1DJ,IAAAsB,EAAAC,EA2DQvB,EAAUC,GAAAA,GAAA,CAAA,EAAKoS,GAAY,eAAoBrS,EAAAA,CAAAA,EAE/C,MAAME,EAAaC,EAAAA,WAAW,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAAC,GACA,WAAY,cAChB,CACJ,CAAC,EAEKC,EAAYC,EAAU,UAAA,KAAK,CAC7B,OAAAC,EACA,SAAAC,GACA,KAAM,cACV,CAAC,EAED,MAAMR,GAAA,CACF,WAAAC,EACA,UAAAI,EACA,UAAW,CACP,cAAe,CACX,OAAQ,CACJ,MAAO,EAACgB,EAAAtB,EAAQ,SAAR,KAAAsB,EAAkB,GAAGC,EAAAvB,EAAQ,QAAR,KAAAuB,EAAiB,CAAC,EAC/C,KAAM,WACV,EACA,QAAS,CACL,MAAOvB,EAAQ,OACf,KAAM,WACV,CACJ,CACJ,CACGA,EAAAA,CAAAA,CACN,EA7CLU,GAAA,KAAO,UAAA,EA+CH,KAAK,SAAW,KAAK,UAAU,cAAc,QACjD,CAMA,IAAI,QAAiB,CAAE,OAAO,KAAK,SAAS,OAAO,CAAC,CAAG,CACvD,IAAI,OAAOC,EAAe,CAAE,KAAK,SAAS,OAAO,CAAC,EAAIA,CAAO,CAM7D,IAAI,OAAgB,CAAE,OAAO,KAAK,SAAS,OAAO,CAAC,CAAG,CACtD,IAAI,MAAMA,EAAe,CAAE,KAAK,SAAS,OAAO,CAAC,EAAIA,CAAO,CAM5D,IAAI,QAAoB,CAAE,OAAO,KAAK,SAAS,OAAS,CACxD,IAAI,OAAOA,EAAkB,CAAE,KAAK,SAAS,QAAUA,CAAO,CAM9D,IAAI,SAAkB,CAAE,OAAO,KAAK,OAAO,CAAG,CAC9C,IAAI,QAAQA,EAAe,CAAE,KAAK,OAAO,EAAIA,CAAO,CAMpD,IAAI,SAAkB,CAAE,OAAO,KAAK,OAAO,CAAG,CAC9C,IAAI,QAAQA,EAAe,CAAE,KAAK,OAAO,EAAIA,CAAO,CACxD,EA3FID,GAHS2R,GAGc,kBAAsC,CACzD,QAAS,GACT,OAAQ,IACR,MAAO,EACP,OAAQ,CAAE,EAAG,EAAG,EAAG,CAAE,CACzB,CARG,EAAA,IAAMC,GAAND;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GCvCP9S,GAAA,OAAA,eAAAD,GAAA,OAAA,sBAAAgE,GAAA,OAAA,UAAA,eAAAjE,GAAA,OAAA,UAAA,qBAAAmD,GAAA,CAAA9C,EAAA,EAAAC,IAAA,KAAAD,EAAAH,GAAAG,EAAA,EAAA,CAAA,WAAA,GAAA,aAAA,GAAA,SAAA,GAAA,MAAAC,CAAA,CAAA,EAAAD,EAAA,CAAA,EAAAC,EAAAwB,GAAA,CAAAzB,EAAA,IAAA,CAAA,QAAAC,KAAA,IAAA,EAAA,CAAA,GAAA2D,GAAA,KAAA,EAAA3D,CAAA,GAAA6C,GAAA9C,EAAAC,EAAA,EAAAA,CAAA,CAAA,EAAA,GAAAL,GAAA,QAAAK,KAAAL,GAAA,CAAA,EAAAD,GAAA,KAAA,EAAAM,CAAA,GAAA6C,GAAA9C,EAAAC,EAAA,EAAAA,CAAA,CAAA,EAAA,OAAAD,CAAA,EAAAE,GAAA,CAAAF,EAAA,EAAAC,KAAA6C,GAAA9C,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAAC,CAAA,EAAAA,GA6CO,MAAM4S,GAAN,MAAMA,WAAuBxS,EACpC,MAAA,CAmBI,YAAYC,EACZ,CAlEJ,IAAAsB,EAmEQtB,EAAUC,GAAAkB,GAAA,CAAA,EAAKoR,GAAe,eAAoBvS,EAAAA,CAAAA,EAElD,MAAMwS,GAAalR,EAAAtB,EAAQ,gBAAR,KAAAsB,EAAyB,GAEtCpB,EAAaC,EAAW,WAAA,KAAK,CAC/B,OAAQ,CACJ,OAAQC,EACR,WAAY,YAChB,EACA,SAAU,CACN,OAAQC,GAAO,QAAQ,qBAAsBmS,EAAW,QAAQ,CAAC,CAAC,EAClE,WAAY,cAChB,CACJ,CAAC,EAEKlS,EAAYC,EAAAA,UAAU,KAAK,CAC7B,OAAAC,EACA,SAAUC,GAAS,QAAQ,qBAAsB+R,EAAW,QAAQ,CAAC,CAAC,EACtE,KAAM,kBACV,CAAC,EAED,MAAM,CACF,WAAAtS,EACA,UAAAI,EACA,UAAW,CACP,iBAAkB,CACd,UAAW,CAAE,MAAON,EAAQ,SAAU,KAAM,KAAM,EAClD,QAAS,CAAE,MAAOA,EAAQ,OAAQ,KAAM,WAAY,EACpD,OAAQ,CAAE,MAAO,IAAI,aAAa,CAAC,EAAG,KAAM,WAAY,CAC5D,CACJ,CACJ,CAAC,EA1CLU,GAAA,KAAO,UAAA,EA4CH,KAAK,SAAW,KAAK,UAAU,iBAAiB,SAEhD,OAAO,OAAO,KAAMV,CAAO,CAC/B,CAMA,IAAI,UAAmB,CAAE,OAAO,KAAK,SAAS,SAAW,CACzD,IAAI,SAASW,EAAe,CAAE,KAAK,SAAS,UAAYA,CAAO,CAM/D,IAAI,QAAoB,CAAE,OAAO,KAAK,SAAS,OAAS,CACxD,IAAI,OAAOA,EACX,CACQ,MAAM,QAAQA,CAAK,IAEnBA,EAAQ,CAAE,EAAGA,EAAM,CAAC,EAAG,EAAGA,EAAM,CAAC,CAAE,GAGvC,KAAK,SAAS,QAAUA,CAC5B,CAMA,IAAI,SAAkB,CAAE,OAAO,KAAK,SAAS,QAAQ,CAAG,CACxD,IAAI,QAAQA,EAAe,CAAE,KAAK,SAAS,QAAQ,EAAIA,CAAO,CAM9D,IAAI,SAAkB,CAAE,OAAO,KAAK,SAAS,QAAQ,CAAG,CACxD,IAAI,QAAQA,EAAe,CAAE,KAAK,SAAS,QAAQ,EAAIA,CAAO,CAM9D,IAAI,aAAsB,CAAE,OAAO,KAAK,SAAS,OAAO,CAAC,CAAG,CAC5D,IAAI,YAAYA,EAAe,CAAE,KAAK,SAAS,OAAO,CAAC,EAAIA,CAAO,CAMlE,IAAI,QAAiB,CAAE,OAAO,KAAK,SAAS,OAAO,CAAC,CAAG,CACvD,IAAI,OAAOA,EAAe,CAAE,KAAK,SAAS,OAAO,CAAC,EAAKA,EAAQ,GAAKA,IAAU,IAAY,GAAKA,CAAO,CAC1G,EA1GID,GAHS6R,GAGc,kBAAyC,CAC5D,SAAU,GACV,OAAQ,CAAE,EAAG,EAAG,EAAG,CAAE,EACrB,YAAa,EACb,OAAQ,GACR,cAAe,EACnB,CAAA,MATSE,GAANF"}